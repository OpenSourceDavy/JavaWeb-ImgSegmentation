{"ast":null,"code":"import { defineComponent, reactive, toRefs, getCurrentInstance, onBeforeUnmount, nextTick, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot, createElementVNode, toDisplayString, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useOption } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElOption\",\n  componentName: \"ElOption\",\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object]\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props) {\n    const ns = useNamespace(\"select\");\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    });\n    const {\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem\n    } = useOption(props, states);\n    const {\n      visible,\n      hover\n    } = toRefs(states);\n    const vm = getCurrentInstance().proxy;\n    const key = vm.value;\n    select.onOptionCreate(vm);\n    onBeforeUnmount(() => {\n      const {\n        selected\n      } = select;\n      const selectedOptions = select.props.multiple ? selected : [selected];\n      const doesSelected = selectedOptions.some(item => {\n        return item.value === vm.value;\n      });\n\n      if (select.cachedOptions.get(key) === vm && !doesSelected) {\n        nextTick(() => {\n          select.cachedOptions.delete(key);\n        });\n      }\n\n      select.onOptionDestroy(key, vm);\n    });\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true);\n      }\n    }\n\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([_ctx.ns.be(\"dropdown\", \"item\"), _ctx.ns.is(\"disabled\", _ctx.isDisabled), {\n      selected: _ctx.itemSelected,\n      hover: _ctx.hover\n    }]),\n    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createElementVNode(\"span\", null, toDisplayString(_ctx.currentLabel), 1)])], 34)), [[vShow, _ctx.visible]]);\n}\n\nvar Option = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/select/src/option.vue\"]]);\n\nexport { Option as default };","map":{"version":3,"mappings":";;;;;;AAiCA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,YADuB;AAE7BC,eAAe,YAFc;AAI7BC,OAAO;AACLC,SAAO;AACLC,cAAU,MADL;AAELC,UAAM,GAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B;AAFD,KADF;AAKLC,WAAO,CAACJ,MAAD,EAASC,MAAT,CALF;AAMLI,WAAS,SANJ;AAOLC,YAAU;AACRP,UAAM,SADE;AAERQ,aAAS;AAFD;AAPL,GAJsB;;AAiB7BC,QAAMZ,KAAN,EAAa;AACL,eAAKa,aAAa,QAAb,CAAL;AACN,UAAMC,SAASC,QAAS;AACtBC,WAAO,IADe;AAEtBC,mBAAe,OAFO;AAGtBC,aAAS,MAHa;AAItBC,cAAU,OAJY;AAKtBC,WAAO;AALe,MAAxB;AAQM;AAAEC,kBAAF;AAAgBC,kBAAhB;AAA8BC,gBAA9B;AAA0CC,YAA1C;AAAkDC;AAAlD,QACJC,UAAU1B,KAAV,EAAiBc,MAAjB,CADI;AAGN,UAAM;AAAEI,aAAF;AAAWE;AAAX,QAAqBO,OAAOb,MAAP,CAA3B;AAEM,eAAKc,qBAAqBC,KAA1B;AACN,UAAMC,MAAOC,EAAoC,MAAjD;AACAP,WAAOQ,cAAP,CAAsBD,EAAtB;AAEAE,oBAAgB,MAAM;AACpB,YAAM;AAAEC;AAAF,UAAeV,MAArB;AACA,YAAMW,kBAAkBX,MAAO,MAAP,CAAaY,QAAb,GAAwBF,QAAxB,GAAmC,CAACA,QAAD,CAA3D;AACA,YAAMG,YAAe,mBAAgBC,IAAhB,CAAsBC,IAAD,IAAU;AAC3C,oBAAKtC,KAAL,KAAgB8B,EAAoC,MAApD;AACR,OAFoB,CAArB;;AAIA,UAAIP,OAAOgB,aAAP,CAAqBC,GAArB,CAAyBX,GAAzB,MAAkCC,EAAlC,IAAwC,CAACM,YAA7C,EAA2D;AACzDK,iBAAS,MAAM;AACNlB,+BAAcmB,MAAd,CAAqBb,GAArB;AACR,SAFD;AAGF;;AACON,6BAAgBM,GAAhB,EAAqBC,EAArB;AACR,KAbD;;AAe6B;AAC3B,UAAI/B,KAAM,SAAN,KAAmB,IAAnB,IAA2Bc,OAAOG,aAAP,KAAyB,IAAxD,EAA8D;AACrDO,kCAAmBO,EAAnB,EAAuB,IAAvB;AACT;AACF;;AAEO;AACLa,QADK;AAELvB,kBAFK;AAGLC,kBAHK;AAILC,gBAJK;AAKLC,YALK;AAMLC,eANK;AAOLP,aAPK;AAQLE,WARK;AASLyB,uBATK;AAUL/B;AAVK;AAYT;;AArE6B,EAA/B;;;sCAhCEgC,kBAgBK;AAdFC,SAAK,kBAAUC,QAAGC,EAAH,CAAK,UAAL,EAAK,MAAL,CAAV,EAA2CD,QAAGE,EAAH,CAAK,UAAL,EAAkBF,IAAU,WAA5B,CAA3C,EAAuE;AAA6Bd,iCAA7B;AAAmDd;AAAnD,KAAvE,EAcH;AANF+B,kBAAUC,MAAE,GAAF,KAAEA,kEAAF,CAMR;AALFC,aAAKD,qDAAOJ,IAAiB,kBAAjB,IAAiBA,+BAAxB,EAAwB,QAAxB;AAKH,KAL2B,CAE9BM,WAEON,WAFP,EAEO,SAFP,EAEO,EAFP,QAEO,CADLO,mBAA+B,MAA/B,EAA+B,IAA/B,EAA+BC,gBAAtBR,IAAY,aAAU,CAA/B,EAAqB,CAArB,CACK,CAFP,CAF8B,CAK3B,iBAfKA,IAAO","names":["_sfc_main","defineComponent","name","componentName","props","value","required","type","String","Number","Boolean","Object","label","created","disabled","default","setup","useNamespace","states","reactive","index","groupDisabled","visible","hitState","hover","currentLabel","itemSelected","isDisabled","select","hoverItem","useOption","toRefs","getCurrentInstance","proxy","key","vm","onOptionCreate","onBeforeUnmount","selected","selectedOptions","multiple","doesSelected","some","item","cachedOptions","get","nextTick","delete","ns","selectOptionClick","_createElementBlock","class","_ctx","be","is","onMouseenter","_cache","onClick","_renderSlot","_createElementVNode","toDisplayString"],"sources":["../../../../../../packages/components/select/src/option.vue"],"sourcesContent":["<template>\n  <li\n    v-show=\"visible\"\n    :class=\"[\n      ns.be('dropdown', 'item'),\n      ns.is('disabled', isDisabled),\n      {\n        selected: itemSelected,\n        hover,\n      },\n    ]\"\n    @mouseenter=\"hoverItem\"\n    @click.stop=\"selectOptionClick\"\n  >\n    <slot>\n      <span>{{ currentLabel }}</span>\n    </slot>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  nextTick,\n  onBeforeUnmount,\n  reactive,\n  toRefs,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useOption } from './useOption'\nimport type { SelectOptionProxy } from './token'\n\nexport default defineComponent({\n  name: 'ElOption',\n  componentName: 'ElOption',\n\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object],\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  setup(props) {\n    const ns = useNamespace('select')\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false,\n    })\n\n    const { currentLabel, itemSelected, isDisabled, select, hoverItem } =\n      useOption(props, states)\n\n    const { visible, hover } = toRefs(states)\n\n    const vm = getCurrentInstance().proxy\n    const key = (vm as unknown as SelectOptionProxy).value\n    select.onOptionCreate(vm as unknown as SelectOptionProxy)\n\n    onBeforeUnmount(() => {\n      const { selected } = select\n      const selectedOptions = select.props.multiple ? selected : [selected]\n      const doesSelected = selectedOptions.some((item) => {\n        return item.value === (vm as unknown as SelectOptionProxy).value\n      })\n      // if option is not selected, remove it from cache\n      if (select.cachedOptions.get(key) === vm && !doesSelected) {\n        nextTick(() => {\n          select.cachedOptions.delete(key)\n        })\n      }\n      select.onOptionDestroy(key, vm)\n    })\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true)\n      }\n    }\n\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}