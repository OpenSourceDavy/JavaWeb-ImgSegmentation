{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, nextTick, onMounted, onBeforeUnmount, toRefs, resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createVNode, createElementVNode, createElementBlock, normalizeClass, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, toDisplayString, withKeys, renderSlot, vShow, createTextVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useModal } from '../../../hooks/use-modal/index.mjs';\nimport { usePreventGlobal } from '../../../hooks/use-prevent-global/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElMessageBox\",\n  directives: {\n    TrapFocus\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean\n    },\n    container: {\n      type: String,\n      default: \"body\"\n    },\n    boxType: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"vanish\", \"action\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const visible = ref(false);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const state = reactive({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: \"\",\n      cancelButtonClass: \"\",\n      confirmButtonText: \"\",\n      confirmButtonClass: \"\",\n      customClass: \"\",\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: \"\",\n      inputPattern: null,\n      inputPlaceholder: \"\",\n      inputType: \"text\",\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: \"\",\n      message: null,\n      modalFade: true,\n      modalClass: \"\",\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: \"\",\n      title: void 0,\n      showInput: false,\n      action: \"\",\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: \"\",\n      validateError: false,\n      zIndex: nextZIndex()\n    });\n    const typeClass = computed(() => {\n      const type = state.type;\n      return type && TypeComponentsMap[type] ? `el-message-box-icon--${type}` : \"\";\n    });\n    const btnSize = useSize(computed(() => props.buttonSize), {\n      prop: true,\n      form: true,\n      formItem: true\n    });\n    const iconComponent = computed(() => state.icon || TypeComponentsMap[state.type] || \"\");\n    const hasMessage = computed(() => !!state.message);\n    const rootRef = ref();\n    const headerRef = ref();\n    const inputRef = ref();\n    const confirmRef = ref();\n    const confirmButtonClasses = computed(() => state.confirmButtonClass);\n    watch(() => state.inputValue, async val => {\n      await nextTick();\n\n      if (props.boxType === \"prompt\" && val !== null) {\n        validate();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => visible.value, val => {\n      if (val) {\n        if (props.boxType === \"alert\" || props.boxType === \"confirm\") {\n          nextTick().then(() => {\n            var _a, _b, _c;\n\n            (_c = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus) == null ? void 0 : _c.call(_b);\n          });\n        }\n\n        state.zIndex = nextZIndex();\n      }\n\n      if (props.boxType !== \"prompt\") return;\n\n      if (val) {\n        nextTick().then(() => {\n          if (inputRef.value && inputRef.value.$el) {\n            getInputElement().focus();\n          }\n        });\n      } else {\n        state.editorErrorMessage = \"\";\n        state.validateError = false;\n      }\n    });\n    const draggable = computed(() => props.draggable);\n    useDraggable(rootRef, headerRef, draggable);\n    onMounted(async () => {\n      await nextTick();\n\n      if (props.closeOnHashChange) {\n        on(window, \"hashchange\", doClose);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, \"hashchange\", doClose);\n      }\n    });\n\n    function doClose() {\n      if (!visible.value) return;\n      visible.value = false;\n      nextTick(() => {\n        if (state.action) emit(\"action\", state.action);\n      });\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? \"close\" : \"cancel\");\n      }\n    };\n\n    const overlayEvent = useSameTarget(handleWrapperClick);\n\n    const handleInputEnter = e => {\n      if (state.inputType !== \"textarea\") {\n        e.preventDefault();\n        return handleAction(\"confirm\");\n      }\n    };\n\n    const handleAction = action => {\n      var _a;\n\n      if (props.boxType === \"prompt\" && action === \"confirm\" && !validate()) {\n        return;\n      }\n\n      state.action = action;\n\n      if (state.beforeClose) {\n        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);\n      } else {\n        doClose();\n      }\n    };\n\n    const validate = () => {\n      if (props.boxType === \"prompt\") {\n        const inputPattern = state.inputPattern;\n\n        if (inputPattern && !inputPattern.test(state.inputValue || \"\")) {\n          state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n          state.validateError = true;\n          return false;\n        }\n\n        const inputValidator = state.inputValidator;\n\n        if (typeof inputValidator === \"function\") {\n          const validateResult = inputValidator(state.inputValue);\n\n          if (validateResult === false) {\n            state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n            state.validateError = true;\n            return false;\n          }\n\n          if (typeof validateResult === \"string\") {\n            state.editorErrorMessage = validateResult;\n            state.validateError = true;\n            return false;\n          }\n        }\n      }\n\n      state.editorErrorMessage = \"\";\n      state.validateError = false;\n      return true;\n    };\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    };\n\n    const handleClose = () => {\n      handleAction(\"close\");\n    };\n\n    if (props.closeOnPressEscape) {\n      useModal({\n        handleClose\n      }, visible);\n    } else {\n      usePreventGlobal(visible, \"keydown\", e => e.code === EVENT_CODE.esc);\n    }\n\n    if (props.lockScroll) {\n      useLockscreen(visible);\n    }\n\n    useRestoreActive(visible);\n    return { ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose,\n      handleClose,\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  key: 0,\n  ref: \"headerRef\",\n  class: \"el-message-box__header\"\n};\nconst _hoisted_3 = {\n  class: \"el-message-box__title\"\n};\nconst _hoisted_4 = {\n  class: \"el-message-box__content\"\n};\nconst _hoisted_5 = {\n  class: \"el-message-box__container\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"el-message-box__message\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = {\n  class: \"el-message-box__input\"\n};\nconst _hoisted_10 = {\n  class: \"el-message-box__btns\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_el_overlay = resolveComponent(\"el-overlay\");\n\n  const _directive_trap_focus = resolveDirective(\"trap-focus\");\n\n  return openBlock(), createBlock(Transition, {\n    name: \"fade-in-linear\",\n    onAfterLeave: _cache[11] || (_cache[11] = $event => _ctx.$emit(\"vanish\"))\n  }, {\n    default: withCtx(() => [withDirectives(createVNode(_component_el_overlay, {\n      \"z-index\": _ctx.zIndex,\n      \"overlay-class\": [\"is-message-box\", _ctx.modalClass],\n      mask: _ctx.modal\n    }, {\n      default: withCtx(() => [createElementVNode(\"div\", {\n        class: \"el-overlay-message-box\",\n        onClick: _cache[8] || (_cache[8] = (...args) => _ctx.overlayEvent.onClick && _ctx.overlayEvent.onClick(...args)),\n        onMousedown: _cache[9] || (_cache[9] = (...args) => _ctx.overlayEvent.onMousedown && _ctx.overlayEvent.onMousedown(...args)),\n        onMouseup: _cache[10] || (_cache[10] = (...args) => _ctx.overlayEvent.onMouseup && _ctx.overlayEvent.onMouseup(...args))\n      }, [withDirectives((openBlock(), createElementBlock(\"div\", {\n        ref: \"rootRef\",\n        role: \"dialog\",\n        \"aria-label\": _ctx.title || \"dialog\",\n        \"aria-modal\": \"true\",\n        class: normalizeClass([\"el-message-box\", _ctx.customClass, {\n          \"el-message-box--center\": _ctx.center,\n          \"is-draggable\": _ctx.draggable\n        }]),\n        style: normalizeStyle(_ctx.customStyle),\n        onClick: _cache[7] || (_cache[7] = withModifiers(() => {}, [\"stop\"]))\n      }, [_ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [_ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", null, toDisplayString(_ctx.title), 1)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        class: \"el-message-box__headerbtn\",\n        \"aria-label\": \"Close\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\")),\n        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, [createVNode(_component_el_icon, {\n        class: \"el-message-box__close\"\n      }, {\n        default: withCtx(() => [createVNode(_component_close)]),\n        _: 1\n      })], 32)) : createCommentVNode(\"v-if\", true)], 512)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", _hoisted_4, [createElementVNode(\"div\", _hoisted_5, [_ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.hasMessage ? (openBlock(), createElementBlock(\"div\", _hoisted_6, [renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_7, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(\"p\", {\n        key: 1,\n        innerHTML: _ctx.message\n      }, null, 8, _hoisted_8))])])) : createCommentVNode(\"v-if\", true)]), withDirectives(createElementVNode(\"div\", _hoisted_9, [createVNode(_component_el_input, {\n        ref: \"inputRef\",\n        modelValue: _ctx.inputValue,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.inputValue = $event),\n        type: _ctx.inputType,\n        placeholder: _ctx.inputPlaceholder,\n        class: normalizeClass({\n          invalid: _ctx.validateError\n        }),\n        onKeydown: withKeys(_ctx.handleInputEnter, [\"enter\"])\n      }, null, 8, [\"modelValue\", \"type\", \"placeholder\", \"class\", \"onKeydown\"]), createElementVNode(\"div\", {\n        class: \"el-message-box__errormsg\",\n        style: normalizeStyle({\n          visibility: !!_ctx.editorErrorMessage ? \"visible\" : \"hidden\"\n        })\n      }, toDisplayString(_ctx.editorErrorMessage), 5)], 512), [[vShow, _ctx.showInput]])]), createElementVNode(\"div\", _hoisted_10, [_ctx.showCancelButton ? (openBlock(), createBlock(_component_el_button, {\n        key: 0,\n        loading: _ctx.cancelButtonLoading,\n        class: normalizeClass([_ctx.cancelButtonClass]),\n        round: _ctx.roundButton,\n        size: _ctx.btnSize,\n        onClick: _cache[3] || (_cache[3] = $event => _ctx.handleAction(\"cancel\")),\n        onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers($event => _ctx.handleAction(\"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.cancelButtonText || _ctx.t(\"el.messagebox.cancel\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"size\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_button, {\n        ref: \"confirmRef\",\n        type: \"primary\",\n        loading: _ctx.confirmButtonLoading,\n        class: normalizeClass([_ctx.confirmButtonClasses]),\n        round: _ctx.roundButton,\n        disabled: _ctx.confirmButtonDisabled,\n        size: _ctx.btnSize,\n        onClick: _cache[5] || (_cache[5] = $event => _ctx.handleAction(\"confirm\")),\n        onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers($event => _ctx.handleAction(\"confirm\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.confirmButtonText || _ctx.t(\"el.messagebox.confirm\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"disabled\", \"size\"]), [[vShow, _ctx.showConfirmButton]])])], 14, _hoisted_1)), [[_directive_trap_focus]])], 32)]),\n      _: 3\n    }, 8, [\"z-index\", \"overlay-class\", \"mask\"]), [[vShow, _ctx.visible]])]),\n    _: 3\n  });\n}\n\nvar MessageBoxConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/message-box/src/index.vue\"]]);\n\nexport { MessageBoxConstructor as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","directives","TrapFocus","components","ElButton","ElInput","ElOverlay","ElIcon","inheritAttrs","props","buttonSize","type","validator","modal","default","lockScroll","showClose","closeOnClickModal","closeOnPressEscape","closeOnHashChange","center","draggable","roundButton","container","boxType","emits","setup","emit","t","useLocale","ref","nextZIndex","useZIndex","state","reactive","beforeClose","callback","cancelButtonText","cancelButtonClass","confirmButtonText","confirmButtonClass","customClass","customStyle","dangerouslyUseHTMLString","distinguishCancelAndClose","icon","inputPattern","inputPlaceholder","inputType","inputValue","inputValidator","inputErrorMessage","message","modalFade","modalClass","showCancelButton","showConfirmButton","title","showInput","action","confirmButtonLoading","cancelButtonLoading","confirmButtonDisabled","editorErrorMessage","validateError","zIndex","computed","btnSize","prop","form","formItem","TypeComponentsMap","hasMessage","rootRef","headerRef","inputRef","confirmRef","confirmButtonClasses","watch","val","nextTick","validate","immediate","visible","value","then","getInputElement","useDraggable","onMounted","on","onBeforeUnmount","off","doClose","handleWrapperClick","handleAction","e","validateResult","inputRefs","useModal","handleClose","usePreventGlobal","useLockscreen","useRestoreActive","overlayEvent","typeClass","iconComponent","handleInputEnter","_hoisted_2","key","class","_hoisted_6","_directive_trap_focus","_openBlock","_withDirectives","_ctx","_createVNode","onClick","onMousedown","role","style","_","_createCommentVNode","_createElementVNode","_toDisplayString","onKeydown","_hoisted_4","createCommentVNode","_renderSlot","modelValue","_cache","placeholder","invalid","loading","round","size","disabled"],"sources":["../../../../../../packages/components/message-box/src/index.vue"],"sourcesContent":["<template>\n  <transition name=\"fade-in-linear\" @after-leave=\"$emit('vanish')\">\n    <el-overlay\n      v-show=\"visible\"\n      :z-index=\"zIndex\"\n      :overlay-class=\"['is-message-box', modalClass]\"\n      :mask=\"modal\"\n    >\n      <div\n        class=\"el-overlay-message-box\"\n        @click=\"overlayEvent.onClick\"\n        @mousedown=\"overlayEvent.onMousedown\"\n        @mouseup=\"overlayEvent.onMouseup\"\n      >\n        <div\n          ref=\"rootRef\"\n          v-trap-focus\n          role=\"dialog\"\n          :aria-label=\"title || 'dialog'\"\n          aria-modal=\"true\"\n          :class=\"[\n            'el-message-box',\n            customClass,\n            { 'el-message-box--center': center, 'is-draggable': draggable },\n          ]\"\n          :style=\"customStyle\"\n          @click.stop=\"\"\n        >\n          <div\n            v-if=\"title !== null && title !== undefined\"\n            ref=\"headerRef\"\n            class=\"el-message-box__header\"\n          >\n            <div class=\"el-message-box__title\">\n              <el-icon\n                v-if=\"iconComponent && center\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <span>{{ title }}</span>\n            </div>\n            <button\n              v-if=\"showClose\"\n              type=\"button\"\n              class=\"el-message-box__headerbtn\"\n              aria-label=\"Close\"\n              @click=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n              @keydown.prevent.enter=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n            >\n              <el-icon class=\"el-message-box__close\">\n                <close />\n              </el-icon>\n            </button>\n          </div>\n          <div class=\"el-message-box__content\">\n            <div class=\"el-message-box__container\">\n              <el-icon\n                v-if=\"iconComponent && !center && hasMessage\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <div v-if=\"hasMessage\" class=\"el-message-box__message\">\n                <slot>\n                  <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n                  <p v-else v-html=\"message\" />\n                </slot>\n              </div>\n            </div>\n            <div v-show=\"showInput\" class=\"el-message-box__input\">\n              <el-input\n                ref=\"inputRef\"\n                v-model=\"inputValue\"\n                :type=\"inputType\"\n                :placeholder=\"inputPlaceholder\"\n                :class=\"{ invalid: validateError }\"\n                @keydown.enter=\"handleInputEnter\"\n              />\n              <div\n                class=\"el-message-box__errormsg\"\n                :style=\"{\n                  visibility: !!editorErrorMessage ? 'visible' : 'hidden',\n                }\"\n              >\n                {{ editorErrorMessage }}\n              </div>\n            </div>\n          </div>\n          <div class=\"el-message-box__btns\">\n            <el-button\n              v-if=\"showCancelButton\"\n              :loading=\"cancelButtonLoading\"\n              :class=\"[cancelButtonClass]\"\n              :round=\"roundButton\"\n              :size=\"btnSize\"\n              @click=\"handleAction('cancel')\"\n              @keydown.prevent.enter=\"handleAction('cancel')\"\n            >\n              {{ cancelButtonText || t('el.messagebox.cancel') }}\n            </el-button>\n            <el-button\n              v-show=\"showConfirmButton\"\n              ref=\"confirmRef\"\n              type=\"primary\"\n              :loading=\"confirmButtonLoading\"\n              :class=\"[confirmButtonClasses]\"\n              :round=\"roundButton\"\n              :disabled=\"confirmButtonDisabled\"\n              :size=\"btnSize\"\n              @click=\"handleAction('confirm')\"\n              @keydown.prevent.enter=\"handleAction('confirm')\"\n            >\n              {{ confirmButtonText || t('el.messagebox.confirm') }}\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </el-overlay>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport { TrapFocus } from '@element-plus/directives'\nimport {\n  useDraggable,\n  useLocale,\n  useLockscreen,\n  useModal,\n  usePreventGlobal,\n  useRestoreActive,\n  useSameTarget,\n  useSize,\n  useZIndex,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport {\n  TypeComponents,\n  TypeComponentsMap,\n  isValidComponentSize,\n  off,\n  on,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type {\n  Action,\n  MessageBoxState,\n  MessageBoxType,\n} from './message-box.type'\n\nexport default defineComponent({\n  name: 'ElMessageBox',\n  directives: {\n    TrapFocus,\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents,\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    modal: {\n      type: Boolean,\n      default: true,\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true,\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true,\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean,\n    },\n    container: {\n      type: String, // default append to body\n      default: 'body',\n    },\n    boxType: {\n      type: String as PropType<MessageBoxType>,\n      default: '',\n    },\n  },\n  emits: ['vanish', 'action'],\n  setup(props, { emit }) {\n    // const popup = usePopup(props, doClose)\n    const { t } = useLocale()\n    const visible = ref(false)\n    const { nextZIndex } = useZIndex()\n    // s represents state\n    const state = reactive<MessageBoxState>({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: '',\n      cancelButtonClass: '',\n      confirmButtonText: '',\n      confirmButtonClass: '',\n      customClass: '',\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: '',\n      inputPattern: null,\n      inputPlaceholder: '',\n      inputType: 'text',\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: '',\n      message: null,\n      modalFade: true,\n      modalClass: '',\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: '',\n      title: undefined,\n      showInput: false,\n      action: '' as Action,\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: '',\n      // refer to: https://github.com/ElemeFE/element/commit/2999279ae34ef10c373ca795c87b020ed6753eed\n      // seemed ok for now without this state.\n      // isOnComposition: false, // temporary remove\n      validateError: false,\n      zIndex: nextZIndex(),\n    })\n\n    const typeClass = computed(() => {\n      const type = state.type\n      return type && TypeComponentsMap[type]\n        ? `el-message-box-icon--${type}`\n        : ''\n    })\n\n    const btnSize = useSize(\n      computed(() => props.buttonSize),\n      { prop: true, form: true, formItem: true }\n    )\n\n    const iconComponent = computed(\n      () => state.icon || TypeComponentsMap[state.type] || ''\n    )\n    const hasMessage = computed(() => !!state.message)\n    const rootRef = ref<HTMLElement>()\n    const headerRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLElement>()\n    const confirmRef = ref<HTMLElement>()\n\n    const confirmButtonClasses = computed(() => state.confirmButtonClass)\n\n    watch(\n      () => state.inputValue,\n      async (val) => {\n        await nextTick()\n        if (props.boxType === 'prompt' && val !== null) {\n          validate()\n        }\n      },\n      { immediate: true }\n    )\n\n    watch(\n      () => visible.value,\n      (val) => {\n        if (val) {\n          if (props.boxType === 'alert' || props.boxType === 'confirm') {\n            nextTick().then(() => {\n              confirmRef.value?.$el?.focus?.()\n            })\n          }\n          state.zIndex = nextZIndex()\n        }\n        if (props.boxType !== 'prompt') return\n        if (val) {\n          nextTick().then(() => {\n            if (inputRef.value && inputRef.value.$el) {\n              getInputElement().focus()\n            }\n          })\n        } else {\n          state.editorErrorMessage = ''\n          state.validateError = false\n        }\n      }\n    )\n\n    const draggable = computed(() => props.draggable)\n    useDraggable(rootRef, headerRef, draggable)\n\n    onMounted(async () => {\n      await nextTick()\n      if (props.closeOnHashChange) {\n        on(window, 'hashchange', doClose)\n      }\n    })\n\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, 'hashchange', doClose)\n      }\n    })\n\n    function doClose() {\n      if (!visible.value) return\n      visible.value = false\n      nextTick(() => {\n        if (state.action) emit('action', state.action)\n      })\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? 'close' : 'cancel')\n      }\n    }\n\n    const overlayEvent = useSameTarget(handleWrapperClick)\n\n    const handleInputEnter = (e: KeyboardEvent) => {\n      if (state.inputType !== 'textarea') {\n        e.preventDefault()\n        return handleAction('confirm')\n      }\n    }\n\n    const handleAction = (action: Action) => {\n      if (props.boxType === 'prompt' && action === 'confirm' && !validate()) {\n        return\n      }\n\n      state.action = action\n\n      if (state.beforeClose) {\n        state.beforeClose?.(action, state, doClose)\n      } else {\n        doClose()\n      }\n    }\n\n    const validate = () => {\n      if (props.boxType === 'prompt') {\n        const inputPattern = state.inputPattern\n        if (inputPattern && !inputPattern.test(state.inputValue || '')) {\n          state.editorErrorMessage =\n            state.inputErrorMessage || t('el.messagebox.error')\n          state.validateError = true\n          return false\n        }\n        const inputValidator = state.inputValidator\n        if (typeof inputValidator === 'function') {\n          const validateResult = inputValidator(state.inputValue)\n          if (validateResult === false) {\n            state.editorErrorMessage =\n              state.inputErrorMessage || t('el.messagebox.error')\n            state.validateError = true\n            return false\n          }\n          if (typeof validateResult === 'string') {\n            state.editorErrorMessage = validateResult\n            state.validateError = true\n            return false\n          }\n        }\n      }\n      state.editorErrorMessage = ''\n      state.validateError = false\n      return true\n    }\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs\n      return (inputRefs.input || inputRefs.textarea) as HTMLElement\n    }\n\n    const handleClose = () => {\n      handleAction('close')\n    }\n\n    // when close on press escape is disabled, pressing esc should not callout\n    // any other message box and close any other dialog-ish elements\n    // e.g. Dialog has a close on press esc feature, and when it closes, it calls\n    // props.beforeClose method to make a intermediate state by callout a message box\n    // for some verification or alerting. then if we allow global event liek this\n    // to dispatch, it could callout another message box.\n    if (props.closeOnPressEscape) {\n      useModal(\n        {\n          handleClose,\n        },\n        visible\n      )\n    } else {\n      usePreventGlobal(\n        visible,\n        'keydown',\n        (e: KeyboardEvent) => e.code === EVENT_CODE.esc\n      )\n    }\n\n    // locks the screen to prevent scroll\n    if (props.lockScroll) {\n      useLockscreen(visible)\n    }\n\n    // restore to prev active element.\n    useRestoreActive(visible)\n\n    return {\n      ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose, // for outside usage\n      handleClose, // for out side usage\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}