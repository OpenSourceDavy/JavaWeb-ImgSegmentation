{"ast":null,"code":"import { defineComponent, inject, ref, unref, toRef, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport { useTooltipTriggerProps } from './tooltip.mjs';\nimport { whenTrigger } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperTrigger from '../../popper/src/trigger2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTooltipTrigger\",\n  components: {\n    ElPopperTrigger\n  },\n  props: useTooltipTriggerProps,\n\n  setup(props) {\n    const ns = useNamespace(\"tooltip\");\n    const {\n      controlled,\n      id,\n      open,\n      onOpen,\n      onClose,\n      onToggle\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const triggerRef = ref(null);\n\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n\n    const trigger = toRef(props, \"trigger\");\n    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onOpen));\n    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onClose));\n    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"click\", e => {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onOpen));\n    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onClose));\n    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"contextmenu\", e => {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, e => {\n      const {\n        code\n      } = e;\n\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n        onToggle(e);\n      }\n    });\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_popper_trigger = resolveComponent(\"el-popper-trigger\");\n\n  return openBlock(), createBlock(_component_el_popper_trigger, {\n    id: _ctx.id,\n    \"virtual-ref\": _ctx.virtualRef,\n    open: _ctx.open,\n    \"virtual-triggering\": _ctx.virtualTriggering,\n    class: normalizeClass(_ctx.ns.e(\"trigger\")),\n    onBlur: _ctx.onBlur,\n    onClick: _ctx.onClick,\n    onContextmenu: _ctx.onContextMenu,\n    onFocus: _ctx.onFocus,\n    onMouseenter: _ctx.onMouseenter,\n    onMouseleave: _ctx.onMouseleave,\n    onKeydown: _ctx.onKeydown\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"id\", \"virtual-ref\", \"open\", \"virtual-triggering\", \"class\", \"onBlur\", \"onClick\", \"onContextmenu\", \"onFocus\", \"onMouseenter\", \"onMouseleave\", \"onKeydown\"]);\n}\n\nvar ElTooltipTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/trigger.vue\"]]);\n\nexport { ElTooltipTrigger as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AA+BA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,oBADuB;AAE7BC,YAAY;AACVC;AADU,GAFiB;AAK7BC,OAAO,wBALsB;;AAM7BC,QAAMD,KAAN,EAAa;AACL,eAAKE,aAAa,SAAb,CAAL;AACA;AAAEC,gBAAF;AAAcC,QAAd;AAAkBC,UAAlB;AAAwBC,YAAxB;AAAgCC,aAAhC;AAAyCC;AAAzC,QAAsDC,MAC1D,wBACA,KACF,CAFE,CADI;AAIA,uBAAaC,IAA4B,IAA5B,CAAb;;AAEN,UAAMC,+BAA+B,MAAM;AACzC,UAAIC,KAAM,YAAN,IAAqBZ,MAAMa,QAA/B,EAAyC;AAChC;AACT;AACF,KAJA;;AAKM,oBAAUC,KAAM,QAAO,SAAP,CAAhB;AACN,UAAMC,eAAeC,oBACnB,+BACAC,YAAYC,OAAZ,EAAqB,OAArB,EAA8BZ,MAA9B,CADA,CADF;AAIA,UAAMa,eAAeH,oBACnB,+BACAC,YAAYC,OAAZ,EAAqB,OAArB,EAA8BX,OAA9B,CADA,CADF;AAIA,UAAMa,UAAUJ,oBACd,+BACAC,YAAYC,OAAZ,EAAqB,OAArB,EAA+BG,CAAD,IAAO;AAE9B,YAAiBC,MAAjB,KAA4B,CAA5B,EAA+B;AAClCd,iBAASa,CAAT;AACF;AACD,KALD,CADA,CADF;AAUA,UAAME,UAAUP,oBACd,+BACAC,YAAYC,OAAZ,EAAqB,OAArB,EAA8BZ,MAA9B,CADA,CADF;AAKA,UAAMkB,SAASR,oBACb,+BACAC,YAAYC,OAAZ,EAAqB,OAArB,EAA8BX,OAA9B,CADA,CADF;AAKA,UAAMkB,gBAAgBT,oBACpB,+BACAC,YAAYC,OAAZ,EAAqB,aAArB,EAAqCG,CAAD,IAAc;AAChDA,QAAEK,cAAF;AACAlB,eAASa,CAAT;AACD,KAHD,CADA,CADF;AAQA,UAAMM,SAAY,wBAChBhB,4BADgB,EAEfU,CAAD,IAAsB;AACpB,YAAM;AAAEO;AAAF,UAAWP,CAAjB;;AACA,UAAIO,IAAS,gBAAWC,KAApB,IAA6BD,SAASE,WAAWC,KAArD,EAA4D;AAC1DvB,iBAASa,CAAT;AACF;AAEJ,KARkB,CAAlB;AAUO;AACLG,YADK;AAELC,mBAFK;AAGLF,aAHK;AAILR,kBAJK;AAKLI,kBALK;AAMLC,aANK;AAOLO,eAPK;AAQLtB,UARK;AASLD,QATK;AAUL4B,gBAVK;AAWLC;AAXK;AAaT;;AA/E6B,EAA/B;;;;;sBA9BEC,WAeoB;AAdjB9B,MAAI,SAca;AAbjB,mBAAa+B,eAaI;AAZjB9B,QAAM,WAYW;AAXjB,0BAAoB8B,sBAWH;AAVjBC,WAAKC,cAAE,SAAGhB,CAAH,CAAI,SAAJ,EAUU;AATjBG,UAAM,aASW;AARjBJ,WAAO,cAQU;AAPjBkB,iBAAa,oBAOI;AANjBf,WAAO,cAMU;AALjBR,gBAAY,mBAKK;AAJjBI,gBAAY,mBAIK;AAHjBQ,aAAS;AAGQ,KAHR;qBAEV,MAAQ,CAARY,UAAQ,0BAFE;;AAAA,GAGQ","names":["_sfc_main","defineComponent","name","components","ElPopperTrigger","props","setup","useNamespace","controlled","id","open","onOpen","onClose","onToggle","inject","ref","stopWhenControlledOrDisabled","unref","disabled","toRef","onMouseenter","composeEventHandlers","whenTrigger","trigger","onMouseleave","onClick","e","button","onFocus","onBlur","onContextMenu","preventDefault","onKeydown","code","enter","EVENT_CODE","space","triggerRef","ns","_createBlock","_ctx","class","_normalizeClass","onContextmenu","_renderSlot"],"sources":["../../../../../../packages/components/tooltip/src/trigger.vue"],"sourcesContent":["<template>\n  <el-popper-trigger\n    :id=\"id\"\n    :virtual-ref=\"virtualRef\"\n    :open=\"open\"\n    :virtual-triggering=\"virtualTriggering\"\n    :class=\"ns.e('trigger')\"\n    @blur=\"onBlur\"\n    @click=\"onClick\"\n    @contextmenu=\"onContextMenu\"\n    @focus=\"onFocus\"\n    @mouseenter=\"onMouseenter\"\n    @mouseleave=\"onMouseleave\"\n    @keydown=\"onKeydown\"\n  >\n    <slot />\n  </el-popper-trigger>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, toRef, unref } from 'vue'\nimport { ElPopperTrigger } from '@element-plus/components/popper'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\nimport { useTooltipTriggerProps } from './tooltip'\nimport { whenTrigger } from './utils'\n\nimport type { OnlyChildExpose } from '@element-plus/components/slot'\n\nexport default defineComponent({\n  name: 'ElTooltipTrigger',\n  components: {\n    ElPopperTrigger,\n  },\n  props: useTooltipTriggerProps,\n  setup(props) {\n    const ns = useNamespace('tooltip')\n    const { controlled, id, open, onOpen, onClose, onToggle } = inject(\n      TOOLTIP_INJECTION_KEY,\n      undefined\n    )!\n    const triggerRef = ref<OnlyChildExpose | null>(null)\n\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true\n      }\n    }\n    const trigger = toRef(props, 'trigger')\n    const onMouseenter = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onOpen)\n    )\n    const onMouseleave = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onClose)\n    )\n    const onClick = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'click', (e) => {\n        // distinguish left click\n        if ((e as MouseEvent).button === 0) {\n          onToggle(e)\n        }\n      })\n    )\n\n    const onFocus = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onOpen)\n    )\n\n    const onBlur = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onClose)\n    )\n\n    const onContextMenu = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'contextmenu', (e: Event) => {\n        e.preventDefault()\n        onToggle(e)\n      })\n    )\n\n    const onKeydown = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      (e: KeyboardEvent) => {\n        const { code } = e\n        if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n          onToggle(e)\n        }\n      }\n    )\n\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}