{"ast":null,"code":"let history = [];\n\nfunction Point(x, y, type) {\n  this.x = x;\n  this.y = y;\n  this.type = type; // 左击 1  右击 3\n}\n\nfunction windowToCanvas(e, mycanvas) {\n  // 返回元素的大小以及位置\n  let rect = mycanvas.getBoundingClientRect(); // rect 的宽度会加上 canvas 的 border 会影响精度\n\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width), e.offsetY - rect.top * (mycanvas.height / rect.height), e.which);\n}\n\nfunction showLastHistory(ctx, history) {\n  ctx.putImageData(history[history.length - 1].data, 0, 0);\n}\n\nfunction addHistoy(history, ctx, mycanvas) {\n  console.log(\"存历史\");\n  console.log(history);\n  history.push({\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\n  });\n}\n\nexport default {\n  name: \"Canvas\",\n\n  data() {\n    return {\n      dialogVisible: false,\n      ctx: null,\n      mycanvas: null,\n      textarea: '',\n      tool: '',\n      imgUrl: '',\n      tempPos: [],\n      posArray: [],\n      form: [],\n      Cwidth: window.screen.width * 0.5,\n      Cheight: window.screen.height * 0.75,\n      tools: [{\n        value: \"3\",\n        label: \"直线\"\n      }, {\n        value: \"1\",\n        label: \"矩形\"\n      }, {\n        value: \"2\",\n        label: \"圆形\"\n      }, {\n        value: \"4\",\n        label: \"任意多边形\"\n      }, {\n        value: \"5\",\n        label: \"点\"\n      }]\n    };\n  },\n\n  mounted() {\n    //this.();\n    let str = sessionStorage.getItem(\"img\") || \"{}\";\n    console.log(str);\n    this.form = JSON.parse(str);\n    this.mycanvas = this.$refs.cont;\n    this.ctx = this.mycanvas.getContext('2d');\n    this.mycanvas.width = window.screen.width * 0.5;\n    this.mycanvas.height = window.screen.height * 0.75;\n    console.log(\"mounted\");\n    console.log(this.form);\n    this.drawImg();\n    this.drawer();\n    this.getAngle();\n  },\n\n  methods: {\n    handleEvent(e) {\n      //console.log(e)\n      this.drawer();\n    },\n\n    changeTool() {\n      this.drawer();\n    },\n\n    drawImg() {\n      let img = new Image();\n      img.src = this.form.img;\n      console.log(img.src);\n      console.log(this.form);\n      img.crossOrigin = '';\n\n      img.onload = () => {\n        this.ctx.drawImage(img, this.Cwidth / 4, 0, 400, this.Cheight);\n      };\n    },\n\n    getAngle(x1, y1, x2, y2) {\n      const dot = 110 * 535 + 129 * 76;\n      const det = 110 * 76 - 129 * 535;\n      const angle = Math.atan2(det, dot) / Math.PI * 180;\n      console.log(\"-----------------------\");\n      console.log((angle + 360) % 360);\n      console.log(angle);\n      return (angle + 360) % 360;\n    },\n\n    init(form) {\n      console.log(form);\n      this.textarea = form.result;\n      this.imgUrl = form.img;\n      this.form = form;\n      console.log(this.imgUrl);\n      console.log(this.textarea);\n      console.log(this.form);\n      this.drawImg();\n      this.drawer();\n    },\n\n    // 绘制矩形\n    drawerRect(ctx, left, top, w, h) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(left, top, w, h);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [left, top, w, h]\n      };\n    },\n\n    // 绘制圆\n    drawerCircle(ctx, x, y, r) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.beginPath(); // 开始路径\n\n      ctx.arc(x, y, r, 0, Math.PI * 2, true); // 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\n\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, r]\n      };\n    },\n\n    // 绘制直线\n    drawerLine(ctx, x, y, z, n) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(z, n);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, z, n]\n      };\n    },\n\n    // 绘制点\n    drawerPoint(ctx, x, y) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n      this.posArray.push({\n        data: [x, y]\n      });\n    },\n\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\n    drawer() {\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      let that = this;\n      console.log(this.tool);\n\n      if (this.tool === '1') {\n        //画矩形\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let w = Math.abs(point.x - mousedown.x);\n            let h = Math.abs(point.y - mousedown.y);\n            let left = point.x > mousedown.x ? mousedown.x : point.x;\n            let top = point.y > mousedown.y ? mousedown.y : point.y;\n            let pos = that.drawerRect(ctx, left, top, w, h);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '2') {\n        // 画圆\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let rx = (point.x - mousedown.x) / 2;\n            let ry = (point.y - mousedown.y) / 2;\n            let r = Math.sqrt(rx * rx + ry * ry);\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '3') {\n        //画直线\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n          console.log(\"鼠标点击\");\n          console.log(mousedown);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            let mouseup = windowToCanvas(e, mycanvas);\n            console.log(\"鼠标松开\");\n            console.log(mouseup);\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '4') {//画多边形\n      } else if (this.tool === '5') {\n        //画点\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (event) {\n          let rect = mycanvas.getBoundingClientRect();\n          let CanvasPos = {\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\n          };\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y);\n        };\n      }\n    },\n\n    // 重置\n    resetMap() {\n      // 标注的信息都放在这个数组中\n      this.posArray = [];\n      history = [history[0]];\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height);\n      addHistoy(history, ctx, mycanvas);\n      this.drawImg();\n      this.tool = '';\n    },\n\n    // 取消上一步操作\n    cancel() {\n      if (history.length > 1) {\n        console.log(\"取消上一步\");\n        console.log(history);\n        this.posArray.pop();\n        history.pop();\n        let mycanvas = this.$refs.cont;\n        let ctx = mycanvas.getContext('2d');\n        showLastHistory(ctx, history);\n      } else {\n        this.drawImg();\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["history","Point","x","y","type","windowToCanvas","e","mycanvas","rect","getBoundingClientRect","offsetX","left","width","offsetY","top","height","which","showLastHistory","ctx","putImageData","length","data","addHistoy","console","log","push","getImageData","name","dialogVisible","textarea","tool","imgUrl","tempPos","posArray","form","Cwidth","window","screen","Cheight","tools","value","label","mounted","str","sessionStorage","getItem","JSON","parse","$refs","cont","getContext","drawImg","drawer","getAngle","methods","handleEvent","changeTool","img","Image","src","crossOrigin","onload","drawImage","x1","y1","x2","y2","dot","det","angle","Math","atan2","PI","init","result","drawerRect","w","h","strokeStyle","lineWidth","save","beginPath","stroke","restore","drawerCircle","r","arc","drawerLine","z","n","fillStyle","moveTo","lineTo","drawerPoint","closePath","fill","that","onclick","onmousedown","preventDefault","mousedown","onmousemove","point","abs","pos","onmouseup","rx","ry","sqrt","mouseup","event","CanvasPos","clientX","clientY","resetMap","clearRect","cancel","pop"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-row>\r\n      <el-col :span=\"12\">\r\n        <!--canvas居中：display设置为block-->\r\n        <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n                @click=\"handleEvent\"\r\n        >\r\n        </canvas>\r\n      </el-col>\r\n      <el-col :span=\"2\" style=\"margin-left: 20px\">\r\n        <span>专家意见：</span>\r\n      </el-col>\r\n      <el-col :span=\"9\" style=\"text-align:left\">\r\n        <el-input\r\n            type=\"textarea\"\r\n            :rows=\"30\"\r\n            placeholder=\"请输入内容\"\r\n            v-model=\"this.form.result\">\r\n        </el-input>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div style=\"margin: 10px 0px;display: flex\">\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"cancel\">撤销</el-button>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"resetMap\">清空</el-button>\r\n    <span style=\"margin-left: 5px\">选择绘制图案：</span>\r\n    <el-select v-model=\"tool\" clearable @change=\"changeTool\"\r\n               size=\"small\">\r\n      <el-option\r\n          v-for=\"item in tools\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\">\r\n      </el-option>\r\n    </el-select>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"getAngle\">计算夹角</el-button>\r\n  </div>\r\n\r\n  <div style=\"display: block\">\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  let rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width),\r\n      e.offsetY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  console.log(\"存历史\")\r\n  console.log(history)\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      dialogVisible:false,\r\n      ctx:null,\r\n      mycanvas:null,\r\n      textarea:'',\r\n      tool:'',\r\n      imgUrl:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n      form:[],\r\n      Cwidth:(window.screen.width)*0.5,\r\n      Cheight:(window.screen.height)*0.75,\r\n      tools:[\r\n        {value:\"3\", label:\"直线\"},\r\n        {value:\"1\", label:\"矩形\"},\r\n        {value:\"2\", label:\"圆形\"},\r\n        {value:\"4\", label:\"任意多边形\"},\r\n        {value:\"5\", label:\"点\"},\r\n      ],\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.();\r\n    let str = sessionStorage.getItem(\"img\") || \"{}\"\r\n    console.log(str)\r\n    this.form = JSON.parse(str)\r\n\r\n    this.mycanvas = this.$refs.cont\r\n    this.ctx = this.mycanvas.getContext('2d');\r\n    this.mycanvas.width = (window.screen.width)*0.5\r\n    this.mycanvas.height = (window.screen.height)*0.75\r\n    console.log(\"mounted\")\r\n    console.log(this.form)\r\n    this.drawImg()\r\n    this.drawer();\r\n    this.getAngle();\r\n\r\n  },\r\n\r\n  methods:{\r\n\r\n    handleEvent(e){\r\n      //console.log(e)\r\n      this.drawer();\r\n    },\r\n    changeTool(){\r\n      this.drawer();\r\n    },\r\n\r\n    drawImg(){\r\n      let img = new Image();\r\n      img.src = this.form.img;\r\n      console.log(img.src)\r\n      console.log(this.form)\r\n      img.crossOrigin = '';\r\n      img.onload = () => {\r\n        this.ctx.drawImage(img, this.Cwidth/4, 0, 400, this.Cheight);\r\n      }\r\n    },\r\n\r\n    getAngle(x1,y1,x2,y2){\r\n      const dot = 110 * 535 + 129 * 76\r\n      const det = 110 * 76 - 129 * 535\r\n      const angle = Math.atan2(det, dot) / Math.PI * 180\r\n      console.log(\"-----------------------\")\r\n      console.log((angle + 360) % 360)\r\n      console.log(angle)\r\n      return (angle + 360) % 360\r\n    },\r\n\r\n    init(form){\r\n      console.log(form)\r\n      this.textarea = form.result\r\n      this.imgUrl = form.img\r\n      this.form = form\r\n      console.log(this.imgUrl)\r\n      console.log(this.textarea)\r\n      console.log(this.form)\r\n\r\n      this.drawImg()\r\n      this.drawer();\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      let that = this\r\n      console.log(this.tool)\r\n      if (this.tool === '1') {\r\n        //画矩形\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '2') {\r\n        // 画圆\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '3') {\r\n        //画直线\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          console.log(\"鼠标点击\")\r\n          console.log(mousedown)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            let mouseup = windowToCanvas(e, mycanvas)\r\n            console.log(\"鼠标松开\")\r\n            console.log(mouseup)\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '4') {\r\n        //画多边形\r\n\r\n      } else if (this.tool === '5') {\r\n        //画点\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let rect = mycanvas.getBoundingClientRect()\r\n          let CanvasPos = {\r\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\r\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\r\n          }\r\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y)\r\n        }\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n      this.drawImg();\r\n      this.tool = '';\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        console.log(\"取消上一步\")\r\n        console.log(history)\r\n        this.posArray.pop()\r\n        history.pop()\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }else{\r\n        this.drawImg();\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}