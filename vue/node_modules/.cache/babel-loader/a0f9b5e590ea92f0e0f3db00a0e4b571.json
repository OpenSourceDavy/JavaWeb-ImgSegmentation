{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, vShow as _vShow, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, toDisplayString as _toDisplayString } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"span\", null, \"专家意见：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\"返回\");\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\"提交\");\n\nconst _hoisted_4 = {\n  style: {\n    \"margin\": \"10px 0px\",\n    \"display\": \"flex\"\n  }\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createTextVNode(\"撤销\");\n\nconst _hoisted_6 = /*#__PURE__*/_createTextVNode(\"重置\");\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"5px\"\n  }\n}, \"选择绘制图案：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_8 = /*#__PURE__*/_createTextVNode(\"画多边形\");\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"10px\",\n    \"text-align\": \"right\"\n  }\n}, \"请输入三个Cobb角判断脊椎侧凸类型：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"10px\",\n    \"text-align\": \"right\"\n  }\n}, \"上胸弯：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"10px\",\n    \"text-align\": \"right\"\n  }\n}, \"主胸弯：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"10px\",\n    \"text-align\": \"right\"\n  }\n}, \"腰胸弯/腰弯：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_13 = /*#__PURE__*/_createTextVNode(\"判断\");\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"10px\"\n  }\n}, \"是否填充所画区域：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_15 = {\n  style: {\n    \"margin-left\": \"10px\"\n  }\n};\n\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"10px\",\n    \"text-align\": \"right\"\n  }\n}, \"请顺序打点描出脊椎图案\", -1\n/* HOISTED */\n);\n\nconst _hoisted_17 = /*#__PURE__*/_createTextVNode(\"描出脊椎\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_col = _resolveComponent(\"el-col\");\n\n  const _component_el_input = _resolveComponent(\"el-input\");\n\n  const _component_el_button = _resolveComponent(\"el-button\");\n\n  const _component_el_row = _resolveComponent(\"el-row\");\n\n  const _component_el_option = _resolveComponent(\"el-option\");\n\n  const _component_el_select = _resolveComponent(\"el-select\");\n\n  const _component_el_color_picker = _resolveComponent(\"el-color-picker\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createVNode(_component_el_row, null, {\n    default: _withCtx(() => [_createVNode(_component_el_col, {\n      span: 12\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\"canvas居中：display设置为block\"), _createElementVNode(\"canvas\", {\n        ref: \"cont\",\n        style: {\n          \"border\": \"2px solid #aaaaaa\",\n          \"display\": \"block\"\n        },\n        onClick: _cache[0] || (_cache[0] = (...args) => $options.handleEvent && $options.handleEvent(...args))\n      }, null, 512\n      /* NEED_PATCH */\n      )]),\n      _: 1\n      /* STABLE */\n\n    }), _createVNode(_component_el_col, {\n      span: 2,\n      style: {\n        \"margin-left\": \"20px\"\n      }\n    }, {\n      default: _withCtx(() => [_hoisted_1]),\n      _: 1\n      /* STABLE */\n\n    }), _createVNode(_component_el_col, {\n      span: 9,\n      style: {\n        \"text-align\": \"left\"\n      }\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        type: \"textarea\",\n        rows: 27,\n        placeholder: \"请输入内容\",\n        modelValue: this.form.result,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => this.form.result = $event)\n      }, null, 8\n      /* PROPS */\n      , [\"modelValue\"]), _createVNode(_component_el_button, {\n        type: \"primary\",\n        style: {\n          \"margin-left\": \"430px\",\n          \"text-align\": \"right\"\n        },\n        onClick: _cache[2] || (_cache[2] = $event => _ctx.$router.push('/Img'))\n      }, {\n        default: _withCtx(() => [_hoisted_2]),\n        _: 1\n        /* STABLE */\n\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        style: {\n          \"margin-left\": \"20px\",\n          \"text-align\": \"right\"\n        },\n        onClick: $options.submit\n      }, {\n        default: _withCtx(() => [_hoisted_3]),\n        _: 1\n        /* STABLE */\n\n      }, 8\n      /* PROPS */\n      , [\"onClick\"])]),\n      _: 1\n      /* STABLE */\n\n    })]),\n    _: 1\n    /* STABLE */\n\n  })]), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createVNode(_component_el_button, {\n    type: \"primary\",\n    style: {\n      \"margin-left\": \"5px\",\n      \"text-align\": \"right\"\n    },\n    onClick: $options.cancel\n  }, {\n    default: _withCtx(() => [_hoisted_5]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), [[_vShow, !$data.isPolygon]]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    style: {\n      \"margin-left\": \"5px\",\n      \"text-align\": \"right\"\n    },\n    onClick: $options.resetMap\n  }, {\n    default: _withCtx(() => [_hoisted_6]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), _hoisted_7, _createVNode(_component_el_select, {\n    modelValue: $data.tool,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.tool = $event),\n    clearable: \"\",\n    onChange: $options.changeTool,\n    size: \"small\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.tools, item => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: item.value,\n        label: item.label,\n        value: item.value\n      }, null, 8\n      /* PROPS */\n      , [\"label\", \"value\"]);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"modelValue\", \"onChange\"]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"span\", {\n    style: {\n      \"margin-left\": \"5px\",\n      \"text-align\": \"right\"\n    }\n  }, \"最新两条直线的夹角为：\" + _toDisplayString($data.angle), 513\n  /* TEXT, NEED_PATCH */\n  ), [[_vShow, $data.isLine]]), _withDirectives(_createVNode(_component_el_button, {\n    type: \"primary\",\n    style: {\n      \"margin-left\": \"5px\",\n      \"text-align\": \"right\"\n    },\n    onClick: $options.drawPolygon\n  }, {\n    default: _withCtx(() => [_hoisted_8]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), [[_vShow, $data.isPolygon]]), _withDirectives(_createElementVNode(\"span\", {\n    style: {\n      \"margin-left\": \"5px\",\n      \"text-align\": \"right\"\n    }\n  }, \"最新图形的面积为：\" + _toDisplayString($data.area), 513\n  /* TEXT, NEED_PATCH */\n  ), [[_vShow, $data.isArea]])])]), _withDirectives(_createElementVNode(\"div\", null, [_hoisted_9, _hoisted_10, _createVNode(_component_el_input, {\n    modelValue: $data.PT,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.PT = $event),\n    style: {\n      \"width\": \"80px\"\n    }\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\"]), _hoisted_11, _createVNode(_component_el_input, {\n    modelValue: $data.MT,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.MT = $event),\n    style: {\n      \"width\": \"80px\"\n    }\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\"]), _hoisted_12, _createVNode(_component_el_input, {\n    modelValue: $data.TL,\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.TL = $event),\n    style: {\n      \"width\": \"80px\"\n    }\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    style: {\n      \"margin-left\": \"10px\",\n      \"text-align\": \"right\"\n    },\n    onClick: $options.judge\n  }, {\n    default: _withCtx(() => [_hoisted_13]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"])], 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.isLine]]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"div\", null, [_hoisted_14, _createVNode(_component_el_select, {\n    modelValue: $data.fill,\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.fill = $event),\n    clearable: \"\",\n    onChange: $options.changeFill,\n    size: \"small\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.fills, item => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: item.value,\n        label: item.label,\n        value: item.value\n      }, null, 8\n      /* PROPS */\n      , [\"label\", \"value\"]);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"modelValue\", \"onChange\"]), _withDirectives(_createElementVNode(\"span\", _hoisted_15, \"请选择填充颜色：\", 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.isColor]]), _withDirectives(_createVNode(_component_el_color_picker, {\n    modelValue: $data.color,\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.color = $event)\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\"]), [[_vShow, $data.isColor]])], 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.isArea]])]), _withDirectives(_createElementVNode(\"div\", null, [_hoisted_16, _createVNode(_component_el_button, {\n    type: \"primary\",\n    style: {\n      \"margin-left\": \"10px\",\n      \"text-align\": \"right\"\n    },\n    onClick: $options.outline\n  }, {\n    default: _withCtx(() => [_hoisted_17]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"])], 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.isPoint]])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","style","_createVNode","_component_el_row","_component_el_col","span","_createCommentVNode","ref","onClick","$options","_hoisted_1","_component_el_input","type","rows","placeholder","form","result","$event","_component_el_button","_ctx","push","$data","_hoisted_7","_component_el_select","clearable","onChange","size","_createElementBlock","_Fragment","_renderList","item","_createBlock","_component_el_option","key","value","label","_toDisplayString","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_14","_component_el_color_picker","_hoisted_16"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-row>\r\n      <el-col :span=\"12\">\r\n        <!--canvas居中：display设置为block-->\r\n        <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n                @click=\"handleEvent\"\r\n        >\r\n        </canvas>\r\n      </el-col>\r\n      <el-col :span=\"2\" style=\"margin-left: 20px\">\r\n        <span>专家意见：</span>\r\n      </el-col>\r\n      <el-col :span=\"9\" style=\"text-align:left\">\r\n        <el-input\r\n            type=\"textarea\"\r\n            :rows=\"27\"\r\n            placeholder=\"请输入内容\"\r\n            v-model=\"this.form.result\">\r\n        </el-input>\r\n        <el-button type=\"primary\" style=\"margin-left: 430px;text-align:right;\" @click=\"$router.push('/Img')\">返回</el-button>\r\n        <el-button type=\"primary\" style=\"margin-left: 20px;text-align:right;\" @click=\"submit\">提交</el-button>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div style=\"margin: 10px 0px;display: flex\">\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"cancel\" v-show=\"!isPolygon\">撤销</el-button>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"resetMap\">重置</el-button>\r\n    <span style=\"margin-left: 5px\">选择绘制图案：</span>\r\n    <el-select v-model=\"tool\" clearable @change=\"changeTool\"\r\n               size=\"small\">\r\n      <el-option\r\n          v-for=\"item in tools\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\">\r\n      </el-option>\r\n    </el-select>\r\n    <div>\r\n      <span style=\"margin-left: 5px;text-align:right;\" v-show=\"isLine\">最新两条直线的夹角为：{{angle}}</span>\r\n      <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"drawPolygon\"\r\n                 v-show=\"isPolygon\"\r\n      >画多边形</el-button>\r\n      <span style=\"margin-left: 5px;text-align:right;\" v-show=\"isArea\">最新图形的面积为：{{area}}</span>\r\n    </div>\r\n\r\n  </div>\r\n  <div v-show=\"isLine\">\r\n    <span style=\"margin-left: 10px;text-align:right;\">请输入三个Cobb角判断脊椎侧凸类型：</span>\r\n    <span style=\"margin-left: 10px;text-align:right;\">上胸弯：</span>\r\n    <el-input v-model=\"PT\" style=\"width: 80px;\"></el-input>\r\n    <span style=\"margin-left: 10px;text-align:right;\">主胸弯：</span>\r\n    <el-input v-model=\"MT\" style=\"width: 80px;\"></el-input>\r\n    <span style=\"margin-left: 10px;text-align:right;\">腰胸弯/腰弯：</span>\r\n    <el-input v-model=\"TL\" style=\"width: 80px;\"></el-input>\r\n    <el-button type=\"primary\" style=\"margin-left: 10px;text-align:right;\" @click=\"judge\">判断</el-button>\r\n  </div>\r\n\r\n  <div>\r\n    <div v-show=\"isArea\">\r\n      <span style=\"margin-left: 10px\">是否填充所画区域：</span>\r\n      <el-select v-model=\"fill\" clearable @change=\"changeFill\"\r\n                 size=\"small\">\r\n        <el-option\r\n            v-for=\"item in fills\"\r\n            :key=\"item.value\"\r\n            :label=\"item.label\"\r\n            :value=\"item.value\">\r\n        </el-option>\r\n      </el-select>\r\n      <span style=\"margin-left: 10px\" v-show=\"isColor\">请选择填充颜色：</span>\r\n      <el-color-picker v-model=\"color\" v-show=\"isColor\"></el-color-picker>\r\n    </div>\r\n  </div>\r\n\r\n  <div v-show=\"isPoint\">\r\n    <span style=\"margin-left: 10px;text-align:right;\">请顺序打点描出脊椎图案</span>\r\n    <el-button type=\"primary\" style=\"margin-left: 10px;text-align:right;\" @click=\"outline\">描出脊椎</el-button>\r\n  </div>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  let rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width),\r\n      e.offsetY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      ctx:null,\r\n      mycanvas:null,\r\n      textarea:'',\r\n      tool:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n      form: {},\r\n      Cwidth:(window.screen.width)*0.5,\r\n      Cheight:(window.screen.height)*0.7,\r\n      tools:[\r\n        {value:\"3\", label:\"直线\"},\r\n        {value:\"1\", label:\"矩形\"},\r\n        {value:\"2\", label:\"圆形\"},\r\n        {value:\"4\", label:\"任意多边形\"},\r\n        {value:\"5\", label:\"点\"},\r\n      ],\r\n      point:[],\r\n      angle:'',\r\n      area:'',\r\n      isPolygon:false,\r\n      isLine:false,\r\n      isArea:false,\r\n      isPoint:false,\r\n      fill:'',\r\n      fills:[\r\n        {value:\"0\", label:\"不填充\"},\r\n        {value:\"1\", label:\"填充\"},\r\n      ],\r\n      color:'',\r\n      isColor:false,\r\n      PT:'',\r\n      MT:'',\r\n      TL:'',\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.();\r\n    let str = sessionStorage.getItem(\"img\") || \"{}\"\r\n    this.form = JSON.parse(str)\r\n\r\n    this.mycanvas = this.$refs.cont\r\n    this.ctx = this.mycanvas.getContext('2d');\r\n    this.mycanvas.width = (window.screen.width)*0.5\r\n    this.mycanvas.height = (window.screen.height)*0.7\r\n    this.drawImg()\r\n    this.drawer();\r\n\r\n  },\r\n\r\n  methods:{\r\n\r\n    submit(){\r\n      this.form.state = \"已评阅\"\r\n      request.put(\"/img\",this.form).then(res => {\r\n        if(res.code === '0'){\r\n          this.$message({\r\n            type:\"success\",\r\n            message:\"提交成功\"\r\n          })\r\n        }else{\r\n          this.$message({\r\n            type:\"error\",\r\n            message:res.message\r\n          })\r\n        }\r\n        sessionStorage.removeItem(\"img\")\r\n        this.$router.push(\"/img\")\r\n      })\r\n    },\r\n\r\n    judge(){\r\n      if(this.PT == \"\" || this.MT == \"\" || this.TL == \"\"){\r\n        this.$alert('请输入三个Cobb角后再点击按钮', '提示', {\r\n          confirmButtonText: '确定',\r\n          type:\"warning\"\r\n        });\r\n        return false\r\n      }else{\r\n        if(this.PT < 25 && this.MT >=25 && this.TL <25){\r\n          this.$alert('脊椎侧凸类型：主胸弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT >= 25 && this.MT >= 25 && this.TL < 25 && this.MT > this.PT){\r\n          this.$alert('脊椎侧凸类型：双胸弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT < 25 && this.MT >= 25 && this.TL >= 25 && this.MT > this.TL){\r\n          this.$alert('脊椎侧凸类型：双主弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT >= 25 && this.MT >= 25 && this.TL >= 25 && this.MT > this.PT && this.TL > this.PT){\r\n          this.$alert('脊椎侧凸类型：三主弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT < 25 && this.MT < 25 && this.TL >= 25){\r\n          this.$alert('脊椎侧凸类型：胸腰弯/腰弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT < 25 && this.MT >= 25 && this.TL >= 25 && this.TL > this.MT){\r\n          this.$alert('脊椎侧凸类型：胸腰弯/腰弯-主胸弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else{\r\n          this.$alert('没有该类型的侧凸', '提示', {\r\n            confirmButtonText: '确定',\r\n            type:\"warning\"\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n    handleEvent(e){\r\n      this.drawer();\r\n    },\r\n\r\n    changeFill(){\r\n      if(this.fill == 0){\r\n        this.isColor = false\r\n      }else{\r\n        this.isColor = true\r\n      }\r\n    },\r\n\r\n    changeTool(t){\r\n      this.point = [];\r\n      this.angle = '';\r\n      this.drawer();\r\n      if(t == '1'){\r\n        //画矩形\r\n        this.isArea = true\r\n        this.isLine = false\r\n        this.isPolygon = false\r\n        this.fill = ''\r\n        this.isColor =false\r\n        this.isPoint = false\r\n      }else if(t == '2'){\r\n        //画圆\r\n        this.isArea = true\r\n        this.isPolygon = false\r\n        this.isLine = false\r\n        this.fill = ''\r\n        this.isColor =false\r\n        this.isPoint = false\r\n      }else if(t == '3'){\r\n        //画直线\r\n        this.isArea = false\r\n        this.isPolygon = false\r\n        this.isLine = true\r\n        this.isColor = false\r\n        this.isPoint = false\r\n      }else if(t == '4'){\r\n        //画多边形\r\n        this.isArea = true\r\n        this.isPolygon = true\r\n        this.isLine = false\r\n        this.fill = ''\r\n        this.isColor =false\r\n        this.isPoint = false\r\n      }else if(t == '5'){\r\n        //画点\r\n        this.isArea = false\r\n        this.isPolygon = false\r\n        this.isLine = false\r\n        this.isColor = false\r\n        this.isPoint = true\r\n      }\r\n    },\r\n\r\n    drawImg(){\r\n      let img = new Image();\r\n      img.src = this.form.img;\r\n      img.crossOrigin = '';\r\n      img.onload = () => {\r\n        this.ctx.drawImage(img, this.Cwidth/3, 0, 300, this.Cheight);\r\n      }\r\n    },\r\n\r\n    getTan(p1,p2,p3,p4){\r\n      let k1 = (p2.y - p1.y) / (p2.x - p1.x)\r\n      let k2 = (p4.y - p3.y) / (p4.x - p3.x)\r\n\r\n      let tan = (k1-k2) / (1+k1*k2)\r\n      return Math.abs(tan);\r\n    },\r\n\r\n    myAngle(tan){\r\n      //Math.atan,传入tan值，计算弧度，角度等于弧度乘以180/π\r\n      let result = Math.atan(tan) * 180 / Math.PI;\r\n      return result;\r\n    },\r\n\r\n    getPolygonArea(){\r\n      let area = 0\r\n      //多边形面积公式 s = (x1y2-x2y1)/2 + (x2y3-x3y2)/2 +......+ (xny1-x1yn)/2\r\n      //(a[i]*b[(i+1)%n]-a[(i+1)%n]*b[i])\r\n      let l = this.point.length\r\n      for(let i = 0; i < l; i++){\r\n        area += this.point[i].x * this.point[(i+1)%l].y - this.point[(i+1)%l].x * this.point[i].y\r\n      }\r\n      this.area = Math.abs(area)/2\r\n      this.area = this.area/100 //数值太大，统一缩小100倍\r\n    },\r\n\r\n    //  绘制脊椎轮廓\r\n    outline(){\r\n      let myPoints = this.point\r\n      let length = myPoints.length\r\n      this.ctx.fillStyle = 'rgba(0,0,0,1)'\r\n      this.ctx.save()\r\n      this.ctx.beginPath()\r\n      this.ctx.lineWidth = '2' // 画笔粗细\r\n      this.ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      this.ctx.moveTo(myPoints[0].x,myPoints[0].y)\r\n      for(let i = 0; i<length  ; i++){\r\n        this.ctx.lineTo(myPoints[i].x,myPoints[i].y)\r\n      }\r\n      this.ctx.lineTo(myPoints[0].x,myPoints[0].y)\r\n      this.ctx.stroke()\r\n      //this.ctx.fillStyle= 'black';//设置填充颜色\r\n      //this.ctx.fill();//开始填充\r\n      this.ctx.closePath()\r\n      console.log(this.ctx)\r\n      this.ctx.restore()\r\n\r\n      // this.mycanvas\r\n\r\n      //画完清空\r\n      this.point = []\r\n      myPoints = []\r\n    },\r\n\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      if(this.fill == 1){\r\n        //是否填充图形区域\r\n        ctx.fillStyle=this.color;//设置填充颜色\r\n        ctx.fill();//开始填充\r\n      }\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      if(this.fill == 1){\r\n        //是否填充图形区域\r\n        ctx.fillStyle=this.color;//设置填充颜色\r\n        ctx.fill();//开始填充\r\n      }\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    //  多边形个顶点连线，画多边形\r\n    drawPolygon(){\r\n      //排序，决定个点之间的连线顺序，尽量避免各边相交\r\n      let ps = this.sortPoints(this.point);\r\n    },\r\n\r\n    //对多边形各个顶点排序\r\n    sortPoints(points){\r\n      if(points == \"\"){\r\n        return false\r\n      }\r\n\r\n      //让点按x轴升序排序\r\n      let tempPoints = points.sort((p1,p2) =>{\r\n        return  p1.x-p2.x\r\n      })\r\n\r\n      //找到x轴的左右极点\r\n      let firstP = tempPoints[0]  //x轴最左端\r\n      let lastP = tempPoints[tempPoints.length-1]  //x轴最右端\r\n\r\n      //如果多个x轴的左右极点，则按y轴排出左右极点\r\n      let smallXP = tempPoints.filter(ball => ball.x === firstP.x)\r\n      let bigXP = tempPoints.filter(ball => ball.x === lastP.x)\r\n      // 处理左右极点有多个的情况,y轴降序\r\n      if (smallXP.length > 1) {\r\n        smallXP.sort((ballA, ballB) => {\r\n          return ballB.y - ballA.y\r\n        })\r\n      }\r\n      if (bigXP.length > 1) {\r\n        bigXP.sort((ballA, ballB) => {\r\n          return ballB.y - ballA.y\r\n        })\r\n      }\r\n      firstP = smallXP[0]\r\n      lastP = bigXP[0]\r\n\r\n      // 获得两个极点连线的角度\r\n      let splitLineAngle = Math.atan2(lastP.y - firstP.y, lastP.x - firstP.x);\r\n      let upperP = []   //上点  小于splitLineAngle的都是上点  X轴降序连接\r\n      let lowerP = []   //下点  大于splitLineAngle的都是下点  X轴升序连接\r\n      //计算弧度  分为上下点数组\r\n      tempPoints.forEach(p => {\r\n        if (p === firstP || p === lastP) {\r\n          return false\r\n        }\r\n        let angle = Math.atan2(p.y - firstP.y, p.x - firstP.x);\r\n        if (angle > splitLineAngle) {\r\n          lowerP.push(p)\r\n        } else {\r\n          upperP.push(p)\r\n        }\r\n      })\r\n\r\n      //升序\r\n      lowerP = lowerP.sort((p1, p2) => {\r\n        if (p1.x !== p2.x) {  // 处理X轴相同情况的排序\r\n          return p1.x - p2.x\r\n        }\r\n        return p2.y - p1.y\r\n      })\r\n      //降序\r\n      upperP = upperP.sort((p1, p2) => {\r\n        if (p1.x !== p2.x) {  // 处理X轴相同情况的排序\r\n          return p2.x - p1.x\r\n        }\r\n        return p2.y - p1.x\r\n      })\r\n\r\n      // 逆时针连接所有的点\r\n      let myPoints = [firstP].concat(lowerP, [lastP], upperP)\r\n      //调用画直线的方法，进行连线\r\n      let length = myPoints.length\r\n      this.ctx.save()\r\n      this.ctx.beginPath()\r\n      this.ctx.lineWidth = '2' // 画笔粗细\r\n      this.ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      this.ctx.moveTo(myPoints[0].x,myPoints[0].y)\r\n      for(let i = 0; i<length  ; i++){\r\n        this.ctx.lineTo(myPoints[i].x,myPoints[i].y)\r\n      }\r\n      this.ctx.lineTo(myPoints[0].x,myPoints[0].y)\r\n      this.ctx.stroke()\r\n      if(this.fill == 1){\r\n        //是否填充图形区域\r\n        this.ctx.fillStyle=this.color;//设置填充颜色\r\n        this.ctx.fill();//开始填充\r\n      }\r\n      this.ctx.restore()\r\n\r\n\r\n      this.getPolygonArea() //计算多边形体积\r\n\r\n      //画完清空\r\n      this.point = []\r\n      myPoints = []\r\n    },\r\n\r\n\r\n\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      let that = this\r\n      if (that.tool === '1') {\r\n        //画矩形\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            that.area = (w*h)/100 //计算矩形面积 数值太大，统一缩小100倍\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '2') {\r\n        // 画圆\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            //圆上两点，其连线过圆心，长度是直径\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)  //a平方 + b平方 = c平方\r\n            //求圆面积\r\n            that.area = (Math.PI * r * r) /100  //数值太大，统一缩小100倍\r\n            that.area = Math.round(that.area * 1000) / 1000 //取小数点后三位\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '3') {\r\n        //画直线\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            let mouseup = windowToCanvas(e, mycanvas)\r\n            //存直线的起始点和终点，有四个点则确定有两条直线，再求其的夹角\r\n            that.point.push(mouseup)\r\n            that.point.push(mousedown)\r\n            this.point = that.point\r\n            let l = that.point.length\r\n            if(l >= 4){\r\n              //计算tan的值\r\n              let tan = that.getTan(that.point[l-4],that.point[l-3],that.point[l-2],that.point[l-1])\r\n              //根据tan值求角度\r\n              let angle = that.myAngle(tan)\r\n              that.angle = Math.round(angle*1000)/1000  //取小数点后三位\r\n              that.angle = that.angle+\"°\" //加上角度\r\n              //that.point = []\r\n            }\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '4') {\r\n        //画多边形\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (e) {\r\n          let point = windowToCanvas(e, mycanvas)\r\n          that.point.push(point)\r\n          that.drawerPoint(ctx, point.x, point.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '5') {\r\n        //画点\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let point = windowToCanvas(event, mycanvas)\r\n          that.point.push(point)\r\n          that.drawerPoint(ctx, point.x, point.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n      this.drawImg();\r\n      this.tool = '';\r\n      this.point = []\r\n      this.isPolygon = false\r\n      this.isLine = false\r\n      this.isArea = false\r\n      this.isColor = false\r\n      this.isPoint = false\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        this.posArray.pop()\r\n        history.pop()\r\n        if(this.tool == 3){\r\n          this.point.pop()\r\n          this.point.pop()\r\n        }\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }else{\r\n        this.drawImg();\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}