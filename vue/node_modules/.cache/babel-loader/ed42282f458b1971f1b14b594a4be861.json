{"ast":null,"code":"const obtainAllFocusableElements = element => {\n  const nodes = [];\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: node => {\n      const isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n\n  while (walker.nextNode()) nodes.push(walker.currentNode);\n\n  return nodes;\n};\n\nconst getVisibleElement = (elements, container) => {\n  for (const element of elements) {\n    if (!isHidden(element, container)) return element;\n  }\n};\n\nconst isHidden = (element, container) => {\n  if (process.env.NODE_ENV === \"test\") return false;\n  if (getComputedStyle(element).visibility === \"hidden\") return true;\n\n  while (element) {\n    if (container && element === container) return false;\n    if (getComputedStyle(element).display === \"none\") return true;\n    element = element.parentElement;\n  }\n\n  return false;\n};\n\nconst getEdges = container => {\n  const focusable = obtainAllFocusableElements(container);\n  const first = getVisibleElement(focusable, container);\n  const last = getVisibleElement(focusable.reverse(), container);\n  return [first, last];\n};\n\nconst isSelectable = element => {\n  return element instanceof HTMLInputElement && \"select\" in element;\n};\n\nconst tryFocus = (element, shouldSelect) => {\n  if (element && element.focus) {\n    const prevFocusedElement = document.activeElement;\n    element.focus({\n      preventScroll: true\n    });\n\n    if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {\n      element.select();\n    }\n  }\n};\n\nfunction removeFromStack(list, item) {\n  const copy = [...list];\n  const idx = list.indexOf(item);\n\n  if (idx !== -1) {\n    copy.splice(idx, 1);\n  }\n\n  return copy;\n}\n\nconst createFocusableStack = () => {\n  let stack = [];\n\n  const push = layer => {\n    const currentLayer = stack[0];\n\n    if (currentLayer && layer !== currentLayer) {\n      currentLayer.pause();\n    }\n\n    stack = removeFromStack(stack, layer);\n    stack.unshift(layer);\n  };\n\n  const remove = layer => {\n    var _a, _b;\n\n    stack = removeFromStack(stack, layer);\n    (_b = (_a = stack[0]) == null ? void 0 : _a.resume) == null ? void 0 : _b.call(_a);\n  };\n\n  return {\n    push,\n    remove\n  };\n};\n\nconst focusFirstDescendant = (elements, shouldSelect = false) => {\n  const prevFocusedElement = document.activeElement;\n\n  for (const element of elements) {\n    tryFocus(element, shouldSelect);\n    if (document.activeElement !== prevFocusedElement) return;\n  }\n};\n\nconst focusableStack = createFocusableStack();\nexport { focusFirstDescendant, focusableStack, getEdges, getVisibleElement, isHidden, obtainAllFocusableElements, tryFocus };","map":{"version":3,"mappings":"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","names":["obtainAllFocusableElements","element","nodes","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","node","isHiddenInput","tagName","type","disabled","hidden","FILTER_SKIP","tabIndex","FILTER_ACCEPT","nextNode","push","currentNode","getVisibleElement","elements","container","isHidden","process","env","NODE_ENV","getComputedStyle","visibility","display","parentElement","getEdges","focusable","first","last","reverse","isSelectable","HTMLInputElement","tryFocus","shouldSelect","focus","prevFocusedElement","activeElement","preventScroll","select","removeFromStack","list","item","copy","idx","indexOf","splice","createFocusableStack","stack","layer","currentLayer","pause","unshift","remove","_a","_b","resume","call","focusFirstDescendant","focusableStack"],"sources":["../../../../../../packages/components/focus-trap/src/utils.ts"],"sourcesContent":["export type FocusLayer = {\n  paused: boolean\n  pause: () => void\n  resume: () => void\n}\n\nexport type FocusStack = FocusLayer[]\n\nexport const obtainAllFocusableElements = (\n  element: HTMLElement\n): HTMLElement[] => {\n  const nodes: HTMLElement[] = []\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (\n      node: Element & {\n        disabled: boolean\n        hidden: boolean\n        type: string\n        tabIndex: number\n      }\n    ) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden'\n      if (node.disabled || node.hidden || isHiddenInput)\n        return NodeFilter.FILTER_SKIP\n      return node.tabIndex >= 0\n        ? NodeFilter.FILTER_ACCEPT\n        : NodeFilter.FILTER_SKIP\n    },\n  })\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement)\n\n  return nodes\n}\n\nexport const getVisibleElement = (\n  elements: HTMLElement[],\n  container: HTMLElement\n) => {\n  for (const element of elements) {\n    if (!isHidden(element, container)) return element\n  }\n}\n\nexport const isHidden = (element: HTMLElement, container: HTMLElement) => {\n  if (process.env.NODE_ENV === 'test') return false\n  if (getComputedStyle(element).visibility === 'hidden') return true\n\n  while (element) {\n    if (container && element === container) return false\n    if (getComputedStyle(element).display === 'none') return true\n    element = element.parentElement as HTMLElement\n  }\n\n  return false\n}\n\nexport const getEdges = (container: HTMLElement) => {\n  const focusable = obtainAllFocusableElements(container)\n  const first = getVisibleElement(focusable, container)\n  const last = getVisibleElement(focusable.reverse(), container)\n  return [first, last]\n}\n\nconst isSelectable = (\n  element: any\n): element is HTMLInputElement & { select: () => void } => {\n  return element instanceof HTMLInputElement && 'select' in element\n}\n\nexport const tryFocus = (\n  element?: HTMLElement | { focus: () => void } | null,\n  shouldSelect?: boolean\n) => {\n  if (element && element.focus) {\n    const prevFocusedElement = document.activeElement\n    element.focus({ preventScroll: true })\n    if (\n      element !== prevFocusedElement &&\n      isSelectable(element) &&\n      shouldSelect\n    ) {\n      element.select()\n    }\n  }\n}\n\nfunction removeFromStack<T>(list: T[], item: T) {\n  const copy = [...list]\n\n  const idx = list.indexOf(item)\n\n  if (idx !== -1) {\n    copy.splice(idx, 1)\n  }\n  return copy\n}\n\nconst createFocusableStack = () => {\n  let stack = [] as FocusStack\n\n  const push = (layer: FocusLayer) => {\n    const currentLayer = stack[0]\n\n    if (currentLayer && layer !== currentLayer) {\n      currentLayer.pause()\n    }\n\n    stack = removeFromStack(stack, layer)\n    stack.unshift(layer)\n  }\n\n  const remove = (layer: FocusLayer) => {\n    stack = removeFromStack(stack, layer)\n    stack[0]?.resume?.()\n  }\n\n  return {\n    push,\n    remove,\n  }\n}\n\nexport const focusFirstDescendant = (\n  elements: HTMLElement[],\n  shouldSelect = false\n) => {\n  const prevFocusedElement = document.activeElement\n  for (const element of elements) {\n    tryFocus(element, shouldSelect)\n    if (document.activeElement !== prevFocusedElement) return\n  }\n}\n\nexport const focusableStack = createFocusableStack()\n"]},"metadata":{},"sourceType":"module"}