{"ast":null,"code":"import { defineComponent, ref, inject, computed, onBeforeUnmount, unref, watch, resolveComponent, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, withDirectives, mergeProps, createCommentVNode, createElementBlock, Fragment, renderSlot, createTextVNode, toDisplayString, vShow } from 'vue';\nimport { onClickOutside } from '@vueuse/core';\nimport '../../popper/index.mjs';\nimport '../../visual-hidden/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useTooltipContentProps } from './tooltip.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperContent from '../../popper/src/content2.mjs';\nimport ElVisuallyHidden from '../../visual-hidden/src/visual-hidden.mjs';\nimport { useEscapeKeydown } from '../../../hooks/use-escape-keydown/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTooltipContent\",\n  components: {\n    ElPopperContent,\n    ElVisuallyHidden\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n\n  setup(props) {\n    const contentRef = ref(null);\n    const intermediateOpen = ref(false);\n    const entering = ref(false);\n    const leaving = ref(false);\n    const destroyed = ref(false);\n    const {\n      controlled,\n      id,\n      open,\n      trigger,\n      onClose,\n      onOpen,\n      onShow,\n      onHide,\n      onBeforeShow,\n      onBeforeHide\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const persistentRef = computed(() => {\n      if (process.env.NODE_ENV === \"test\") {\n        return true;\n      }\n\n      return props.persistent;\n    });\n    onBeforeUnmount(() => {\n      destroyed.value = true;\n    });\n    const shouldRender = computed(() => {\n      return unref(persistentRef) ? true : unref(open);\n    });\n    const shouldShow = computed(() => {\n      return props.disabled ? false : unref(open);\n    });\n    const contentStyle = computed(() => {\n      var _a;\n\n      return (_a = props.style) != null ? _a : {};\n    });\n    const ariaHidden = computed(() => !unref(open));\n    useEscapeKeydown(onClose);\n\n    const onTransitionLeave = () => {\n      onHide();\n    };\n\n    const stopWhenControlled = () => {\n      if (unref(controlled)) return true;\n    };\n\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable && unref(trigger) === \"hover\") {\n        onOpen();\n      }\n    });\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (unref(trigger) === \"hover\") {\n        onClose();\n      }\n    });\n\n    const onBeforeEnter = () => {\n      var _a, _b;\n\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      onBeforeShow == null ? void 0 : onBeforeShow();\n    };\n\n    const onBeforeLeave = () => {\n      onBeforeHide == null ? void 0 : onBeforeHide();\n    };\n\n    const onAfterShow = () => {\n      onShow();\n    };\n\n    let stopHandle;\n    watch(() => unref(open), val => {\n      if (val) {\n        stopHandle = onClickOutside(computed(() => {\n          var _a;\n\n          return (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n        }), () => {\n          if (unref(controlled)) return;\n          const $trigger = unref(trigger);\n\n          if ($trigger !== \"hover\") {\n            onClose();\n          }\n        });\n      } else {\n        stopHandle == null ? void 0 : stopHandle();\n      }\n    }, {\n      flush: \"post\"\n    });\n    return {\n      ariaHidden,\n      entering,\n      leaving,\n      id,\n      intermediateOpen,\n      contentStyle,\n      contentRef,\n      destroyed,\n      shouldRender,\n      shouldShow,\n      open,\n      onAfterShow,\n      onBeforeEnter,\n      onBeforeLeave,\n      onContentEnter,\n      onContentLeave,\n      onTransitionLeave\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_visually_hidden = resolveComponent(\"el-visually-hidden\");\n\n  const _component_el_popper_content = resolveComponent(\"el-popper-content\");\n\n  return openBlock(), createBlock(Teleport, {\n    disabled: !_ctx.teleported,\n    to: _ctx.appendTo\n  }, [createVNode(Transition, {\n    name: _ctx.transition,\n    onAfterLeave: _ctx.onTransitionLeave,\n    onBeforeEnter: _ctx.onBeforeEnter,\n    onAfterEnter: _ctx.onAfterShow,\n    onBeforeLeave: _ctx.onBeforeLeave\n  }, {\n    default: withCtx(() => [_ctx.shouldRender ? withDirectives((openBlock(), createBlock(_component_el_popper_content, mergeProps({\n      key: 0,\n      ref: \"contentRef\"\n    }, _ctx.$attrs, {\n      \"aria-hidden\": _ctx.ariaHidden,\n      \"boundaries-padding\": _ctx.boundariesPadding,\n      \"fallback-placements\": _ctx.fallbackPlacements,\n      \"gpu-acceleration\": _ctx.gpuAcceleration,\n      offset: _ctx.offset,\n      placement: _ctx.placement,\n      \"popper-options\": _ctx.popperOptions,\n      strategy: _ctx.strategy,\n      effect: _ctx.effect,\n      enterable: _ctx.enterable,\n      pure: _ctx.pure,\n      \"popper-class\": _ctx.popperClass,\n      \"popper-style\": [_ctx.popperStyle, _ctx.contentStyle],\n      \"reference-el\": _ctx.referenceEl,\n      visible: _ctx.shouldShow,\n      \"z-index\": _ctx.zIndex,\n      onMouseenter: _ctx.onContentEnter,\n      onMouseleave: _ctx.onContentLeave\n    }), {\n      default: withCtx(() => [createCommentVNode(\" Workaround bug #6378 \"), !_ctx.destroyed ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [renderSlot(_ctx.$slots, \"default\"), createVNode(_component_el_visually_hidden, {\n        id: _ctx.id,\n        role: \"tooltip\"\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.ariaLabel), 1)]),\n        _: 1\n      }, 8, [\"id\"])], 64)) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 16, [\"aria-hidden\", \"boundaries-padding\", \"fallback-placements\", \"gpu-acceleration\", \"offset\", \"placement\", \"popper-options\", \"strategy\", \"effect\", \"enterable\", \"pure\", \"popper-class\", \"popper-style\", \"reference-el\", \"visible\", \"z-index\", \"onMouseenter\", \"onMouseleave\"])), [[vShow, _ctx.shouldShow]]) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"name\", \"onAfterLeave\", \"onBeforeEnter\", \"onAfterEnter\", \"onBeforeLeave\"])], 8, [\"disabled\", \"to\"]);\n}\n\nvar ElTooltipContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/content.vue\"]]);\n\nexport { ElTooltipContent as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElPopperContent","ElVisuallyHidden","inheritAttrs","props","setup","ref","controlled","id","open","trigger","onClose","onOpen","onShow","onHide","onBeforeShow","onBeforeHide","inject","TOOLTIP_INJECTION_KEY","computed","env","NODE_ENV","onBeforeUnmount","destroyed","value","unref","contentStyle","_a","useEscapeKeydown","onTransitionLeave","_b","onAfterShow","watch","val","stopHandle","flush","ariaHidden","entering","leaving","intermediateOpen","contentRef","shouldRender","shouldShow","onBeforeEnter","onBeforeLeave","onContentEnter","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_el_popper_content","_openBlock","disabled","to","_createVNode","onAfterEnter","default","_withDirectives","key","offset","placement","strategy","effect","enterable","pure","onMouseenter","onMouseleave","_createCommentVNode"],"sources":["../../../../../../packages/components/tooltip/src/content.vue"],"sourcesContent":["<template>\n  <teleport :disabled=\"!teleported\" :to=\"appendTo\">\n    <transition\n      :name=\"transition\"\n      @after-leave=\"onTransitionLeave\"\n      @before-enter=\"onBeforeEnter\"\n      @after-enter=\"onAfterShow\"\n      @before-leave=\"onBeforeLeave\"\n    >\n      <el-popper-content\n        v-if=\"shouldRender\"\n        v-show=\"shouldShow\"\n        ref=\"contentRef\"\n        v-bind=\"$attrs\"\n        :aria-hidden=\"ariaHidden\"\n        :boundaries-padding=\"boundariesPadding\"\n        :fallback-placements=\"fallbackPlacements\"\n        :gpu-acceleration=\"gpuAcceleration\"\n        :offset=\"offset\"\n        :placement=\"placement\"\n        :popper-options=\"popperOptions\"\n        :strategy=\"strategy\"\n        :effect=\"effect\"\n        :enterable=\"enterable\"\n        :pure=\"pure\"\n        :popper-class=\"popperClass\"\n        :popper-style=\"[popperStyle, contentStyle]\"\n        :reference-el=\"referenceEl\"\n        :visible=\"shouldShow\"\n        :z-index=\"zIndex\"\n        @mouseenter=\"onContentEnter\"\n        @mouseleave=\"onContentLeave\"\n      >\n        <!-- Workaround bug #6378 -->\n        <template v-if=\"!destroyed\">\n          <slot />\n          <el-visually-hidden :id=\"id\" role=\"tooltip\">\n            {{ ariaLabel }}\n          </el-visually-hidden>\n        </template>\n      </el-popper-content>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { onClickOutside } from '@vueuse/core'\nimport { ElPopperContent } from '@element-plus/components/popper'\nimport { ElVisuallyHidden } from '@element-plus/components/visual-hidden'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { useEscapeKeydown } from '@element-plus/hooks'\n\nimport { useTooltipContentProps } from './tooltip'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\n\nexport default defineComponent({\n  name: 'ElTooltipContent',\n  components: {\n    ElPopperContent,\n    ElVisuallyHidden,\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n  setup(props) {\n    const contentRef = ref<InstanceType<typeof ElPopperContent> | null>(null)\n    const intermediateOpen = ref(false)\n    const entering = ref(false)\n    const leaving = ref(false)\n    const destroyed = ref(false)\n    const {\n      controlled,\n      id,\n      open,\n      trigger,\n      onClose,\n      onOpen,\n      onShow,\n      onHide,\n      onBeforeShow,\n      onBeforeHide,\n    } = inject(TOOLTIP_INJECTION_KEY, undefined)!\n    const persistentRef = computed(() => {\n      // For testing, we would always want the content to be rendered\n      // to the DOM, so we need to return true here.\n      if (process.env.NODE_ENV === 'test') {\n        return true\n      }\n      return props.persistent\n    })\n\n    onBeforeUnmount(() => {\n      destroyed.value = true\n    })\n\n    const shouldRender = computed(() => {\n      return unref(persistentRef) ? true : unref(open)\n    })\n\n    const shouldShow = computed(() => {\n      return props.disabled ? false : unref(open)\n    })\n\n    const contentStyle = computed(() => (props.style ?? {}) as any)\n\n    const ariaHidden = computed(() => !unref(open))\n\n    useEscapeKeydown(onClose)\n\n    const onTransitionLeave = () => {\n      onHide()\n    }\n\n    const stopWhenControlled = () => {\n      if (unref(controlled)) return true\n    }\n\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable && unref(trigger) === 'hover') {\n        onOpen()\n      }\n    })\n\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (unref(trigger) === 'hover') {\n        onClose()\n      }\n    })\n\n    const onBeforeEnter = () => {\n      contentRef.value?.updatePopper?.()\n      onBeforeShow?.()\n    }\n\n    const onBeforeLeave = () => {\n      onBeforeHide?.()\n    }\n\n    const onAfterShow = () => {\n      onShow()\n    }\n\n    let stopHandle: ReturnType<typeof onClickOutside>\n\n    watch(\n      () => unref(open),\n      (val) => {\n        if (val) {\n          stopHandle = onClickOutside(\n            computed(() => {\n              return contentRef.value?.popperContentRef\n            }),\n            () => {\n              if (unref(controlled)) return\n              const $trigger = unref(trigger)\n              if ($trigger !== 'hover') {\n                onClose()\n              }\n            }\n          )\n        } else {\n          stopHandle?.()\n        }\n      },\n      {\n        flush: 'post',\n      }\n    )\n\n    return {\n      ariaHidden,\n      entering,\n      leaving,\n      id,\n      intermediateOpen,\n      contentStyle,\n      contentRef,\n      destroyed,\n      shouldRender,\n      shouldShow,\n      open,\n      onAfterShow,\n      onBeforeEnter,\n      onBeforeLeave,\n      onContentEnter,\n      onContentLeave,\n      onTransitionLeave,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}