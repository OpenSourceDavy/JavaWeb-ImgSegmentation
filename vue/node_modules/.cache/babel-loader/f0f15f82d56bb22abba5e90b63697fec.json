{"ast":null,"code":"import '../../../../utils/index.mjs';\nimport '../../../../constants/index.mjs';\nimport SubMenu from './submenu.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nimport { triggerEvent } from '../../../../utils/dom/aria.mjs';\n\nclass MenuItem {\n  constructor(domNode) {\n    this.domNode = domNode;\n    this.submenu = null;\n    this.submenu = null;\n    this.init();\n  }\n\n  init() {\n    this.domNode.setAttribute(\"tabindex\", \"0\");\n    const menuChild = this.domNode.querySelector(\".el-menu\");\n\n    if (menuChild) {\n      this.submenu = new SubMenu(this, menuChild);\n    }\n\n    this.addListeners();\n  }\n\n  addListeners() {\n    this.domNode.addEventListener(\"keydown\", event => {\n      let prevDef = false;\n\n      switch (event.code) {\n        case EVENT_CODE.down:\n          {\n            triggerEvent(event.currentTarget, \"mouseenter\");\n            this.submenu && this.submenu.gotoSubIndex(0);\n            prevDef = true;\n            break;\n          }\n\n        case EVENT_CODE.up:\n          {\n            triggerEvent(event.currentTarget, \"mouseenter\");\n            this.submenu && this.submenu.gotoSubIndex(this.submenu.subMenuItems.length - 1);\n            prevDef = true;\n            break;\n          }\n\n        case EVENT_CODE.tab:\n          {\n            triggerEvent(event.currentTarget, \"mouseleave\");\n            break;\n          }\n\n        case EVENT_CODE.enter:\n        case EVENT_CODE.space:\n          {\n            prevDef = true;\n            event.currentTarget.click();\n            break;\n          }\n      }\n\n      if (prevDef) {\n        event.preventDefault();\n      }\n    });\n  }\n\n}\n\nexport { MenuItem as default };","map":{"version":3,"mappings":";;;;;;AAGA,MAAMA,QAAN,CAAe;AACbC,aAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKA,OAAL,GAAe,IAAf;AACA,SAAKC,IAAL;AACD;;AACDA,MAAI,GAAG;AACL,SAAKF,OAAL,CAAaG,YAAb,CAA0B,UAA1B,EAAsC,GAAtC;AACA,UAAMC,SAAS,GAAG,KAAKJ,OAAL,CAAaK,aAAb,CAA2B,UAA3B,CAAlB;;AACA,QAAID,SAAJ,EAAe;AACb,WAAKH,OAAL,GAAe,IAAIK,OAAJ,CAAY,IAAZ,EAAkBF,SAAlB,CAAf;AACD;;AACD,SAAKG,YAAL;AACD;;AACDA,cAAY,GAAG;AACb,SAAKP,OAAL,CAAaQ,gBAAb,CAA8B,SAA9B,EAA0CC,KAAD,IAAW;AAClD,UAAIC,OAAO,GAAG,KAAd;;AACA,cAAQD,KAAK,CAACE,IAAd;AACE,aAAKC,UAAU,CAACC,IAAhB;AAAsB;AACpBC,wBAAY,CAACL,KAAK,CAACM,aAAP,EAAsB,YAAtB,CAAZ;AACA,iBAAKd,OAAL,IAAgB,KAAKA,OAAL,CAAae,YAAb,CAA0B,CAA1B,CAAhB;AACAN,mBAAO,GAAG,IAAV;AACA;AACD;;AACD,aAAKE,UAAU,CAACK,EAAhB;AAAoB;AAClBH,wBAAY,CAACL,KAAK,CAACM,aAAP,EAAsB,YAAtB,CAAZ;AACA,iBAAKd,OAAL,IAAgB,KAAKA,OAAL,CAAae,YAAb,CAA0B,KAAKf,OAAL,CAAaiB,YAAb,CAA0BC,MAA1B,GAAmC,CAA7D,CAAhB;AACAT,mBAAO,GAAG,IAAV;AACA;AACD;;AACD,aAAKE,UAAU,CAACQ,GAAhB;AAAqB;AACnBN,wBAAY,CAACL,KAAK,CAACM,aAAP,EAAsB,YAAtB,CAAZ;AACA;AACD;;AACD,aAAKH,UAAU,CAACS,KAAhB;AACA,aAAKT,UAAU,CAACU,KAAhB;AAAuB;AACrBZ,mBAAO,GAAG,IAAV;AACAD,iBAAK,CAACM,aAAN,CAAoBQ,KAApB;AACA;AACD;AAtBH;;AAwBA,UAAIb,OAAJ,EAAa;AACXD,aAAK,CAACe,cAAN;AACD;AACF,KA7BD;AA8BD;;AA9CY","names":["MenuItem","constructor","domNode","submenu","init","setAttribute","menuChild","querySelector","SubMenu","addListeners","addEventListener","event","prevDef","code","EVENT_CODE","down","triggerEvent","currentTarget","gotoSubIndex","up","subMenuItems","length","tab","enter","space","click","preventDefault"],"sources":["../../../../../../../packages/components/menu/src/utils/menu-item.ts"],"sourcesContent":["import { triggerEvent } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport SubMenu from './submenu'\n\nclass MenuItem {\n  public submenu: SubMenu = null\n  constructor(public domNode: HTMLElement) {\n    this.submenu = null\n    this.init()\n  }\n\n  init(): void {\n    this.domNode.setAttribute('tabindex', '0')\n    const menuChild = this.domNode.querySelector('.el-menu')\n    if (menuChild) {\n      this.submenu = new SubMenu(this, menuChild)\n    }\n    this.addListeners()\n  }\n\n  addListeners(): void {\n    this.domNode.addEventListener('keydown', (event: KeyboardEvent) => {\n      let prevDef = false\n      switch (event.code) {\n        case EVENT_CODE.down: {\n          triggerEvent(event.currentTarget as HTMLElement, 'mouseenter')\n          this.submenu && this.submenu.gotoSubIndex(0)\n          prevDef = true\n          break\n        }\n        case EVENT_CODE.up: {\n          triggerEvent(event.currentTarget as HTMLElement, 'mouseenter')\n          this.submenu &&\n            this.submenu.gotoSubIndex(this.submenu.subMenuItems.length - 1)\n          prevDef = true\n          break\n        }\n        case EVENT_CODE.tab: {\n          triggerEvent(event.currentTarget as HTMLElement, 'mouseleave')\n          break\n        }\n        case EVENT_CODE.enter:\n        case EVENT_CODE.space: {\n          prevDef = true\n          ;(event.currentTarget as HTMLElement).click()\n          break\n        }\n      }\n      if (prevDef) {\n        event.preventDefault()\n      }\n    })\n  }\n}\n\nexport default MenuItem\n"]},"metadata":{},"sourceType":"module"}