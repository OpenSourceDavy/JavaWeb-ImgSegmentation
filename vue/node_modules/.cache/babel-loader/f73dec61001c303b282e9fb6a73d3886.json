{"ast":null,"code":"import '../../../utils/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nconst ROOT_TREE_INJECTION_KEY = Symbol();\nconst EMPTY_NODE = {\n  key: -1,\n  level: -1,\n  data: {}\n};\n\nvar TreeOptionsEnum = /* @__PURE__ */(TreeOptionsEnum2 => {\n  TreeOptionsEnum2[\"KEY\"] = \"id\";\n  TreeOptionsEnum2[\"LABEL\"] = \"label\";\n  TreeOptionsEnum2[\"CHILDREN\"] = \"children\";\n  TreeOptionsEnum2[\"DISABLED\"] = \"disabled\";\n  return TreeOptionsEnum2;\n})(TreeOptionsEnum || {});\n\nvar SetOperationEnum = /* @__PURE__ */(SetOperationEnum2 => {\n  SetOperationEnum2[\"ADD\"] = \"add\";\n  SetOperationEnum2[\"DELETE\"] = \"delete\";\n  return SetOperationEnum2;\n})(SetOperationEnum || {});\n\nconst treeProps = buildProps({\n  data: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  emptyText: {\n    type: String\n  },\n  height: {\n    type: Number,\n    default: 200\n  },\n  props: {\n    type: definePropType(Object),\n    default: () => mutable({\n      children: \"children\"\n      /* CHILDREN */\n      ,\n      label: \"label\"\n      /* LABEL */\n      ,\n      disabled: \"disabled\"\n      /* DISABLED */\n      ,\n      value: \"id\"\n      /* KEY */\n\n    })\n  },\n  highlightCurrent: {\n    type: Boolean,\n    default: false\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false\n  },\n  defaultCheckedKeys: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  checkStrictly: {\n    type: Boolean,\n    default: false\n  },\n  defaultExpandedKeys: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  indent: {\n    type: Number,\n    default: 16\n  },\n  icon: {\n    type: String\n  },\n  expandOnClickNode: {\n    type: Boolean,\n    default: true\n  },\n  checkOnClickNode: {\n    type: Boolean,\n    default: false\n  },\n  currentNodeKey: {\n    type: definePropType([String, Number])\n  },\n  accordion: {\n    type: Boolean,\n    default: false\n  },\n  filterMethod: {\n    type: definePropType(Function)\n  },\n  perfMode: {\n    type: Boolean,\n    default: true\n  }\n});\nconst treeNodeProps = buildProps({\n  node: {\n    type: definePropType(Object),\n    default: () => mutable(EMPTY_NODE)\n  },\n  expanded: {\n    type: Boolean,\n    default: false\n  },\n  checked: {\n    type: Boolean,\n    default: false\n  },\n  indeterminate: {\n    type: Boolean,\n    default: false\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  current: {\n    type: Boolean,\n    default: false\n  },\n  hiddenExpandIcon: {\n    type: Boolean,\n    default: false\n  }\n});\nconst treeNodeContentProps = buildProps({\n  node: {\n    type: definePropType(Object),\n    required: true\n  }\n});\nconst NODE_CLICK = \"node-click\";\nconst NODE_EXPAND = \"node-expand\";\nconst NODE_COLLAPSE = \"node-collapse\";\nconst CURRENT_CHANGE = \"current-change\";\nconst NODE_CHECK = \"check\";\nconst NODE_CHECK_CHANGE = \"check-change\";\nconst NODE_CONTEXTMENU = \"node-contextmenu\";\nconst treeEmits = {\n  [NODE_CLICK]: (data, node, e) => data && node && e,\n  [NODE_EXPAND]: (data, node) => data && node,\n  [NODE_COLLAPSE]: (data, node) => data && node,\n  [CURRENT_CHANGE]: (data, node) => data && node,\n  [NODE_CHECK]: (data, checkedInfo) => data && checkedInfo,\n  [NODE_CHECK_CHANGE]: (data, checked) => data && typeof checked === \"boolean\",\n  [NODE_CONTEXTMENU]: (event, data, node) => event && data && node\n};\nconst treeNodeEmits = {\n  click: (node, e) => !!(node && e),\n  toggle: node => !!node,\n  check: (node, checked) => node && typeof checked === \"boolean\"\n};\nexport { CURRENT_CHANGE, NODE_CHECK, NODE_CHECK_CHANGE, NODE_CLICK, NODE_COLLAPSE, NODE_CONTEXTMENU, NODE_EXPAND, ROOT_TREE_INJECTION_KEY, SetOperationEnum, TreeOptionsEnum, treeEmits, treeNodeContentProps, treeNodeEmits, treeNodeProps, treeProps };","map":{"version":3,"mappings":";;;AACY,MAACA,uBAAuB,GAAGC,MAAM,EAAjC;AACZ,MAAMC,UAAU,GAAG;AACjBC,KAAG,EAAE,CAAC,CADW;AAEjBC,OAAK,EAAE,CAAC,CAFS;AAGjBC,MAAI,EAAE;AAHW,CAAnB;;AAKU,IAACC,eAAe,kBAAmB,CAAEC,gBAAD,IAAsB;AAClEA,kBAAgB,CAAC,KAAD,CAAhB,GAA0B,IAA1B;AACAA,kBAAgB,CAAC,OAAD,CAAhB,GAA4B,OAA5B;AACAA,kBAAgB,CAAC,UAAD,CAAhB,GAA+B,UAA/B;AACAA,kBAAgB,CAAC,UAAD,CAAhB,GAA+B,UAA/B;AACA,SAAOA,gBAAP;AACD,CAN4C,EAM1CD,eAAe,IAAI,EANuB,CAAnC;;AAOA,IAACE,gBAAgB,kBAAmB,CAAEC,iBAAD,IAAuB;AACpEA,mBAAiB,CAAC,KAAD,CAAjB,GAA2B,KAA3B;AACAA,mBAAiB,CAAC,QAAD,CAAjB,GAA8B,QAA9B;AACA,SAAOA,iBAAP;AACD,CAJ6C,EAI3CD,gBAAgB,IAAI,EAJuB,CAApC;;AAKE,MAACE,SAAS,GAAGC,UAAU,CAAC;AAClCN,MAAI,EAAE;AACJO,QAAI,EAAEC,cAAc,CAACC,KAAD,CADhB;AAEJC,WAAO,EAAE,MAAMC,OAAO,CAAC,EAAD;AAFlB,GAD4B;AAKlCC,WAAS,EAAE;AACTL,QAAI,EAAEM;AADG,GALuB;AAQlCC,QAAM,EAAE;AACNP,QAAI,EAAEQ,MADA;AAENL,WAAO,EAAE;AAFH,GAR0B;AAYlCM,OAAK,EAAE;AACLT,QAAI,EAAEC,cAAc,CAACS,MAAD,CADf;AAELP,WAAO,EAAE,MAAMC,OAAO,CAAC;AACrBO,cAAQ,EAAE;AAAU;AADC;AAErBC,WAAK,EAAE;AAAO;AAFO;AAGrBC,cAAQ,EAAE;AAAU;AAHC;AAIrBC,WAAK,EAAE;AAAI;;AAJU,KAAD;AAFjB,GAZ2B;AAqBlCC,kBAAgB,EAAE;AAChBf,QAAI,EAAEgB,OADU;AAEhBb,WAAO,EAAE;AAFO,GArBgB;AAyBlCc,cAAY,EAAE;AACZjB,QAAI,EAAEgB,OADM;AAEZb,WAAO,EAAE;AAFG,GAzBoB;AA6BlCe,oBAAkB,EAAE;AAClBlB,QAAI,EAAEC,cAAc,CAACC,KAAD,CADF;AAElBC,WAAO,EAAE,MAAMC,OAAO,CAAC,EAAD;AAFJ,GA7Bc;AAiClCe,eAAa,EAAE;AACbnB,QAAI,EAAEgB,OADO;AAEbb,WAAO,EAAE;AAFI,GAjCmB;AAqClCiB,qBAAmB,EAAE;AACnBpB,QAAI,EAAEC,cAAc,CAACC,KAAD,CADD;AAEnBC,WAAO,EAAE,MAAMC,OAAO,CAAC,EAAD;AAFH,GArCa;AAyClCiB,QAAM,EAAE;AACNrB,QAAI,EAAEQ,MADA;AAENL,WAAO,EAAE;AAFH,GAzC0B;AA6ClCmB,MAAI,EAAE;AACJtB,QAAI,EAAEM;AADF,GA7C4B;AAgDlCiB,mBAAiB,EAAE;AACjBvB,QAAI,EAAEgB,OADW;AAEjBb,WAAO,EAAE;AAFQ,GAhDe;AAoDlCqB,kBAAgB,EAAE;AAChBxB,QAAI,EAAEgB,OADU;AAEhBb,WAAO,EAAE;AAFO,GApDgB;AAwDlCsB,gBAAc,EAAE;AACdzB,QAAI,EAAEC,cAAc,CAAC,CAACK,MAAD,EAASE,MAAT,CAAD;AADN,GAxDkB;AA2DlCkB,WAAS,EAAE;AACT1B,QAAI,EAAEgB,OADG;AAETb,WAAO,EAAE;AAFA,GA3DuB;AA+DlCwB,cAAY,EAAE;AACZ3B,QAAI,EAAEC,cAAc,CAAC2B,QAAD;AADR,GA/DoB;AAkElCC,UAAQ,EAAE;AACR7B,QAAI,EAAEgB,OADE;AAERb,WAAO,EAAE;AAFD;AAlEwB,CAAD,CAAvB;AAuEA,MAAC2B,aAAa,GAAG/B,UAAU,CAAC;AACtCgC,MAAI,EAAE;AACJ/B,QAAI,EAAEC,cAAc,CAACS,MAAD,CADhB;AAEJP,WAAO,EAAE,MAAMC,OAAO,CAACd,UAAD;AAFlB,GADgC;AAKtC0C,UAAQ,EAAE;AACRhC,QAAI,EAAEgB,OADE;AAERb,WAAO,EAAE;AAFD,GAL4B;AAStC8B,SAAO,EAAE;AACPjC,QAAI,EAAEgB,OADC;AAEPb,WAAO,EAAE;AAFF,GAT6B;AAatC+B,eAAa,EAAE;AACblC,QAAI,EAAEgB,OADO;AAEbb,WAAO,EAAE;AAFI,GAbuB;AAiBtCc,cAAY,EAAE;AACZjB,QAAI,EAAEgB,OADM;AAEZb,WAAO,EAAE;AAFG,GAjBwB;AAqBtCU,UAAQ,EAAE;AACRb,QAAI,EAAEgB,OADE;AAERb,WAAO,EAAE;AAFD,GArB4B;AAyBtCgC,SAAO,EAAE;AACPnC,QAAI,EAAEgB,OADC;AAEPb,WAAO,EAAE;AAFF,GAzB6B;AA6BtCiC,kBAAgB,EAAE;AAChBpC,QAAI,EAAEgB,OADU;AAEhBb,WAAO,EAAE;AAFO;AA7BoB,CAAD,CAA3B;AAkCA,MAACkC,oBAAoB,GAAGtC,UAAU,CAAC;AAC7CgC,MAAI,EAAE;AACJ/B,QAAI,EAAEC,cAAc,CAACS,MAAD,CADhB;AAEJ4B,YAAQ,EAAE;AAFN;AADuC,CAAD,CAAlC;AAMA,MAACC,UAAU,GAAG,YAAd;AACA,MAACC,WAAW,GAAG,aAAf;AACA,MAACC,aAAa,GAAG,eAAjB;AACA,MAACC,cAAc,GAAG,gBAAlB;AACA,MAACC,UAAU,GAAG,OAAd;AACA,MAACC,iBAAiB,GAAG,cAArB;AACA,MAACC,gBAAgB,GAAG,kBAApB;AACA,MAACC,SAAS,GAAG;AACvB,GAACP,UAAD,GAAc,CAAC9C,IAAD,EAAOsC,IAAP,EAAagB,CAAb,KAAmBtD,IAAI,IAAIsC,IAAR,IAAgBgB,CAD1B;AAEvB,GAACP,WAAD,GAAe,CAAC/C,IAAD,EAAOsC,IAAP,KAAgBtC,IAAI,IAAIsC,IAFhB;AAGvB,GAACU,aAAD,GAAiB,CAAChD,IAAD,EAAOsC,IAAP,KAAgBtC,IAAI,IAAIsC,IAHlB;AAIvB,GAACW,cAAD,GAAkB,CAACjD,IAAD,EAAOsC,IAAP,KAAgBtC,IAAI,IAAIsC,IAJnB;AAKvB,GAACY,UAAD,GAAc,CAAClD,IAAD,EAAOuD,WAAP,KAAuBvD,IAAI,IAAIuD,WALtB;AAMvB,GAACJ,iBAAD,GAAqB,CAACnD,IAAD,EAAOwC,OAAP,KAAmBxC,IAAI,IAAI,OAAOwC,OAAP,KAAmB,SAN5C;AAOvB,GAACY,gBAAD,GAAoB,CAACI,KAAD,EAAQxD,IAAR,EAAcsC,IAAd,KAAuBkB,KAAK,IAAIxD,IAAT,IAAiBsC;AAPrC,CAAb;AASA,MAACmB,aAAa,GAAG;AAC3BC,OAAK,EAAE,CAACpB,IAAD,EAAOgB,CAAP,KAAa,CAAC,EAAEhB,IAAI,IAAIgB,CAAV,CADM;AAE3BK,QAAM,EAAGrB,IAAD,IAAU,CAAC,CAACA,IAFO;AAG3BsB,OAAK,EAAE,CAACtB,IAAD,EAAOE,OAAP,KAAmBF,IAAI,IAAI,OAAOE,OAAP,KAAmB;AAH1B,CAAjB","names":["ROOT_TREE_INJECTION_KEY","Symbol","EMPTY_NODE","key","level","data","TreeOptionsEnum","TreeOptionsEnum2","SetOperationEnum","SetOperationEnum2","treeProps","buildProps","type","definePropType","Array","default","mutable","emptyText","String","height","Number","props","Object","children","label","disabled","value","highlightCurrent","Boolean","showCheckbox","defaultCheckedKeys","checkStrictly","defaultExpandedKeys","indent","icon","expandOnClickNode","checkOnClickNode","currentNodeKey","accordion","filterMethod","Function","perfMode","treeNodeProps","node","expanded","checked","indeterminate","current","hiddenExpandIcon","treeNodeContentProps","required","NODE_CLICK","NODE_EXPAND","NODE_COLLAPSE","CURRENT_CHANGE","NODE_CHECK","NODE_CHECK_CHANGE","NODE_CONTEXTMENU","treeEmits","e","checkedInfo","event","treeNodeEmits","click","toggle","check"],"sources":["../../../../../../packages/components/tree-v2/src/virtual-tree.ts"],"sourcesContent":["import { buildProps, definePropType, mutable } from '@element-plus/utils'\nimport type { InjectionKey } from 'vue'\nimport type { TreeNodeData } from '../../tree/src/tree.type'\nimport type {\n  CheckedInfo,\n  FilterMethod,\n  TreeContext,\n  TreeData,\n  TreeKey,\n  TreeNode,\n  TreeOptionProps,\n} from './types'\n\n// constants\nexport const ROOT_TREE_INJECTION_KEY: InjectionKey<TreeContext> = Symbol()\nconst EMPTY_NODE = {\n  key: -1,\n  level: -1,\n  data: {},\n} as const\n\n// enums\nexport enum TreeOptionsEnum {\n  KEY = 'id',\n  LABEL = 'label',\n  CHILDREN = 'children',\n  DISABLED = 'disabled',\n}\n\nexport const enum SetOperationEnum {\n  ADD = 'add',\n  DELETE = 'delete',\n}\n\n// props\nexport const treeProps = buildProps({\n  data: {\n    type: definePropType<TreeData>(Array),\n    default: () => mutable([] as const),\n  },\n  emptyText: {\n    type: String,\n  },\n  height: {\n    type: Number,\n    default: 200,\n  },\n  props: {\n    type: definePropType<TreeOptionProps>(Object),\n    default: () =>\n      mutable({\n        children: TreeOptionsEnum.CHILDREN,\n        label: TreeOptionsEnum.LABEL,\n        disabled: TreeOptionsEnum.DISABLED,\n        value: TreeOptionsEnum.KEY,\n      } as const),\n  },\n  highlightCurrent: {\n    type: Boolean,\n    default: false,\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false,\n  },\n  defaultCheckedKeys: {\n    type: definePropType<TreeKey[]>(Array),\n    default: () => mutable([] as const),\n  },\n  // Whether checked state of a node not affects its father and\n  // child nodes when show-checkbox is true\n  checkStrictly: {\n    type: Boolean,\n    default: false,\n  },\n  defaultExpandedKeys: {\n    type: definePropType<TreeKey[]>(Array),\n    default: () => mutable([] as const),\n  },\n  indent: {\n    type: Number,\n    default: 16,\n  },\n  icon: {\n    type: String,\n  },\n  expandOnClickNode: {\n    type: Boolean,\n    default: true,\n  },\n  checkOnClickNode: {\n    type: Boolean,\n    default: false,\n  },\n  currentNodeKey: {\n    type: definePropType<TreeKey>([String, Number]),\n  },\n  // TODO need to optimization\n  accordion: {\n    type: Boolean,\n    default: false,\n  },\n  filterMethod: {\n    type: definePropType<FilterMethod>(Function),\n  },\n  // Performance mode will increase memory usage, but scrolling will be smoother\n  perfMode: {\n    type: Boolean,\n    default: true,\n  },\n} as const)\n\nexport const treeNodeProps = buildProps({\n  node: {\n    type: definePropType<TreeNode>(Object),\n    default: () => mutable(EMPTY_NODE),\n  },\n  expanded: {\n    type: Boolean,\n    default: false,\n  },\n  checked: {\n    type: Boolean,\n    default: false,\n  },\n  indeterminate: {\n    type: Boolean,\n    default: false,\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  current: {\n    type: Boolean,\n    default: false,\n  },\n  hiddenExpandIcon: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport const treeNodeContentProps = buildProps({\n  node: {\n    type: definePropType<TreeNode>(Object),\n    required: true,\n  },\n} as const)\n\n// emits\nexport const NODE_CLICK = 'node-click'\nexport const NODE_EXPAND = 'node-expand'\nexport const NODE_COLLAPSE = 'node-collapse'\nexport const CURRENT_CHANGE = 'current-change'\nexport const NODE_CHECK = 'check'\nexport const NODE_CHECK_CHANGE = 'check-change'\nexport const NODE_CONTEXTMENU = 'node-contextmenu'\n\nexport const treeEmits = {\n  [NODE_CLICK]: (data: TreeNodeData, node: TreeNode, e: MouseEvent) =>\n    data && node && e,\n  [NODE_EXPAND]: (data: TreeNodeData, node: TreeNode) => data && node,\n  [NODE_COLLAPSE]: (data: TreeNodeData, node: TreeNode) => data && node,\n  [CURRENT_CHANGE]: (data: TreeNodeData, node: TreeNode) => data && node,\n  [NODE_CHECK]: (data: TreeNodeData, checkedInfo: CheckedInfo) =>\n    data && checkedInfo,\n  [NODE_CHECK_CHANGE]: (data: TreeNodeData, checked: boolean) =>\n    data && typeof checked === 'boolean',\n  [NODE_CONTEXTMENU]: (event: Event, data: TreeNodeData, node: TreeNode) =>\n    event && data && node,\n}\n\nexport const treeNodeEmits = {\n  click: (node: TreeNode, e: MouseEvent) => !!(node && e),\n  toggle: (node: TreeNode) => !!node,\n  check: (node: TreeNode, checked: boolean) =>\n    node && typeof checked === 'boolean',\n}\n"]},"metadata":{},"sourceType":"module"}