{"ast":null,"code":"import { inject } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { getFixedColumnOffset, ensurePosition, getFixedColumnsClass } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nfunction useStyle(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const ns = useNamespace(\"table\");\n\n  const getHeaderRowStyle = rowIndex => {\n    const headerRowStyle = parent == null ? void 0 : parent.props.headerRowStyle;\n\n    if (typeof headerRowStyle === \"function\") {\n      return headerRowStyle.call(null, {\n        rowIndex\n      });\n    }\n\n    return headerRowStyle;\n  };\n\n  const getHeaderRowClass = rowIndex => {\n    const classes = [];\n    const headerRowClassName = parent == null ? void 0 : parent.props.headerRowClassName;\n\n    if (typeof headerRowClassName === \"string\") {\n      classes.push(headerRowClassName);\n    } else if (typeof headerRowClassName === \"function\") {\n      classes.push(headerRowClassName.call(null, {\n        rowIndex\n      }));\n    }\n\n    return classes.join(\" \");\n  };\n\n  const getHeaderCellStyle = (rowIndex, columnIndex, row, column) => {\n    var _a;\n\n    let headerCellStyles = (_a = parent == null ? void 0 : parent.props.headerCellStyle) != null ? _a : {};\n\n    if (typeof headerCellStyles === \"function\") {\n      headerCellStyles = headerCellStyles.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      });\n    }\n\n    const fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, column.fixed, props.store, row);\n    ensurePosition(fixedStyle, \"left\");\n    ensurePosition(fixedStyle, \"right\");\n    return Object.assign({}, headerCellStyles, fixedStyle);\n  };\n\n  const getHeaderCellClass = (rowIndex, columnIndex, row, column) => {\n    const fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, column.fixed, props.store, row);\n    const classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName, ...fixedClasses];\n\n    if (!column.children) {\n      classes.push(\"is-leaf\");\n    }\n\n    if (column.sortable) {\n      classes.push(\"is-sortable\");\n    }\n\n    const headerCellClassName = parent == null ? void 0 : parent.props.headerCellClassName;\n\n    if (typeof headerCellClassName === \"string\") {\n      classes.push(headerCellClassName);\n    } else if (typeof headerCellClassName === \"function\") {\n      classes.push(headerCellClassName.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      }));\n    }\n\n    classes.push(ns.e(\"cell\"));\n    return classes.filter(className => Boolean(className)).join(\" \");\n  };\n\n  return {\n    getHeaderRowStyle,\n    getHeaderRowClass,\n    getHeaderCellStyle,\n    getHeaderCellClass\n  };\n}\n\nexport { useStyle as default };","map":{"version":3,"mappings":"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","names":["useStyle","props","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","getHeaderRowStyle","rowIndex","headerRowStyle","call","getHeaderRowClass","classes","headerRowClassName","push","join","getHeaderCellStyle","columnIndex","row","column","_a","headerCellStyles","headerCellStyle","fixedStyle","isSubColumn","getFixedColumnOffset","fixed","store","ensurePosition","Object","assign","getHeaderCellClass","fixedClasses","getFixedColumnsClass","b","id","order","headerAlign","className","labelClassName","children","sortable","headerCellClassName","e","filter","Boolean"],"sources":["../../../../../../../packages/components/table/src/table-header/style.helper.ts"],"sourcesContent":["import { inject } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  ensurePosition,\n  getFixedColumnOffset,\n  getFixedColumnsClass,\n} from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { TableHeaderProps } from '.'\n\nfunction useStyle<T>(props: TableHeaderProps<T>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const ns = useNamespace('table')\n\n  const getHeaderRowStyle = (rowIndex: number) => {\n    const headerRowStyle = parent?.props.headerRowStyle\n    if (typeof headerRowStyle === 'function') {\n      return headerRowStyle.call(null, { rowIndex })\n    }\n    return headerRowStyle\n  }\n\n  const getHeaderRowClass = (rowIndex: number): string => {\n    const classes: string[] = []\n    const headerRowClassName = parent?.props.headerRowClassName\n    if (typeof headerRowClassName === 'string') {\n      classes.push(headerRowClassName)\n    } else if (typeof headerRowClassName === 'function') {\n      classes.push(headerRowClassName.call(null, { rowIndex }))\n    }\n\n    return classes.join(' ')\n  }\n\n  const getHeaderCellStyle = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    let headerCellStyles = parent?.props.headerCellStyle ?? {}\n    if (typeof headerCellStyles === 'function') {\n      headerCellStyles = headerCellStyles.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column,\n      })\n    }\n    const fixedStyle = column.isSubColumn\n      ? null\n      : getFixedColumnOffset<T>(\n          columnIndex,\n          column.fixed,\n          props.store,\n          row as unknown as TableColumnCtx<T>[]\n        )\n    ensurePosition(fixedStyle, 'left')\n    ensurePosition(fixedStyle, 'right')\n    return Object.assign({}, headerCellStyles, fixedStyle)\n  }\n\n  const getHeaderCellClass = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const fixedClasses = column.isSubColumn\n      ? []\n      : getFixedColumnsClass<T>(\n          ns.b(),\n          columnIndex,\n          column.fixed,\n          props.store,\n          row as unknown as TableColumnCtx<T>[]\n        )\n    const classes = [\n      column.id,\n      column.order,\n      column.headerAlign,\n      column.className,\n      column.labelClassName,\n      ...fixedClasses,\n    ]\n\n    if (!column.children) {\n      classes.push('is-leaf')\n    }\n\n    if (column.sortable) {\n      classes.push('is-sortable')\n    }\n\n    const headerCellClassName = parent?.props.headerCellClassName\n    if (typeof headerCellClassName === 'string') {\n      classes.push(headerCellClassName)\n    } else if (typeof headerCellClassName === 'function') {\n      classes.push(\n        headerCellClassName.call(null, {\n          rowIndex,\n          columnIndex,\n          row,\n          column,\n        })\n      )\n    }\n\n    classes.push(ns.e('cell'))\n\n    return classes.filter((className) => Boolean(className)).join(' ')\n  }\n\n  return {\n    getHeaderRowStyle,\n    getHeaderRowClass,\n    getHeaderCellStyle,\n    getHeaderCellClass,\n  }\n}\n\nexport default useStyle\n"]},"metadata":{},"sourceType":"module"}