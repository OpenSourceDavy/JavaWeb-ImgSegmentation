{"ast":null,"code":"import { inject, provide } from 'vue';\n\nfunction useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject(\"TreeNodeMap\", null);\n  const currentNodeMap = {\n    treeNodeExpand: node => {\n      if (props.node !== node) {\n        props.node.collapse();\n      }\n    },\n    children: []\n  };\n\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap);\n  }\n\n  provide(\"TreeNodeMap\", currentNodeMap);\n  return {\n    broadcastExpanded: node => {\n      if (!props.accordion) return;\n\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node);\n      }\n    }\n  };\n}\n\nexport { useNodeExpandEventBroadcast };","map":{"version":3,"mappings":";;AACO,SAASA,2BAAT,CAAqCC,KAArC,EAA4C;AACjD,QAAMC,aAAa,GAAGC,MAAM,CAAC,aAAD,EAAgB,IAAhB,CAA5B;AACA,QAAMC,cAAc,GAAG;AACrBC,kBAAc,EAAGC,IAAD,IAAU;AACxB,UAAIL,KAAK,CAACK,IAAN,KAAeA,IAAnB,EAAyB;AACvBL,aAAK,CAACK,IAAN,CAAWC,QAAX;AACD;AACF,KALoB;AAMrBC,YAAQ,EAAE;AANW,GAAvB;;AAQA,MAAIN,aAAJ,EAAmB;AACjBA,iBAAa,CAACM,QAAd,CAAuBC,IAAvB,CAA4BL,cAA5B;AACD;;AACDM,SAAO,CAAC,aAAD,EAAgBN,cAAhB,CAAP;AACA,SAAO;AACLO,qBAAiB,EAAGL,IAAD,IAAU;AAC3B,UAAI,CAACL,KAAK,CAACW,SAAX,EACE;;AACF,WAAK,MAAMC,SAAX,IAAwBT,cAAc,CAACI,QAAvC,EAAiD;AAC/CK,iBAAS,CAACR,cAAV,CAAyBC,IAAzB;AACD;AACF;AAPI,GAAP;AASF","names":["useNodeExpandEventBroadcast","props","parentNodeMap","inject","currentNodeMap","treeNodeExpand","node","collapse","children","push","provide","broadcastExpanded","accordion","childNode"],"sources":["../../../../../../../packages/components/tree/src/model/useNodeExpandEventBroadcast.ts"],"sourcesContent":["import { inject, provide } from 'vue'\nimport type Node from '../model/node'\n\ninterface NodeMap {\n  treeNodeExpand(node: Node): void\n  children: NodeMap[]\n}\n\nexport function useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject<NodeMap>('TreeNodeMap', null)\n  const currentNodeMap: NodeMap = {\n    treeNodeExpand: (node) => {\n      if (props.node !== node) {\n        props.node.collapse()\n      }\n    },\n    children: [],\n  }\n\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap)\n  }\n\n  provide('TreeNodeMap', currentNodeMap)\n\n  return {\n    broadcastExpanded: (node: Node): void => {\n      if (!props.accordion) return\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node)\n      }\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}