{"ast":null,"code":"let history = [];\n\nfunction Point(x, y, type) {\n  this.x = x;\n  this.y = y;\n  this.type = type; // 左击 1  右击 3\n}\n\nfunction windowToCanvas(e, mycanvas) {\n  // 返回元素的大小以及位置\n  let rect = mycanvas.getBoundingClientRect(); // rect 的宽度会加上 canvas 的 border 会影响精度\n\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width), e.offsetY - rect.top * (mycanvas.height / rect.height), e.which);\n}\n\nfunction showLastHistory(ctx, history) {\n  ctx.putImageData(history[history.length - 1].data, 0, 0);\n}\n\nfunction addHistoy(history, ctx, mycanvas) {\n  console.log(\"存历史\");\n  console.log(history);\n  history.push({\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\n  });\n}\n\nexport default {\n  name: \"Canvas\",\n\n  data() {\n    return {\n      dialogVisible: false,\n      ctx: null,\n      mycanvas: null,\n      textarea: '',\n      tool: '',\n      imgUrl: '',\n      tempPos: [],\n      posArray: [],\n      form: [],\n      Cwidth: window.screen.width * 0.5,\n      Cheight: window.screen.height * 0.75,\n      tools: [{\n        value: \"3\",\n        label: \"直线\"\n      }, {\n        value: \"1\",\n        label: \"矩形\"\n      }, {\n        value: \"2\",\n        label: \"圆形\"\n      }, {\n        value: \"4\",\n        label: \"任意多边形\"\n      }, {\n        value: \"5\",\n        label: \"点\"\n      }],\n      point: [],\n      JD: ''\n    };\n  },\n\n  mounted() {\n    //this.();\n    let str = sessionStorage.getItem(\"img\") || \"{}\";\n    console.log(str);\n    this.form = JSON.parse(str);\n    this.mycanvas = this.$refs.cont;\n    this.ctx = this.mycanvas.getContext('2d');\n    this.mycanvas.width = window.screen.width * 0.5;\n    this.mycanvas.height = window.screen.height * 0.75;\n    console.log(\"mounted\");\n    console.log(this.form);\n    this.drawImg();\n    this.drawer();\n    this.getAngle();\n  },\n\n  methods: {\n    handleEvent(e) {\n      //console.log(e)\n      this.drawer();\n    },\n\n    changeTool() {\n      this.point = [];\n      this.drawer();\n    },\n\n    drawImg() {\n      let img = new Image();\n      img.src = this.form.img;\n      console.log(img.src);\n      console.log(this.form);\n      img.crossOrigin = '';\n\n      img.onload = () => {\n        this.ctx.drawImage(img, this.Cwidth / 4, 0, 400, this.Cheight);\n      };\n    },\n\n    getTan(p1, p2, p3, p4) {\n      let k1 = (p2.y - p1.y) / (p2.x - p1.x);\n      let k2 = (p4.y - p3.y) / (p4.x - p3.x);\n      let tan = (k1 - k2) / (1 + k1 * k2);\n      return Math.abs(tan);\n    },\n\n    myAngle(tan) {\n      //Math.atan,传入tan值，计算弧度，角度等于弧度乘以180/π\n      let result = Math.atan(tan) * 180 / Math.PI; // let result2 = Math.atan(0.169) * 180 / Math.PI;\n      // console.log(result2)\n\n      return result;\n    },\n\n    getAngle() {\n      this.myAngle(0.502);\n    },\n\n    init(form) {\n      console.log(form);\n      this.textarea = form.result;\n      this.imgUrl = form.img;\n      this.form = form;\n      console.log(this.imgUrl);\n      console.log(this.textarea);\n      console.log(this.form);\n      this.drawImg();\n      this.drawer();\n    },\n\n    // 绘制矩形\n    drawerRect(ctx, left, top, w, h) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(left, top, w, h);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [left, top, w, h]\n      };\n    },\n\n    // 绘制圆\n    drawerCircle(ctx, x, y, r) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.beginPath(); // 开始路径\n\n      ctx.arc(x, y, r, 0, Math.PI * 2, true); // 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\n\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, r]\n      };\n    },\n\n    // 绘制直线\n    drawerLine(ctx, x, y, z, n) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(z, n);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, z, n]\n      };\n    },\n\n    // 绘制点\n    drawerPoint(ctx, x, y) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.arc(x, y, 2, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n      this.posArray.push({\n        data: [x, y]\n      });\n    },\n\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\n    drawer() {\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      let that = this;\n      console.log(\"外\");\n      console.log(this);\n      console.log(that);\n      console.log(this.tool);\n\n      if (that.tool === '1') {\n        //画矩形\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          console.log(\"里\");\n          console.log(this);\n          console.log(that);\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let w = Math.abs(point.x - mousedown.x);\n            let h = Math.abs(point.y - mousedown.y);\n            let left = point.x > mousedown.x ? mousedown.x : point.x;\n            let top = point.y > mousedown.y ? mousedown.y : point.y;\n            let pos = that.drawerRect(ctx, left, top, w, h);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '2') {\n        // 画圆\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let rx = (point.x - mousedown.x) / 2;\n            let ry = (point.y - mousedown.y) / 2;\n            let r = Math.sqrt(rx * rx + ry * ry);\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '3') {\n        //画直线\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n          console.log(\"鼠标点击\");\n          console.log(mousedown);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            let mouseup = windowToCanvas(e, mycanvas);\n            console.log(\"鼠标松开\");\n            console.log(mouseup);\n            that.point.push(mouseup);\n            that.point.push(mousedown);\n            console.log(that.point);\n            this.point = that.point;\n            console.log(this.point);\n            let l = that.point.length;\n\n            if (l >= 4) {\n              let tan = that.getTan(that.point[l - 4], that.point[l - 3], that.point[l - 2], that.point[l - 1]);\n              let JD = that.myAngle(tan);\n              that.JD = Math.round(JD * 1000) / 1000; //取小数点后三位\n\n              console.log(JD); //that.point = []\n            }\n\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '4') {\n        //画多边形\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (e) {\n          let point = windowToCanvas(e, mycanvas);\n          that.drawerPoint(ctx, point.x, point.y);\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '5') {\n        //画点\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (event) {\n          let rect = mycanvas.getBoundingClientRect();\n          console.log(rect);\n          let CanvasPos = {\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\n          };\n          console.log(CanvasPos);\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y);\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      }\n    },\n\n    // 重置\n    resetMap() {\n      // 标注的信息都放在这个数组中\n      this.posArray = [];\n      history = [history[0]];\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height);\n      addHistoy(history, ctx, mycanvas);\n      this.drawImg();\n      this.tool = '';\n      this.point = [];\n    },\n\n    // 取消上一步操作\n    cancel() {\n      if (history.length > 1) {\n        console.log(\"取消上一步\");\n        console.log(history);\n        this.posArray.pop();\n        history.pop();\n        console.log(this.point);\n        console.log(this.JD);\n        this.point.pop();\n        this.point.pop();\n        console.log(this.point);\n        let mycanvas = this.$refs.cont;\n        let ctx = mycanvas.getContext('2d');\n        showLastHistory(ctx, history);\n      } else {\n        this.drawImg();\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["history","Point","x","y","type","windowToCanvas","e","mycanvas","rect","getBoundingClientRect","offsetX","left","width","offsetY","top","height","which","showLastHistory","ctx","putImageData","length","data","addHistoy","console","log","push","getImageData","name","dialogVisible","textarea","tool","imgUrl","tempPos","posArray","form","Cwidth","window","screen","Cheight","tools","value","label","point","JD","mounted","str","sessionStorage","getItem","JSON","parse","$refs","cont","getContext","drawImg","drawer","getAngle","methods","handleEvent","changeTool","img","Image","src","crossOrigin","onload","drawImage","getTan","p1","p2","p3","p4","k1","k2","tan","Math","abs","myAngle","result","atan","PI","init","drawerRect","w","h","strokeStyle","lineWidth","save","beginPath","stroke","restore","drawerCircle","r","arc","drawerLine","z","n","fillStyle","moveTo","lineTo","drawerPoint","closePath","fill","that","onclick","onmousedown","preventDefault","mousedown","onmousemove","pos","onmouseup","rx","ry","sqrt","mouseup","l","round","event","CanvasPos","clientX","clientY","resetMap","clearRect","cancel","pop"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-row>\r\n      <el-col :span=\"12\">\r\n        <!--canvas居中：display设置为block-->\r\n        <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n                @click=\"handleEvent\"\r\n        >\r\n        </canvas>\r\n      </el-col>\r\n      <el-col :span=\"2\" style=\"margin-left: 20px\">\r\n        <span>专家意见：</span>\r\n      </el-col>\r\n      <el-col :span=\"9\" style=\"text-align:left\">\r\n        <el-input\r\n            type=\"textarea\"\r\n            :rows=\"30\"\r\n            placeholder=\"请输入内容\"\r\n            v-model=\"this.form.result\">\r\n        </el-input>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div style=\"margin: 10px 0px;display: flex\">\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"cancel\">撤销</el-button>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"resetMap\">清空</el-button>\r\n    <span style=\"margin-left: 5px\">选择绘制图案：</span>\r\n    <el-select v-model=\"tool\" clearable @change=\"changeTool\"\r\n               size=\"small\">\r\n      <el-option\r\n          v-for=\"item in tools\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\">\r\n      </el-option>\r\n    </el-select>\r\n    <span style=\"margin-left: 5px;text-align:right;\">最新两条直线的夹角为：{{JD}}</span>\r\n    <span v-show=\"JD\">°</span>\r\n  </div>\r\n\r\n  <div style=\"display: block\">\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  let rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width),\r\n      e.offsetY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  console.log(\"存历史\")\r\n  console.log(history)\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      dialogVisible:false,\r\n      ctx:null,\r\n      mycanvas:null,\r\n      textarea:'',\r\n      tool:'',\r\n      imgUrl:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n      form:[],\r\n      Cwidth:(window.screen.width)*0.5,\r\n      Cheight:(window.screen.height)*0.75,\r\n      tools:[\r\n        {value:\"3\", label:\"直线\"},\r\n        {value:\"1\", label:\"矩形\"},\r\n        {value:\"2\", label:\"圆形\"},\r\n        {value:\"4\", label:\"任意多边形\"},\r\n        {value:\"5\", label:\"点\"},\r\n      ],\r\n      point:[],\r\n      JD:'',\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.();\r\n    let str = sessionStorage.getItem(\"img\") || \"{}\"\r\n    console.log(str)\r\n    this.form = JSON.parse(str)\r\n\r\n    this.mycanvas = this.$refs.cont\r\n    this.ctx = this.mycanvas.getContext('2d');\r\n    this.mycanvas.width = (window.screen.width)*0.5\r\n    this.mycanvas.height = (window.screen.height)*0.75\r\n    console.log(\"mounted\")\r\n    console.log(this.form)\r\n    this.drawImg()\r\n    this.drawer();\r\n    this.getAngle();\r\n\r\n  },\r\n\r\n  methods:{\r\n\r\n    handleEvent(e){\r\n      //console.log(e)\r\n      this.drawer();\r\n    },\r\n    changeTool(){\r\n      this.point = [];\r\n      this.drawer();\r\n    },\r\n\r\n    drawImg(){\r\n      let img = new Image();\r\n      img.src = this.form.img;\r\n      console.log(img.src)\r\n      console.log(this.form)\r\n      img.crossOrigin = '';\r\n      img.onload = () => {\r\n        this.ctx.drawImage(img, this.Cwidth/4, 0, 400, this.Cheight);\r\n      }\r\n    },\r\n\r\n    getTan(p1,p2,p3,p4){\r\n      let k1 = (p2.y - p1.y) / (p2.x - p1.x)\r\n      let k2 = (p4.y - p3.y) / (p4.x - p3.x)\r\n\r\n      let tan = (k1-k2) / (1+k1*k2)\r\n      return Math.abs(tan);\r\n    },\r\n\r\n    myAngle(tan){\r\n      //Math.atan,传入tan值，计算弧度，角度等于弧度乘以180/π\r\n      let result = Math.atan(tan) * 180 / Math.PI;\r\n      // let result2 = Math.atan(0.169) * 180 / Math.PI;\r\n      // console.log(result2)\r\n      return result;\r\n    },\r\n\r\n    getAngle(){\r\n      this.myAngle(0.502);\r\n    },\r\n\r\n    init(form){\r\n      console.log(form)\r\n      this.textarea = form.result\r\n      this.imgUrl = form.img\r\n      this.form = form\r\n      console.log(this.imgUrl)\r\n      console.log(this.textarea)\r\n      console.log(this.form)\r\n\r\n      this.drawImg()\r\n      this.drawer();\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 2, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      let that = this\r\n      console.log(\"外\")\r\n      console.log(this)\r\n      console.log(that)\r\n      console.log(this.tool)\r\n      if (that.tool === '1') {\r\n        //画矩形\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          console.log(\"里\")\r\n          console.log(this)\r\n          console.log(that)\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '2') {\r\n        // 画圆\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '3') {\r\n        //画直线\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          console.log(\"鼠标点击\")\r\n          console.log(mousedown)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            let mouseup = windowToCanvas(e, mycanvas)\r\n            console.log(\"鼠标松开\")\r\n            console.log(mouseup)\r\n            that.point.push(mouseup)\r\n            that.point.push(mousedown)\r\n            console.log(that.point)\r\n            this.point = that.point\r\n            console.log(this.point)\r\n            let l = that.point.length\r\n            if(l >= 4){\r\n              let tan = that.getTan(that.point[l-4],that.point[l-3],that.point[l-2],that.point[l-1])\r\n              let JD = that.myAngle(tan)\r\n              that.JD = Math.round(JD*1000)/1000  //取小数点后三位\r\n              console.log(JD)\r\n              //that.point = []\r\n            }\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '4') {\r\n        //画多边形\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (e) {\r\n          let point = windowToCanvas(e, mycanvas)\r\n          that.drawerPoint(ctx, point.x, point.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '5') {\r\n        //画点\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let rect = mycanvas.getBoundingClientRect()\r\n          console.log(rect)\r\n          let CanvasPos = {\r\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\r\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\r\n          }\r\n          console.log(CanvasPos)\r\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n      this.drawImg();\r\n      this.tool = '';\r\n      this.point = []\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        console.log(\"取消上一步\")\r\n        console.log(history)\r\n        this.posArray.pop()\r\n        history.pop()\r\n        console.log(this.point)\r\n        console.log(this.JD)\r\n        this.point.pop()\r\n        this.point.pop()\r\n        console.log(this.point)\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }else{\r\n        this.drawImg();\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}