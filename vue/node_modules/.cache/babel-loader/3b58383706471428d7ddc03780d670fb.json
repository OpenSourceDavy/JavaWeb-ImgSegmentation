{"ast":null,"code":"import { isClient, unrefElement } from '@vueuse/core';\n\nconst buildPopperOptions = (props, arrowProps) => {\n  const {\n    placement,\n    strategy,\n    popperOptions\n  } = props;\n  const options = {\n    placement,\n    strategy,\n    ...popperOptions,\n    modifiers: genModifiers(props)\n  };\n  attachArrow(options, arrowProps);\n  deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);\n  return options;\n};\n\nconst unwrapMeasurableEl = $el => {\n  if (!isClient) return;\n  return unrefElement($el);\n};\n\nfunction genModifiers(options) {\n  const {\n    offset,\n    gpuAcceleration,\n    fallbackPlacements\n  } = options;\n  return [{\n    name: \"offset\",\n    options: {\n      offset: [0, offset != null ? offset : 12]\n    }\n  }, {\n    name: \"preventOverflow\",\n    options: {\n      padding: {\n        top: 2,\n        bottom: 2,\n        left: 5,\n        right: 5\n      }\n    }\n  }, {\n    name: \"flip\",\n    options: {\n      padding: 5,\n      fallbackPlacements: fallbackPlacements != null ? fallbackPlacements : []\n    }\n  }, {\n    name: \"computeStyles\",\n    options: {\n      gpuAcceleration,\n      adaptive: gpuAcceleration\n    }\n  }];\n}\n\nfunction attachArrow(options, {\n  arrowEl,\n  arrowOffset\n}) {\n  options.modifiers.push({\n    name: \"arrow\",\n    options: {\n      element: arrowEl,\n      padding: arrowOffset != null ? arrowOffset : 5\n    }\n  });\n}\n\nfunction deriveExtraModifiers(options, modifiers) {\n  if (modifiers) {\n    options.modifiers = [...options.modifiers, ...(modifiers != null ? modifiers : [])];\n  }\n}\n\nexport { buildPopperOptions, unwrapMeasurableEl };","map":{"version":3,"mappings":";;AACY,MAACA,kBAAkB,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AACvD,QAAM;AAAEC,aAAF;AAAaC,YAAb;AAAuBC;AAAvB,MAAyCJ,KAA/C;AACA,QAAMK,OAAO,GAAG;AACdH,aADc;AAEdC,YAFc;AAGd,OAAGC,aAHW;AAIdE,aAAS,EAAEC,YAAY,CAACP,KAAD;AAJT,GAAhB;AAMAQ,aAAW,CAACH,OAAD,EAAUJ,UAAV,CAAX;AACAQ,sBAAoB,CAACJ,OAAD,EAAUD,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACE,SAAzD,CAApB;AACA,SAAOD,OAAP;AACF,CAXY;;AAYA,MAACK,kBAAkB,GAAIC,GAAD,IAAS;AACzC,MAAI,CAACC,QAAL,EACE;AACF,SAAOC,YAAY,CAACF,GAAD,CAAnB;AACF,CAJY;;AAKZ,SAASJ,YAAT,CAAsBF,OAAtB,EAA+B;AAC7B,QAAM;AAAES,UAAF;AAAUC,mBAAV;AAA2BC;AAA3B,MAAkDX,OAAxD;AACA,SAAO,CACL;AACEY,QAAI,EAAE,QADR;AAEEZ,WAAO,EAAE;AACPS,YAAM,EAAE,CAAC,CAAD,EAAIA,MAAM,IAAI,IAAV,GAAiBA,MAAjB,GAA0B,EAA9B;AADD;AAFX,GADK,EAOL;AACEG,QAAI,EAAE,iBADR;AAEEZ,WAAO,EAAE;AACPa,aAAO,EAAE;AACPC,WAAG,EAAE,CADE;AAEPC,cAAM,EAAE,CAFD;AAGPC,YAAI,EAAE,CAHC;AAIPC,aAAK,EAAE;AAJA;AADF;AAFX,GAPK,EAkBL;AACEL,QAAI,EAAE,MADR;AAEEZ,WAAO,EAAE;AACPa,aAAO,EAAE,CADF;AAEPF,wBAAkB,EAAEA,kBAAkB,IAAI,IAAtB,GAA6BA,kBAA7B,GAAkD;AAF/D;AAFX,GAlBK,EAyBL;AACEC,QAAI,EAAE,eADR;AAEEZ,WAAO,EAAE;AACPU,qBADO;AAEPQ,cAAQ,EAAER;AAFH;AAFX,GAzBK,CAAP;AAiCD;;AACD,SAASP,WAAT,CAAqBH,OAArB,EAA8B;AAAEmB,SAAF;AAAWC;AAAX,CAA9B,EAAwD;AACtDpB,SAAO,CAACC,SAAR,CAAkBoB,IAAlB,CAAuB;AACrBT,QAAI,EAAE,OADe;AAErBZ,WAAO,EAAE;AACPsB,aAAO,EAAEH,OADF;AAEPN,aAAO,EAAEO,WAAW,IAAI,IAAf,GAAsBA,WAAtB,GAAoC;AAFtC;AAFY,GAAvB;AAOD;;AACD,SAAShB,oBAAT,CAA8BJ,OAA9B,EAAuCC,SAAvC,EAAkD;AAChD,MAAIA,SAAJ,EAAe;AACbD,WAAO,CAACC,SAAR,GAAoB,CAAC,GAAGD,OAAO,CAACC,SAAZ,EAAuB,IAAGA,SAAS,IAAI,IAAb,GAAoBA,SAApB,GAAgC,EAAnC,CAAvB,CAApB;AACD;AACH","names":["buildPopperOptions","props","arrowProps","placement","strategy","popperOptions","options","modifiers","genModifiers","attachArrow","deriveExtraModifiers","unwrapMeasurableEl","$el","isClient","unrefElement","offset","gpuAcceleration","fallbackPlacements","name","padding","top","bottom","left","right","adaptive","arrowEl","arrowOffset","push","element"],"sources":["../../../../../../packages/components/popper/src/utils.ts"],"sourcesContent":["import { isClient, unrefElement } from '@vueuse/core'\n\nimport type { ComponentPublicInstance } from 'vue'\nimport type { MaybeRef } from '@vueuse/core'\nimport type { Measurable } from '@element-plus/tokens'\nimport type { UsePopperCoreConfigProps } from './content'\n\ntype ArrowProps = {\n  arrowEl: HTMLElement | undefined\n  arrowOffset: number | undefined\n}\n\nexport const buildPopperOptions = (\n  props: UsePopperCoreConfigProps,\n  arrowProps: ArrowProps\n) => {\n  const { placement, strategy, popperOptions } = props\n  const options = {\n    placement,\n    strategy,\n    ...popperOptions,\n    modifiers: genModifiers(props),\n  }\n\n  attachArrow(options, arrowProps)\n  deriveExtraModifiers(options, popperOptions?.modifiers)\n  return options\n}\n\nexport const unwrapMeasurableEl = (\n  $el: MaybeRef<Measurable | undefined | ComponentPublicInstance>\n) => {\n  if (!isClient) return\n  return unrefElement($el as HTMLElement)\n}\n\nfunction genModifiers(options: UsePopperCoreConfigProps) {\n  const { offset, gpuAcceleration, fallbackPlacements } = options\n  return [\n    {\n      name: 'offset',\n      options: {\n        offset: [0, offset ?? 12],\n      },\n    },\n    {\n      name: 'preventOverflow',\n      options: {\n        padding: {\n          top: 2,\n          bottom: 2,\n          left: 5,\n          right: 5,\n        },\n      },\n    },\n    {\n      name: 'flip',\n      options: {\n        padding: 5,\n        fallbackPlacements: fallbackPlacements ?? [],\n      },\n    },\n    {\n      name: 'computeStyles',\n      options: {\n        gpuAcceleration,\n        adaptive: gpuAcceleration,\n      },\n    },\n  ]\n}\n\nfunction attachArrow(options: any, { arrowEl, arrowOffset }: ArrowProps) {\n  options.modifiers.push({\n    name: 'arrow',\n    options: {\n      element: arrowEl,\n      padding: arrowOffset ?? 5,\n    },\n  } as any)\n}\n\nfunction deriveExtraModifiers(\n  options: any,\n  modifiers: UsePopperCoreConfigProps['popperOptions']['modifiers']\n) {\n  if (modifiers) {\n    options.modifiers = [...options.modifiers, ...(modifiers ?? [])]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}