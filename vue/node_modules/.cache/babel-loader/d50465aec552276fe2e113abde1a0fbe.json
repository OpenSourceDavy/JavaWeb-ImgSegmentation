{"ast":null,"code":"import { defineComponent, inject, computed, createVNode } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { rowContextKey } from '../../../tokens/row.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst colProps = buildProps({\n  tag: {\n    type: String,\n    default: \"div\"\n  },\n  span: {\n    type: Number,\n    default: 24\n  },\n  offset: {\n    type: Number,\n    default: 0\n  },\n  pull: {\n    type: Number,\n    default: 0\n  },\n  push: {\n    type: Number,\n    default: 0\n  },\n  xs: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  sm: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  md: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  lg: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  xl: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  }\n});\nvar Col = defineComponent({\n  name: \"ElCol\",\n  props: colProps,\n\n  setup(props, {\n    slots\n  }) {\n    const {\n      gutter\n    } = inject(rowContextKey, {\n      gutter: computed(() => 0)\n    });\n    const ns = useNamespace(\"col\");\n    const style = computed(() => {\n      if (gutter.value) {\n        return {\n          paddingLeft: `${gutter.value / 2}px`,\n          paddingRight: `${gutter.value / 2}px`\n        };\n      }\n\n      return {};\n    });\n    const classes = computed(() => {\n      const classes2 = [];\n      const pos = [\"span\", \"offset\", \"pull\", \"push\"];\n      pos.forEach(prop => {\n        const size = props[prop];\n\n        if (typeof size === \"number\") {\n          if (prop === \"span\") classes2.push(ns.b(`${props[prop]}`));else if (size > 0) classes2.push(ns.b(`${prop}-${props[prop]}`));\n        }\n      });\n      const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"];\n      sizes.forEach(size => {\n        if (typeof props[size] === \"number\") {\n          classes2.push(ns.b(`${size}-${props[size]}`));\n        } else if (typeof props[size] === \"object\") {\n          const sizeProps = props[size];\n          Object.keys(sizeProps).forEach(prop => {\n            classes2.push(prop !== \"span\" ? ns.b(`${size}-${prop}-${sizeProps[prop]}`) : ns.b(`${size}-${sizeProps[prop]}`));\n          });\n        }\n      });\n\n      if (gutter.value) {\n        classes2.push(ns.is(\"guttered\"));\n      }\n\n      return classes2;\n    });\n    return () => createVNode(props.tag, {\n      \"class\": [ns.b(), classes.value],\n      \"style\": style.value\n    }, slots);\n  }\n\n});\nexport { colProps, Col as default };","map":{"version":3,"mappings":"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","names":["colProps","buildProps","tag","type","String","default","span","Number","offset","pull","push","xs","definePropType","Object","mutable","sm","md","lg","xl","defineComponent","name","props","setup","slots","gutter","inject","computed","rowContextKey","ns","useNamespace","style","paddingLeft","value","pos","classes","prop","size","classes2","b","sizes","forEach","sizeProps","keys"],"sources":["../../../../../../packages/components/col/src/col.tsx"],"sourcesContent":["import { computed, defineComponent, inject } from 'vue'\nimport { buildProps, definePropType, mutable } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { rowContextKey } from '@element-plus/tokens'\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\n\nexport type ColSizeObject = {\n  span?: number\n  offset?: number\n}\nexport type ColSize = number | ColSizeObject\n\nexport const colProps = buildProps({\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  span: {\n    type: Number,\n    default: 24,\n  },\n  offset: {\n    type: Number,\n    default: 0,\n  },\n  pull: {\n    type: Number,\n    default: 0,\n  },\n  push: {\n    type: Number,\n    default: 0,\n  },\n  xs: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  sm: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  md: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  lg: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  xl: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n} as const)\nexport type ColProps = ExtractPropTypes<typeof colProps>\n\nexport default defineComponent({\n  name: 'ElCol',\n  props: colProps,\n\n  setup(props, { slots }) {\n    const { gutter } = inject(rowContextKey, { gutter: computed(() => 0) })\n    const ns = useNamespace('col')\n\n    const style = computed<CSSProperties>(() => {\n      if (gutter.value) {\n        return {\n          paddingLeft: `${gutter.value / 2}px`,\n          paddingRight: `${gutter.value / 2}px`,\n        }\n      }\n      return {}\n    })\n\n    const classes = computed(() => {\n      const classes: string[] = []\n\n      const pos = ['span', 'offset', 'pull', 'push'] as const\n      pos.forEach((prop) => {\n        const size = props[prop]\n        if (typeof size === 'number') {\n          if (prop === 'span') classes.push(ns.b(`${props[prop]}`))\n          else if (size > 0) classes.push(ns.b(`${prop}-${props[prop]}`))\n        }\n      })\n\n      const sizes = ['xs', 'sm', 'md', 'lg', 'xl'] as const\n      sizes.forEach((size) => {\n        if (typeof props[size] === 'number') {\n          classes.push(ns.b(`${size}-${props[size]}`))\n        } else if (typeof props[size] === 'object') {\n          const sizeProps = props[size]\n          Object.keys(sizeProps).forEach((prop) => {\n            classes.push(\n              prop !== 'span'\n                ? ns.b(`${size}-${prop}-${sizeProps[prop]}`)\n                : ns.b(`${size}-${sizeProps[prop]}`)\n            )\n          })\n        }\n      })\n      // this is for the fix\n      if (gutter.value) {\n        classes.push(ns.is('guttered'))\n      }\n\n      return classes\n    })\n\n    return () => (\n      <props.tag\n        v-slots={slots}\n        class={[ns.b(), classes.value]}\n        style={style.value}\n      />\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}