{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, createElementVNode, openBlock, createElementBlock, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSlPanel\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const cursorTop = ref(0);\n    const cursorLeft = ref(0);\n    const background = ref(\"hsl(0, 100%, 50%)\");\n    const colorValue = computed(() => {\n      const hue = props.color.get(\"hue\");\n      const value = props.color.get(\"value\");\n      return {\n        hue,\n        value\n      };\n    });\n\n    function update() {\n      const saturation = props.color.get(\"saturation\");\n      const value = props.color.get(\"value\");\n      const el = instance.vnode.el;\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = el;\n      cursorLeft.value = saturation * width / 100;\n      cursorTop.value = (100 - value) * height / 100;\n      background.value = `hsl(${props.color.get(\"hue\")}, 100%, 50%)`;\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let left = clientX - rect.left;\n      let top = clientY - rect.top;\n      left = Math.max(0, left);\n      left = Math.min(left, rect.width);\n      top = Math.max(0, top);\n      top = Math.min(top, rect.height);\n      cursorLeft.value = left;\n      cursorTop.value = top;\n      props.color.set({\n        saturation: left / rect.width * 100,\n        value: 100 - top / rect.height * 100\n      });\n    }\n\n    watch(() => colorValue.value, () => {\n      update();\n    });\n    onMounted(() => {\n      draggable(instance.vnode.el, {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      });\n      update();\n    });\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update\n    };\n  }\n\n});\n\nconst _hoisted_1 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__white\"\n}, null, -1);\n\nconst _hoisted_2 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__black\"\n}, null, -1);\n\nconst _hoisted_3 = /* @__PURE__ */createElementVNode(\"div\", null, null, -1);\n\nconst _hoisted_4 = [_hoisted_3];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"el-color-svpanel\",\n    style: normalizeStyle({\n      backgroundColor: _ctx.background\n    })\n  }, [_hoisted_1, _hoisted_2, createElementVNode(\"div\", {\n    class: \"el-color-svpanel__cursor\",\n    style: normalizeStyle({\n      top: _ctx.cursorTop + \"px\",\n      left: _ctx.cursorLeft + \"px\"\n    })\n  }, _hoisted_4, 4)], 4);\n}\n\nvar SvPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/sv-panel.vue\"]]);\n\nexport { SvPanel as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","setup","instance","getCurrentInstance","ref","computed","hue","get","value","saturation","vnode","el","clientWidth","width","clientHeight","height","cursorLeft","cursorTop","background","event","getBoundingClientRect","clientX","clientY","getClientXY","rect","left","max","Math","top","set","watch","colorValue","update","onMounted","draggable","drag","handleDrag","end","_createElementVNode","class","_hoisted_3","_createElementBlock","style","backgroundColor","_hoisted_1","_hoisted_2","_ctx"],"sources":["../../../../../../../packages/components/color-picker/src/components/sv-panel.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-color-svpanel\"\n    :style=\"{\n      backgroundColor: background,\n    }\"\n  >\n    <div class=\"el-color-svpanel__white\" />\n    <div class=\"el-color-svpanel__black\" />\n    <div\n      class=\"el-color-svpanel__cursor\"\n      :style=\"{\n        top: cursorTop + 'px',\n        left: cursorLeft + 'px',\n      }\"\n    >\n      <div />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElSlPanel',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    // instance\n    const instance = getCurrentInstance()\n    // data\n    const cursorTop = ref(0)\n    const cursorLeft = ref(0)\n    const background = ref('hsl(0, 100%, 50%)')\n    const colorValue = computed(() => {\n      const hue = props.color.get('hue')\n      const value = props.color.get('value')\n      return { hue, value }\n    })\n\n    // methods\n    function update() {\n      const saturation = props.color.get('saturation')\n      const value = props.color.get('value')\n\n      const el = instance.vnode.el\n      const { clientWidth: width, clientHeight: height } = el\n\n      cursorLeft.value = (saturation * width) / 100\n      cursorTop.value = ((100 - value) * height) / 100\n\n      background.value = `hsl(${props.color.get('hue')}, 100%, 50%)`\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      let left = clientX - rect.left\n      let top = clientY - rect.top\n      left = Math.max(0, left)\n      left = Math.min(left, rect.width)\n\n      top = Math.max(0, top)\n      top = Math.min(top, rect.height)\n\n      cursorLeft.value = left\n      cursorTop.value = top\n      props.color.set({\n        saturation: (left / rect.width) * 100,\n        value: 100 - (top / rect.height) * 100,\n      })\n    }\n\n    // watch\n    watch(\n      () => colorValue.value,\n      () => {\n        update()\n      }\n    )\n    // mounted\n    onMounted(() => {\n      draggable(instance.vnode.el as HTMLElement, {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      })\n\n      update()\n    })\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}