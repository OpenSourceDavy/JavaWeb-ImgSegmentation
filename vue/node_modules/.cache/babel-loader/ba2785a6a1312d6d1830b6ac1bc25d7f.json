{"ast":null,"code":"import { defineComponent, reactive, computed, toRefs, provide, watch, ref, onMounted, nextTick, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createVNode, createBlock, createCommentVNode, Fragment, renderList } from 'vue';\nimport { ElInputNumber } from '../../input-number/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport SliderButton from './button.mjs';\nimport SliderMarker from './marker.mjs';\nimport { useMarks } from './useMarks.mjs';\nimport { useSlide } from './useSlide.mjs';\nimport { useStops } from './useStops.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { throwError, debugWarn } from '../../../utils/error.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSlider\",\n  components: {\n    ElInputNumber,\n    SliderButton,\n    SliderMarker\n  },\n  props: {\n    modelValue: {\n      type: [Number, Array],\n      default: 0\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    showInput: {\n      type: Boolean,\n      default: false\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    inputSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    showStops: {\n      type: Boolean,\n      default: false\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true\n    },\n    formatTooltip: {\n      type: Function,\n      default: void 0\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    range: {\n      type: Boolean,\n      default: false\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String,\n      default: \"\"\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    label: {\n      type: String,\n      default: void 0\n    },\n    tooltipClass: {\n      type: String,\n      default: void 0\n    },\n    marks: Object\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT],\n\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"slider\");\n    const initData = reactive({\n      firstValue: 0,\n      secondValue: 0,\n      oldValue: 0,\n      dragging: false,\n      sliderSize: 1\n    });\n    const {\n      elFormItem,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      minValue,\n      maxValue,\n      runwayStyle,\n      barStyle,\n      resetSize,\n      emitChange,\n      onSliderClick,\n      setFirstValue,\n      setSecondValue\n    } = useSlide(props, initData, emit);\n    const {\n      stops,\n      getStopStyle\n    } = useStops(props, initData, minValue, maxValue);\n    const sliderWrapperSize = useSize();\n    const sliderInputSize = computed(() => props.inputSize || sliderWrapperSize.value);\n    const sliderKls = computed(() => [ns.b(), ns.m(sliderWrapperSize.value), ns.is(\"vertical\", props.vertical), {\n      [ns.m(\"with-input\")]: props.showInput\n    }]);\n    const markList = useMarks(props);\n    useWatch(props, initData, minValue, maxValue, emit, elFormItem);\n    const precision = computed(() => {\n      const precisions = [props.min, props.max, props.step].map(item => {\n        const decimal = `${item}`.split(\".\")[1];\n        return decimal ? decimal.length : 0;\n      });\n      return Math.max.apply(null, precisions);\n    });\n    const {\n      sliderWrapper\n    } = useLifecycle(props, initData, resetSize);\n    const {\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize\n    } = toRefs(initData);\n\n    const updateDragging = val => {\n      initData.dragging = val;\n    };\n\n    provide(\"SliderProvider\", { ...toRefs(props),\n      sliderSize,\n      disabled: sliderDisabled,\n      precision,\n      emitChange,\n      resetSize,\n      updateDragging\n    });\n    return {\n      ns,\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      runwayStyle,\n      barStyle,\n      emitChange,\n      onSliderClick,\n      getStopStyle,\n      setFirstValue,\n      setSecondValue,\n      stops,\n      markList,\n      sliderWrapper,\n      sliderWrapperSize,\n      sliderInputSize,\n      sliderKls\n    };\n  }\n\n});\n\nconst useWatch = (props, initData, minValue, maxValue, emit, elFormItem) => {\n  const _emit = val => {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n\n  const valueChanged = () => {\n    if (props.range) {\n      return ![minValue.value, maxValue.value].every((item, index) => item === initData.oldValue[index]);\n    } else {\n      return props.modelValue !== initData.oldValue;\n    }\n  };\n\n  const setValues = () => {\n    var _a, _b;\n\n    if (props.min > props.max) {\n      throwError(\"Slider\", \"min should not be greater than max.\");\n      return;\n    }\n\n    const val = props.modelValue;\n\n    if (props.range && Array.isArray(val)) {\n      if (val[1] < props.min) {\n        _emit([props.min, props.min]);\n      } else if (val[0] > props.max) {\n        _emit([props.max, props.max]);\n      } else if (val[0] < props.min) {\n        _emit([props.min, val[1]]);\n      } else if (val[1] > props.max) {\n        _emit([val[0], props.max]);\n      } else {\n        initData.firstValue = val[0];\n        initData.secondValue = val[1];\n\n        if (valueChanged()) {\n          (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n          initData.oldValue = val.slice();\n        }\n      }\n    } else if (!props.range && typeof val === \"number\" && !Number.isNaN(val)) {\n      if (val < props.min) {\n        _emit(props.min);\n      } else if (val > props.max) {\n        _emit(props.max);\n      } else {\n        initData.firstValue = val;\n\n        if (valueChanged()) {\n          (_b = elFormItem.validate) == null ? void 0 : _b.call(elFormItem, \"change\").catch(err => debugWarn(err));\n          initData.oldValue = val;\n        }\n      }\n    }\n  };\n\n  setValues();\n  watch(() => initData.dragging, val => {\n    if (!val) {\n      setValues();\n    }\n  });\n  watch(() => props.modelValue, (val, oldVal) => {\n    if (initData.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every((item, index) => item === oldVal[index]) && initData.firstValue === val[0] && initData.secondValue === val[1]) {\n      return;\n    }\n\n    setValues();\n  }, {\n    deep: true\n  });\n  watch(() => [props.min, props.max], () => {\n    setValues();\n  });\n};\n\nconst useLifecycle = (props, initData, resetSize) => {\n  const sliderWrapper = ref(null);\n  onMounted(async () => {\n    let valuetext;\n\n    if (props.range) {\n      if (Array.isArray(props.modelValue)) {\n        initData.firstValue = Math.max(props.min, props.modelValue[0]);\n        initData.secondValue = Math.min(props.max, props.modelValue[1]);\n      } else {\n        initData.firstValue = props.min;\n        initData.secondValue = props.max;\n      }\n\n      initData.oldValue = [initData.firstValue, initData.secondValue];\n      valuetext = `${initData.firstValue}-${initData.secondValue}`;\n    } else {\n      if (typeof props.modelValue !== \"number\" || Number.isNaN(props.modelValue)) {\n        initData.firstValue = props.min;\n      } else {\n        initData.firstValue = Math.min(props.max, Math.max(props.min, props.modelValue));\n      }\n\n      initData.oldValue = initData.firstValue;\n      valuetext = initData.firstValue;\n    }\n\n    sliderWrapper.value.setAttribute(\"aria-valuetext\", valuetext);\n    sliderWrapper.value.setAttribute(\"aria-label\", props.label ? props.label : `slider between ${props.min} and ${props.max}`);\n    on(window, \"resize\", resetSize);\n    await nextTick();\n    resetSize();\n  });\n  onBeforeUnmount(() => {\n    off(window, \"resize\", resetSize);\n  });\n  return {\n    sliderWrapper\n  };\n};\n\nconst _hoisted_1 = [\"aria-valuemin\", \"aria-valuemax\", \"aria-orientation\", \"aria-disabled\"];\nconst _hoisted_2 = {\n  key: 1\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_slider_button = resolveComponent(\"slider-button\");\n\n  const _component_slider_marker = resolveComponent(\"slider-marker\");\n\n  const _component_el_input_number = resolveComponent(\"el-input-number\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"sliderWrapper\",\n    class: normalizeClass(_ctx.sliderKls),\n    role: \"slider\",\n    \"aria-valuemin\": _ctx.min,\n    \"aria-valuemax\": _ctx.max,\n    \"aria-orientation\": _ctx.vertical ? \"vertical\" : \"horizontal\",\n    \"aria-disabled\": _ctx.sliderDisabled\n  }, [createElementVNode(\"div\", {\n    ref: \"slider\",\n    class: normalizeClass([_ctx.ns.e(\"runway\"), {\n      \"show-input\": _ctx.showInput && !_ctx.range\n    }, _ctx.ns.is(\"disabled\", _ctx.sliderDisabled)]),\n    style: normalizeStyle(_ctx.runwayStyle),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onSliderClick && _ctx.onSliderClick(...args))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"bar\")),\n    style: normalizeStyle(_ctx.barStyle)\n  }, null, 6), createVNode(_component_slider_button, {\n    ref: \"firstButton\",\n    \"model-value\": _ctx.firstValue,\n    vertical: _ctx.vertical,\n    \"tooltip-class\": _ctx.tooltipClass,\n    \"onUpdate:modelValue\": _ctx.setFirstValue\n  }, null, 8, [\"model-value\", \"vertical\", \"tooltip-class\", \"onUpdate:modelValue\"]), _ctx.range ? (openBlock(), createBlock(_component_slider_button, {\n    key: 0,\n    ref: \"secondButton\",\n    \"model-value\": _ctx.secondValue,\n    vertical: _ctx.vertical,\n    \"tooltip-class\": _ctx.tooltipClass,\n    \"onUpdate:modelValue\": _ctx.setSecondValue\n  }, null, 8, [\"model-value\", \"vertical\", \"tooltip-class\", \"onUpdate:modelValue\"])) : createCommentVNode(\"v-if\", true), _ctx.showStops ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.stops, (item, key) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key,\n      class: normalizeClass(_ctx.ns.e(\"stop\")),\n      style: normalizeStyle(_ctx.getStopStyle(item))\n    }, null, 6);\n  }), 128))])) : createCommentVNode(\"v-if\", true), _ctx.markList.length > 0 ? (openBlock(), createElementBlock(Fragment, {\n    key: 2\n  }, [createElementVNode(\"div\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.markList, (item, key) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key,\n      style: normalizeStyle(_ctx.getStopStyle(item.position)),\n      class: normalizeClass([_ctx.ns.e(\"stop\"), _ctx.ns.e(\"marks-stop\")])\n    }, null, 6);\n  }), 128))]), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"marks\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.markList, (item, key) => {\n    return openBlock(), createBlock(_component_slider_marker, {\n      key,\n      mark: item.mark,\n      style: normalizeStyle(_ctx.getStopStyle(item.position))\n    }, null, 8, [\"mark\", \"style\"]);\n  }), 128))], 2)], 64)) : createCommentVNode(\"v-if\", true)], 6), _ctx.showInput && !_ctx.range ? (openBlock(), createBlock(_component_el_input_number, {\n    key: 0,\n    ref: \"input\",\n    \"model-value\": _ctx.firstValue,\n    class: normalizeClass(_ctx.ns.e(\"input\")),\n    step: _ctx.step,\n    disabled: _ctx.sliderDisabled,\n    controls: _ctx.showInputControls,\n    min: _ctx.min,\n    max: _ctx.max,\n    debounce: _ctx.debounce,\n    size: _ctx.sliderInputSize,\n    \"onUpdate:modelValue\": _ctx.setFirstValue,\n    onChange: _ctx.emitChange\n  }, null, 8, [\"model-value\", \"class\", \"step\", \"disabled\", \"controls\", \"min\", \"max\", \"debounce\", \"size\", \"onUpdate:modelValue\", \"onChange\"])) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nvar Slider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/slider/src/index.vue\"]]);\n\nexport { Slider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInputNumber","SliderButton","SliderMarker","props","modelValue","type","Number","Array","default","min","max","step","showInput","showInputControls","size","validator","inputSize","showStops","showTooltip","formatTooltip","disabled","range","vertical","height","debounce","label","tooltipClass","marks","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","INPUT_EVENT","setup","emit","useNamespace","initData","reactive","firstValue","secondValue","oldValue","dragging","sliderSize","elFormItem","slider","firstButton","secondButton","sliderDisabled","minValue","maxValue","runwayStyle","barStyle","resetSize","emitChange","onSliderClick","setFirstValue","setSecondValue","useSlide","stops","getStopStyle","useStops","sliderWrapperSize","useSize","sliderInputSize","computed","value","ns","b","m","useMarks","useWatch","map","item","decimal","split","length","Math","apply","precisions","sliderWrapper","useLifecycle","toRefs","val","provide","precision","updateDragging","markList","sliderKls","valueChanged","every","index","setValues","throwError","_emit","_a","_b","watch","oldVal","deep","onMounted","valuetext","setAttribute","on","onBeforeUnmount","off","_openBlock","ref","class","role","_ctx","style","onClick","_createElementVNode","_normalizeClass","e","_createVNode","key","_createCommentVNode","_normalizeStyle","mark","controls","onChange"],"sources":["../../../../../../packages/components/slider/src/index.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"sliderWrapper\"\n    :class=\"sliderKls\"\n    role=\"slider\"\n    :aria-valuemin=\"min\"\n    :aria-valuemax=\"max\"\n    :aria-orientation=\"vertical ? 'vertical' : 'horizontal'\"\n    :aria-disabled=\"sliderDisabled\"\n  >\n    <div\n      ref=\"slider\"\n      :class=\"[\n        ns.e('runway'),\n        { 'show-input': showInput && !range },\n        ns.is('disabled', sliderDisabled),\n      ]\"\n      :style=\"runwayStyle\"\n      @click=\"onSliderClick\"\n    >\n      <div :class=\"ns.e('bar')\" :style=\"barStyle\" />\n      <slider-button\n        ref=\"firstButton\"\n        :model-value=\"firstValue\"\n        :vertical=\"vertical\"\n        :tooltip-class=\"tooltipClass\"\n        @update:model-value=\"setFirstValue\"\n      />\n      <slider-button\n        v-if=\"range\"\n        ref=\"secondButton\"\n        :model-value=\"secondValue\"\n        :vertical=\"vertical\"\n        :tooltip-class=\"tooltipClass\"\n        @update:model-value=\"setSecondValue\"\n      />\n      <div v-if=\"showStops\">\n        <div\n          v-for=\"(item, key) in stops\"\n          :key=\"key\"\n          :class=\"ns.e('stop')\"\n          :style=\"getStopStyle(item)\"\n        />\n      </div>\n      <template v-if=\"markList.length > 0\">\n        <div>\n          <div\n            v-for=\"(item, key) in markList\"\n            :key=\"key\"\n            :style=\"getStopStyle(item.position)\"\n            :class=\"[ns.e('stop'), ns.e('marks-stop')]\"\n          />\n        </div>\n        <div :class=\"ns.e('marks')\">\n          <slider-marker\n            v-for=\"(item, key) in markList\"\n            :key=\"key\"\n            :mark=\"item.mark\"\n            :style=\"getStopStyle(item.position)\"\n          />\n        </div>\n      </template>\n    </div>\n    <el-input-number\n      v-if=\"showInput && !range\"\n      ref=\"input\"\n      :model-value=\"firstValue\"\n      :class=\"ns.e('input')\"\n      :step=\"step\"\n      :disabled=\"sliderDisabled\"\n      :controls=\"showInputControls\"\n      :min=\"min\"\n      :max=\"max\"\n      :debounce=\"debounce\"\n      :size=\"sliderInputSize\"\n      @update:model-value=\"setFirstValue\"\n      @change=\"emitChange\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElInputNumber from '@element-plus/components/input-number'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport {\n  debugWarn,\n  isValidComponentSize,\n  off,\n  on,\n  throwError,\n} from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport SliderButton from './button.vue'\nimport SliderMarker from './marker.vue'\nimport { useMarks } from './useMarks'\nimport { useSlide } from './useSlide'\nimport { useStops } from './useStops'\n\nimport type { PropType, Ref } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElSlider',\n\n  components: {\n    ElInputNumber,\n    SliderButton,\n    SliderMarker,\n  },\n\n  props: {\n    modelValue: {\n      type: [Number, Array] as PropType<number | number[]>,\n      default: 0,\n    },\n    min: {\n      type: Number,\n      default: 0,\n    },\n    max: {\n      type: Number,\n      default: 100,\n    },\n    step: {\n      type: Number,\n      default: 1,\n    },\n    showInput: {\n      type: Boolean,\n      default: false,\n    },\n    showInputControls: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    inputSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    showStops: {\n      type: Boolean,\n      default: false,\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true,\n    },\n    formatTooltip: {\n      type: Function as PropType<(val: number) => number | string>,\n      default: undefined,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    range: {\n      type: Boolean,\n      default: false,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    height: {\n      type: String,\n      default: '',\n    },\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    label: {\n      type: String,\n      default: undefined,\n    },\n    tooltipClass: {\n      type: String,\n      default: undefined,\n    },\n    marks: Object,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT],\n\n  setup(props, { emit }) {\n    const ns = useNamespace('slider')\n    const initData = reactive({\n      firstValue: 0,\n      secondValue: 0,\n      oldValue: 0,\n      dragging: false,\n      sliderSize: 1,\n    })\n\n    const {\n      elFormItem,\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      minValue,\n      maxValue,\n      runwayStyle,\n      barStyle,\n      resetSize,\n      emitChange,\n      onSliderClick,\n      setFirstValue,\n      setSecondValue,\n    } = useSlide(props, initData, emit)\n\n    const { stops, getStopStyle } = useStops(\n      props,\n      initData,\n      minValue,\n      maxValue\n    )\n\n    const sliderWrapperSize = useSize()\n    const sliderInputSize = computed(\n      () => props.inputSize || sliderWrapperSize.value\n    )\n\n    const sliderKls = computed(() => [\n      ns.b(),\n      ns.m(sliderWrapperSize.value),\n      ns.is('vertical', props.vertical),\n      { [ns.m('with-input')]: props.showInput },\n    ])\n\n    const markList = useMarks(props)\n\n    useWatch(props, initData, minValue, maxValue, emit, elFormItem)\n\n    const precision = computed(() => {\n      const precisions = [props.min, props.max, props.step].map((item) => {\n        const decimal = `${item}`.split('.')[1]\n        return decimal ? decimal.length : 0\n      })\n      return Math.max.apply(null, precisions)\n    })\n\n    const { sliderWrapper } = useLifecycle(props, initData, resetSize)\n\n    const { firstValue, secondValue, oldValue, dragging, sliderSize } =\n      toRefs(initData)\n\n    const updateDragging = (val: boolean) => {\n      initData.dragging = val\n    }\n\n    provide('SliderProvider', {\n      ...toRefs(props),\n      sliderSize,\n      disabled: sliderDisabled,\n      precision,\n      emitChange,\n      resetSize,\n      updateDragging,\n    })\n\n    return {\n      ns,\n      firstValue,\n      secondValue,\n      oldValue,\n      dragging,\n      sliderSize,\n\n      slider,\n      firstButton,\n      secondButton,\n      sliderDisabled,\n      runwayStyle,\n      barStyle,\n      emitChange,\n      onSliderClick,\n      getStopStyle,\n      setFirstValue,\n      setSecondValue,\n\n      stops,\n      markList,\n\n      sliderWrapper,\n      sliderWrapperSize,\n      sliderInputSize,\n      sliderKls,\n    }\n  },\n})\n\nconst useWatch = (props, initData, minValue, maxValue, emit, elFormItem) => {\n  const _emit = (val: number | number[]) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(INPUT_EVENT, val)\n  }\n\n  const valueChanged = () => {\n    if (props.range) {\n      return ![minValue.value, maxValue.value].every(\n        (item, index) => item === initData.oldValue[index]\n      )\n    } else {\n      return props.modelValue !== initData.oldValue\n    }\n  }\n\n  const setValues = () => {\n    if (props.min > props.max) {\n      throwError('Slider', 'min should not be greater than max.')\n      return\n    }\n    const val = props.modelValue\n    if (props.range && Array.isArray(val)) {\n      if (val[1] < props.min) {\n        _emit([props.min, props.min])\n      } else if (val[0] > props.max) {\n        _emit([props.max, props.max])\n      } else if (val[0] < props.min) {\n        _emit([props.min, val[1]])\n      } else if (val[1] > props.max) {\n        _emit([val[0], props.max])\n      } else {\n        initData.firstValue = val[0]\n        initData.secondValue = val[1]\n        if (valueChanged()) {\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n          initData.oldValue = val.slice()\n        }\n      }\n    } else if (!props.range && typeof val === 'number' && !Number.isNaN(val)) {\n      if (val < props.min) {\n        _emit(props.min)\n      } else if (val > props.max) {\n        _emit(props.max)\n      } else {\n        initData.firstValue = val\n        if (valueChanged()) {\n          elFormItem.validate?.('change').catch((err) => debugWarn(err))\n          initData.oldValue = val\n        }\n      }\n    }\n  }\n\n  setValues()\n\n  watch(\n    () => initData.dragging,\n    (val) => {\n      if (!val) {\n        setValues()\n      }\n    }\n  )\n\n  watch(\n    () => props.modelValue,\n    (val, oldVal) => {\n      if (\n        initData.dragging ||\n        (Array.isArray(val) &&\n          Array.isArray(oldVal) &&\n          val.every((item, index) => item === oldVal[index]) &&\n          initData.firstValue === val[0] &&\n          initData.secondValue === val[1])\n      ) {\n        return\n      }\n      setValues()\n    },\n    {\n      deep: true,\n    }\n  )\n\n  watch(\n    () => [props.min, props.max],\n    () => {\n      setValues()\n    }\n  )\n}\n\nconst useLifecycle = (props, initData, resetSize) => {\n  const sliderWrapper: Ref<Nullable<HTMLElement>> = ref(null)\n\n  onMounted(async () => {\n    let valuetext\n    if (props.range) {\n      if (Array.isArray(props.modelValue)) {\n        initData.firstValue = Math.max(props.min, props.modelValue[0])\n        initData.secondValue = Math.min(props.max, props.modelValue[1])\n      } else {\n        initData.firstValue = props.min\n        initData.secondValue = props.max\n      }\n      initData.oldValue = [initData.firstValue, initData.secondValue]\n      valuetext = `${initData.firstValue}-${initData.secondValue}`\n    } else {\n      if (\n        typeof props.modelValue !== 'number' ||\n        Number.isNaN(props.modelValue)\n      ) {\n        initData.firstValue = props.min\n      } else {\n        initData.firstValue = Math.min(\n          props.max,\n          Math.max(props.min, props.modelValue)\n        )\n      }\n      initData.oldValue = initData.firstValue\n      valuetext = initData.firstValue\n    }\n\n    sliderWrapper.value.setAttribute('aria-valuetext', valuetext)\n\n    // label screen reader\n    sliderWrapper.value.setAttribute(\n      'aria-label',\n      props.label ? props.label : `slider between ${props.min} and ${props.max}`\n    )\n\n    on(window, 'resize', resetSize)\n\n    await nextTick()\n    resetSize()\n  })\n\n  onBeforeUnmount(() => {\n    off(window, 'resize', resetSize)\n  })\n\n  return {\n    sliderWrapper,\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}