{"ast":null,"code":"let history = [];\n\nfunction Point(x, y, type) {\n  this.x = x;\n  this.y = y;\n  this.type = type; // 左击 1  右击 3\n}\n\nfunction windowToCanvas(e, mycanvas) {\n  // 返回元素的大小以及位置\n  var rect = mycanvas.getBoundingClientRect(); // rect 的宽度会加上 canvas 的 border 会影响精度\n\n  return new Point(e.clientX - rect.left * (mycanvas.width / rect.width), e.clientY - rect.top * (mycanvas.height / rect.height), e.which);\n}\n\nfunction showLastHistory(ctx, history) {\n  ctx.putImageData(history[history.length - 1].data, 0, 0);\n}\n\nfunction addHistoy(history, ctx, mycanvas) {\n  history.push({\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\n  });\n}\n\nexport default {\n  name: \"Canvas\",\n\n  data() {\n    return {\n      ctx: null,\n      tool: '',\n      tempPos: [],\n      posArray: []\n    };\n  },\n\n  mounted() {\n    //this.init();\n    let mycanvas = this.$refs.cont;\n    mycanvas.width = 500;\n    mycanvas.height = 500;\n    mycanvas.display(\"block\");\n    this.tool = '1';\n    this.drawer();\n  },\n\n  methods: {\n    handleEvent(e) {\n      //console.log(e)\n      this.drawer();\n    },\n\n    init() {\n      this.ctx = this.$refs.cont.getContext('2d');\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(300, 100);\n      this.ctx.strokeStyle = 'red';\n      this.ctx.lineWidth = '2';\n      this.ctx.stroke();\n      this.ctx.closePath();\n    },\n\n    // 绘制矩形\n    drawerRect(ctx, left, top, w, h) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '0.5'; // 画笔粗细\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(left, top, w, h);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [left, top, w, h]\n      };\n    },\n\n    // 绘制圆\n    drawerCircle(ctx, x, y, r) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '0.5'; // 画笔粗细\n\n      ctx.beginPath(); // 开始路径\n\n      ctx.arc(x, y, r, 0, Math.PI * 2, true); // 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\n\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, r]\n      };\n    },\n\n    // 绘制直线\n    drawerLine(ctx, x, y, z, n) {\n      console.log(\"各点坐标\");\n      console.log(x);\n      console.log(y);\n      console.log(z);\n      console.log(n);\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.lineWidth = '0.5'; // 画笔粗细\n\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(z, n);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, z, n]\n      };\n    },\n\n    // 绘制点\n    drawerPoint(ctx, x, y) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n      this.posArray.push({\n        data: [x, y]\n      });\n    },\n\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\n    drawer() {\n      let mycanvas = this.$refs.cont;\n      console.log(mycanvas);\n      let ctx = mycanvas.getContext('2d');\n      console.log(ctx);\n      let that = this;\n\n      if (this.tool === '1') {\n        console.log(this.tool);\n        mycanvas.onclick = null;\n        console.log(mycanvas.onmousedown);\n\n        mycanvas.onmousedown = function (e) {\n          console.log(\"鼠标点击\");\n          console.log(e);\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            console.log(\"点击事件\");\n            console.log(e);\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let w = Math.abs(point.x - mousedown.x);\n            let h = Math.abs(point.y - mousedown.y);\n            let left = point.x > mousedown.x ? mousedown.x : point.x;\n            let top = point.y > mousedown.y ? mousedown.y : point.y;\n            let pos = that.drawerRect(ctx, left, top, w, h);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault();\n            addHistoy(history, ctx, mycanvas); // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '2') {\n        // 清除事件\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let rx = (point.x - mousedown.x) / 2;\n            let ry = (point.y - mousedown.y) / 2;\n            let r = Math.sqrt(rx * rx + ry * ry);\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault();\n            addHistoy(history, ctx, mycanvas); // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '3') {\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y);\n            console.log(mousedown.x, mousedown.y, point.x, point.y);\n            that.tempPos.push(pos);\n            console.log(that.tempPos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault();\n            addHistoy(history, ctx, mycanvas); // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '4') {} else if (this.tool === '5') {\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (event) {\n          let rect = mycanvas.getBoundingClientRect();\n          let CanvasPos = {\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\n          };\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y);\n        };\n      }\n    },\n\n    // 重置\n    resetMap() {\n      // 标注的信息都放在这个数组中\n      this.posArray = [];\n      history = [history[0]];\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height);\n      addHistoy(history, ctx, mycanvas);\n    },\n\n    // 取消上一步操作\n    cancel() {\n      if (history.length > 1) {\n        console.log(\"取消上一步\");\n        console.log(history);\n        this.posArray.pop();\n        history.pop();\n        let mycanvas = this.$refs.cont;\n        let ctx = mycanvas.getContext('2d');\n        showLastHistory(ctx, history);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["history","Point","x","y","type","windowToCanvas","e","mycanvas","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","which","showLastHistory","ctx","putImageData","length","data","addHistoy","push","getImageData","name","tool","tempPos","posArray","mounted","$refs","cont","display","drawer","methods","handleEvent","init","getContext","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","drawerRect","w","h","save","restore","drawerCircle","r","arc","Math","PI","drawerLine","z","n","console","log","fillStyle","drawerPoint","fill","that","onclick","onmousedown","preventDefault","mousedown","onmousemove","point","abs","pos","onmouseup","rx","ry","sqrt","event","CanvasPos","resetMap","clearRect","cancel","pop"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!--canvas居中：display设置为block-->\r\n    <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n      @click=\"handleEvent\"\r\n    >\r\n    </canvas>\r\n    <div style=\"margin: 10px 0px;\">\r\n      <el-button type=\"primary\" style=\"margin-left: 5px;\" @click=\"cancel\">撤销</el-button>\r\n      <el-button type=\"primary\" style=\"margin-left: 5px;\" @click=\"resetMap\">清空</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  var rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.clientX - rect.left * (mycanvas.width / rect.width),\r\n      e.clientY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      ctx:null,\r\n      tool:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.init();\r\n    let mycanvas = this.$refs.cont\r\n    mycanvas.width = 500\r\n    mycanvas.height = 500\r\n    mycanvas.display(\"block\")\r\n    this.tool = '1';\r\n    this.drawer();\r\n  },\r\n\r\n  methods:{\r\n\r\n    handleEvent(e){\r\n      //console.log(e)\r\n      this.drawer();\r\n    },\r\n\r\n    init(){\r\n      this.ctx = this.$refs.cont.getContext('2d');\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0,0);\r\n      this.ctx.lineTo(300,100);\r\n      this.ctx.strokeStyle = 'red'\r\n      this.ctx.lineWidth = '2'\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '0.5' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '0.5' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      console.log(\"各点坐标\")\r\n      console.log(x)\r\n      console.log(y)\r\n      console.log(z)\r\n      console.log(n)\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '0.5' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      console.log(mycanvas)\r\n      let ctx = mycanvas.getContext('2d')\r\n      console.log(ctx)\r\n      let that = this\r\n      if (this.tool === '1') {\r\n        console.log(this.tool)\r\n        mycanvas.onclick = null\r\n        console.log(mycanvas.onmousedown)\r\n        mycanvas.onmousedown = function (e) {\r\n          console.log(\"鼠标点击\")\r\n          console.log(e)\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            console.log(\"点击事件\")\r\n            console.log(e)\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '2') {\r\n        // 清除事件\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '3') {\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            console.log( mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n            console.log(that.tempPos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '4') {\r\n\r\n      } else if (this.tool === '5') {\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let rect = mycanvas.getBoundingClientRect()\r\n          let CanvasPos = {\r\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\r\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\r\n          }\r\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y)\r\n        }\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        console.log(\"取消上一步\")\r\n        console.log(history)\r\n        this.posArray.pop()\r\n        history.pop()\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}