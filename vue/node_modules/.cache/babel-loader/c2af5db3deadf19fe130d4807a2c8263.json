{"ast":null,"code":"import { ref, isRef } from 'vue';\nimport { isObject, isString, hyphenate } from '@vue/shared';\nimport { Loading } from './service.mjs';\nconst INSTANCE_KEY = Symbol(\"ElLoading\");\n\nconst createInstance = (el, binding) => {\n  var _a, _b, _c, _d;\n\n  const vm = binding.instance;\n\n  const getBindingProp = key => isObject(binding.value) ? binding.value[key] : void 0;\n\n  const resolveExpression = key => {\n    const data = isString(key) && (vm == null ? void 0 : vm[key]) || key;\n    if (data) return ref(data);else return data;\n  };\n\n  const getProp = name => resolveExpression(getBindingProp(name) || el.getAttribute(`element-loading-${hyphenate(name)}`));\n\n  const fullscreen = (_a = getBindingProp(\"fullscreen\")) != null ? _a : binding.modifiers.fullscreen;\n  const options = {\n    text: getProp(\"text\"),\n    svg: getProp(\"svg\"),\n    svgViewBox: getProp(\"svgViewBox\"),\n    spinner: getProp(\"spinner\"),\n    background: getProp(\"background\"),\n    customClass: getProp(\"customClass\"),\n    fullscreen,\n    target: (_b = getBindingProp(\"target\")) != null ? _b : fullscreen ? void 0 : el,\n    body: (_c = getBindingProp(\"body\")) != null ? _c : binding.modifiers.body,\n    lock: (_d = getBindingProp(\"lock\")) != null ? _d : binding.modifiers.lock\n  };\n  el[INSTANCE_KEY] = {\n    options,\n    instance: Loading(options)\n  };\n};\n\nconst updateOptions = (newOptions, originalOptions) => {\n  for (const key of Object.keys(originalOptions)) {\n    if (isRef(originalOptions[key])) originalOptions[key].value = newOptions[key];\n  }\n};\n\nconst vLoading = {\n  mounted(el, binding) {\n    if (binding.value) {\n      createInstance(el, binding);\n    }\n  },\n\n  updated(el, binding) {\n    const instance = el[INSTANCE_KEY];\n\n    if (binding.oldValue !== binding.value) {\n      if (binding.value && !binding.oldValue) {\n        createInstance(el, binding);\n      } else if (binding.value && binding.oldValue) {\n        if (isObject(binding.value)) updateOptions(binding.value, instance.options);\n      } else {\n        instance == null ? void 0 : instance.instance.close();\n      }\n    }\n  },\n\n  unmounted(el) {\n    var _a;\n\n    (_a = el[INSTANCE_KEY]) == null ? void 0 : _a.instance.close();\n  }\n\n};\nexport { vLoading };","map":{"version":3,"mappings":"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","names":["INSTANCE_KEY","Symbol","createInstance","el","binding","_a","_b","_c","_d","vm","instance","getBindingProp","key","isObject","value","resolveExpression","data","isString","ref","getProp","name","getAttribute","hyphenate","fullscreen","modifiers","options","text","svg","svgViewBox","spinner","background","customClass","target","body","lock","Loading","updateOptions","newOptions","originalOptions","Object","keys","isRef","vLoading","mounted","updated","oldValue","close","unmounted"],"sources":["../../../../../../packages/components/loading/src/directive.ts"],"sourcesContent":["import { isRef, ref } from 'vue'\nimport { hyphenate, isObject, isString } from '@vue/shared'\nimport { Loading } from './service'\nimport type { Directive, DirectiveBinding, UnwrapRef } from 'vue'\nimport type { LoadingOptions } from './types'\nimport type { LoadingInstance } from './loading'\n\nconst INSTANCE_KEY = Symbol('ElLoading')\n\nexport type LoadingBinding = boolean | UnwrapRef<LoadingOptions>\nexport interface ElementLoading extends HTMLElement {\n  [INSTANCE_KEY]?: {\n    instance: LoadingInstance\n    options: LoadingOptions\n  }\n}\n\nconst createInstance = (\n  el: ElementLoading,\n  binding: DirectiveBinding<LoadingBinding>\n) => {\n  const vm = binding.instance\n\n  const getBindingProp = <K extends keyof LoadingOptions>(\n    key: K\n  ): LoadingOptions[K] =>\n    isObject(binding.value) ? binding.value[key] : undefined\n\n  const resolveExpression = (key: any) => {\n    const data = (isString(key) && vm?.[key]) || key\n    if (data) return ref(data)\n    else return data\n  }\n\n  const getProp = <K extends keyof LoadingOptions>(name: K) =>\n    resolveExpression(\n      getBindingProp(name) ||\n        el.getAttribute(`element-loading-${hyphenate(name)}`)\n    )\n\n  const fullscreen =\n    getBindingProp('fullscreen') ?? binding.modifiers.fullscreen\n\n  const options: LoadingOptions = {\n    text: getProp('text'),\n    svg: getProp('svg'),\n    svgViewBox: getProp('svgViewBox'),\n    spinner: getProp('spinner'),\n    background: getProp('background'),\n    customClass: getProp('customClass'),\n    fullscreen,\n    target: getBindingProp('target') ?? (fullscreen ? undefined : el),\n    body: getBindingProp('body') ?? binding.modifiers.body,\n    lock: getBindingProp('lock') ?? binding.modifiers.lock,\n  }\n  el[INSTANCE_KEY] = {\n    options,\n    instance: Loading(options),\n  }\n}\n\nconst updateOptions = (\n  newOptions: UnwrapRef<LoadingOptions>,\n  originalOptions: LoadingOptions\n) => {\n  for (const key of Object.keys(originalOptions)) {\n    if (isRef(originalOptions[key]))\n      originalOptions[key].value = newOptions[key]\n  }\n}\n\nexport const vLoading: Directive<ElementLoading, LoadingBinding> = {\n  mounted(el, binding) {\n    if (binding.value) {\n      createInstance(el, binding)\n    }\n  },\n  updated(el, binding) {\n    const instance = el[INSTANCE_KEY]\n    if (binding.oldValue !== binding.value) {\n      if (binding.value && !binding.oldValue) {\n        createInstance(el, binding)\n      } else if (binding.value && binding.oldValue) {\n        if (isObject(binding.value))\n          updateOptions(binding.value, instance!.options)\n      } else {\n        instance?.instance.close()\n      }\n    }\n  },\n  unmounted(el) {\n    el[INSTANCE_KEY]?.instance.close()\n  },\n}\n"]},"metadata":{},"sourceType":"module"}