{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"span\", null, \"专家意见：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  style: {\n    \"margin\": \"10px 0px\",\n    \"display\": \"flex\"\n  }\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\"撤销\");\n\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode(\"清空\");\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"margin-left\": \"5px\"\n  }\n}, \"选择绘制图案：\", -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"block\"\n  }\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_col = _resolveComponent(\"el-col\");\n\n  const _component_el_input = _resolveComponent(\"el-input\");\n\n  const _component_el_row = _resolveComponent(\"el-row\");\n\n  const _component_el_button = _resolveComponent(\"el-button\");\n\n  const _component_el_option = _resolveComponent(\"el-option\");\n\n  const _component_el_select = _resolveComponent(\"el-select\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createVNode(_component_el_row, null, {\n    default: _withCtx(() => [_createVNode(_component_el_col, {\n      span: 12\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\"canvas居中：display设置为block\"), _createElementVNode(\"canvas\", {\n        ref: \"cont\",\n        style: {\n          \"border\": \"2px solid #aaaaaa\",\n          \"display\": \"block\"\n        },\n        onClick: _cache[0] || (_cache[0] = (...args) => $options.handleEvent && $options.handleEvent(...args))\n      }, null, 512\n      /* NEED_PATCH */\n      )]),\n      _: 1\n      /* STABLE */\n\n    }), _createVNode(_component_el_col, {\n      span: 2,\n      style: {\n        \"margin-left\": \"20px\"\n      }\n    }, {\n      default: _withCtx(() => [_hoisted_1]),\n      _: 1\n      /* STABLE */\n\n    }), _createVNode(_component_el_col, {\n      span: 9,\n      style: {\n        \"text-align\": \"left\"\n      }\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        type: \"textarea\",\n        rows: 30,\n        placeholder: \"请输入内容\",\n        modelValue: this.form.result,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => this.form.result = $event)\n      }, null, 8\n      /* PROPS */\n      , [\"modelValue\"])]),\n      _: 1\n      /* STABLE */\n\n    })]),\n    _: 1\n    /* STABLE */\n\n  })]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    style: {\n      \"margin-left\": \"5px\",\n      \"text-align\": \"right\"\n    },\n    onClick: $options.cancel\n  }, {\n    default: _withCtx(() => [_hoisted_3]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    style: {\n      \"margin-left\": \"5px\",\n      \"text-align\": \"right\"\n    },\n    onClick: $options.resetMap\n  }, {\n    default: _withCtx(() => [_hoisted_4]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), _hoisted_5, _createVNode(_component_el_select, {\n    modelValue: $data.tool,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.tool = $event),\n    clearable: \"\",\n    onChange: $options.changeTool,\n    size: \"small\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.tools, item => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: item.value,\n        label: item.label,\n        value: item.value\n      }, null, 8\n      /* PROPS */\n      , [\"label\", \"value\"]);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"modelValue\", \"onChange\"])]), _hoisted_6], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCAWQA,oBAAkB,MAAlB,EAAkB,IAAlB,EAAM,OAAN,EAAW;AAAA;AAAX;;;AAYDC,OAAsC,EAAtC;AAAA;AAAA;AAAA;;;iDACkF;;iDACE;;gCACvFD,oBAA6C,MAA7C,EAA6C;AAAvCC,OAAwB,EAAxB;AAAA;AAAA;AAAuC,CAA7C,EAA+B,SAA/B,EAAsC;AAAA;AAAtC;;gCAYFD,oBAEM,KAFN,EAEM;AAFDC,OAAsB,EAAtB;AAAA;AAAA;AAEC,CAFN,EAA2B,IAA3B,EAA2B;AAAA;AAA3B;;;;;;;;;;;;;;;6DArCAD,oBAqBM,KArBN,EAqBM,IArBN,EAqBM,CApBJE,aAmBSC,iBAnBT,EAmBS,IAnBT,EAmBS;sBAlBP,MAMS,CANTD,aAMSE,iBANT,EAMS;AANAC,UAAI,EAAE;AAMN,KANT,EAAiB;wBACf,MAA+B,CAA/BC,+CAA+B,EAC/BN,oBAGS,QAHT,EAGS;AAHDO,WAAG,EAAC,MAGH;AAHUN,aAAiD,EAAjD;AAAA;AAAA;AAAA,SAGV;AAFAO,eAAK,yCAAEC,qDAAF;AAEL,OAHT;;AAAA,OAD+B,EADhB;;;;AAAA,KAAjB,CAMS,EACTP,aAESE,iBAFT,EAES;AAFAC,UAAI,EAAE,CAEN;AAFSJ,WAAyB,EAAzB;AAAA;AAAA;AAET,KAFT;wBACE,MAAkB,CAAlBS,UAAkB;;;;KADpB,CADS,EAITR,aAOSE,iBAPT,EAOS;AAPAC,UAAI,EAAE,CAON;AAPSJ,WAAuB,EAAvB;AAAA;AAAA;AAOT,KAPT;wBACE,MAKW,CALXC,aAKWS,mBALX,EAKW;AAJPC,YAAI,EAAC,UAIE;AAHNC,YAAI,EAAE,EAGA;AAFPC,mBAAW,EAAC,OAEL;yBADOC,KAAKC,MACZ;wEADOD,KAAKC,SAAMC;AAClB,OALX;;AAAA,uBAKW;;;;KANb,CAJS,EAYF;;;;AAAA,GAnBT,CAoBI,CArBN,GAsBAjB,oBAaM,KAbN,cAaM,CAZJE,aAAmGgB,oBAAnG,EAAmG;AAAxFN,QAAI,EAAC,SAAmF;AAAzEX,SAA0C,EAA1C;AAAA;AAAA;AAAA,KAAyE;AAA7BO,WAAK,EAAEC;AAAsB,GAAnG;sBAAqF,MAAE;;;;GAAvF;;AAAA,gBAYI,EAXJP,aAAqGgB,oBAArG,EAAqG;AAA1FN,QAAI,EAAC,SAAqF;AAA3EX,SAA0C,EAA1C;AAAA;AAAA;AAAA,KAA2E;AAA/BO,WAAK,EAAEC;AAAwB,GAArG;sBAAuF,MAAE;;;;GAAzF;;AAAA,gBAWI,EAVJU,UAUI,EATJjB,aAQYkB,oBARZ,EAQY;gBARQC,UAQR;+DARQA,aAAIJ,OAQZ;AARcK,aAAS,EAAT,EAQd;AARyBC,YAAM,EAAEd,mBAQjC;AAPDe,QAAI,EAAC;AAOJ,GARZ;sBAGM,MAAqB,oBADzBC,oBAKYC,SALZ,EAKY,IALZ,EAKYC,YAJON,WAIP,EAJDO,IAAa,IAAT;2BADfC,aAKYC,oBALZ,EAKY;AAHPC,WAAG,EAAEH,IAAI,CAACI,KAGH;AAFPC,aAAK,EAAEL,IAAI,CAACK,KAEL;AADPD,aAAK,EAAEJ,IAAI,CAACI;AACL,OALZ;;AAAA;KAKY,CALZ;;AAAA,KACyB;;;;GAH3B;;AAAA,+BASI,CAbN,GAeAE","names":["_createElementVNode","style","_createVNode","_component_el_row","_component_el_col","span","_createCommentVNode","ref","onClick","$options","_hoisted_1","_component_el_input","type","rows","placeholder","form","result","$event","_component_el_button","_hoisted_5","_component_el_select","$data","clearable","onChange","size","_createElementBlock","_Fragment","_renderList","item","_createBlock","_component_el_option","key","value","label","_hoisted_6"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-row>\r\n      <el-col :span=\"12\">\r\n        <!--canvas居中：display设置为block-->\r\n        <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n                @click=\"handleEvent\"\r\n        >\r\n        </canvas>\r\n      </el-col>\r\n      <el-col :span=\"2\" style=\"margin-left: 20px\">\r\n        <span>专家意见：</span>\r\n      </el-col>\r\n      <el-col :span=\"9\" style=\"text-align:left\">\r\n        <el-input\r\n            type=\"textarea\"\r\n            :rows=\"30\"\r\n            placeholder=\"请输入内容\"\r\n            v-model=\"this.form.result\">\r\n        </el-input>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div style=\"margin: 10px 0px;display: flex\">\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"cancel\">撤销</el-button>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"resetMap\">清空</el-button>\r\n    <span style=\"margin-left: 5px\">选择绘制图案：</span>\r\n    <el-select v-model=\"tool\" clearable @change=\"changeTool\"\r\n               size=\"small\">\r\n      <el-option\r\n          v-for=\"item in tools\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\">\r\n      </el-option>\r\n    </el-select>\r\n  </div>\r\n\r\n  <div style=\"display: block\">\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  let rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width),\r\n      e.offsetY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  console.log(\"存历史\")\r\n  console.log(history)\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      dialogVisible:false,\r\n      ctx:null,\r\n      mycanvas:null,\r\n      textarea:'',\r\n      tool:'',\r\n      imgUrl:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n      form:[],\r\n      Cwidth:(window.screen.width)*0.5,\r\n      Cheight:(window.screen.height)*0.75,\r\n      tools:[\r\n        {value:\"3\", label:\"直线\"},\r\n        {value:\"1\", label:\"矩形\"},\r\n        {value:\"2\", label:\"圆形\"},\r\n        {value:\"4\", label:\"任意多边形\"},\r\n        {value:\"5\", label:\"点\"},\r\n      ],\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.();\r\n    let str = sessionStorage.getItem(\"img\") || \"{}\"\r\n    console.log(str)\r\n    this.form = JSON.parse(str)\r\n\r\n    this.mycanvas = this.$refs.cont\r\n    this.ctx = this.mycanvas.getContext('2d');\r\n    this.mycanvas.width = (window.screen.width)*0.5\r\n    this.mycanvas.height = (window.screen.height)*0.75\r\n    console.log(\"mounted\")\r\n    console.log(this.form)\r\n    this.drawImg()\r\n    this.drawer();\r\n    this.getAngle();\r\n\r\n  },\r\n\r\n  methods:{\r\n\r\n    handleEvent(e){\r\n      //console.log(e)\r\n      this.drawer();\r\n    },\r\n    changeTool(){\r\n      this.drawer();\r\n    },\r\n\r\n    drawImg(){\r\n      let img = new Image();\r\n      img.src = this.form.img;\r\n      console.log(img.src)\r\n      console.log(this.form)\r\n      img.crossOrigin = '';\r\n      img.onload = () => {\r\n        this.ctx.drawImage(img, this.Cwidth/4, 0, 400, this.Cheight);\r\n      }\r\n    },\r\n\r\n    getAngle(){\r\n      const dot = 110 * 535 + 129 * 76\r\n      const det = 110 * 76 - 129 * 535\r\n      const angle = Math.atan2(det, dot) / Math.PI * 180\r\n      return (angle + 360) % 360\r\n      console.log(\"-----------------------\")\r\n      console.log((angle + 360) % 360)\r\n    },\r\n\r\n    init(form){\r\n      console.log(form)\r\n      this.textarea = form.result\r\n      this.imgUrl = form.img\r\n      this.form = form\r\n      console.log(this.imgUrl)\r\n      console.log(this.textarea)\r\n      console.log(this.form)\r\n\r\n      this.drawImg()\r\n      this.drawer();\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      let that = this\r\n      console.log(this.tool)\r\n      if (this.tool === '1') {\r\n        //画矩形\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '2') {\r\n        // 画圆\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '3') {\r\n        //画直线\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          console.log(\"鼠标点击\")\r\n          console.log(mousedown)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            let mouseup = windowToCanvas(e, mycanvas)\r\n            console.log(\"鼠标松开\")\r\n            console.log(mouseup)\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '4') {\r\n        //画多边形\r\n\r\n      } else if (this.tool === '5') {\r\n        //画点\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let rect = mycanvas.getBoundingClientRect()\r\n          let CanvasPos = {\r\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\r\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\r\n          }\r\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y)\r\n        }\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n      this.drawImg();\r\n      this.tool = '';\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        console.log(\"取消上一步\")\r\n        console.log(history)\r\n        this.posArray.pop()\r\n        history.pop()\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }else{\r\n        this.drawImg();\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}