{"ast":null,"code":"import { defineComponent, ref, inject, computed, unref, provide, readonly, toRef, watch, onMounted, onBeforeUnmount, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport { rovingFocusGroupProps, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY } from './tokens.mjs';\nimport { focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { composeEventHandlers, on, off } from '../../../utils/dom/event.mjs';\nconst CURRENT_TAB_ID_CHANGE_EVT = \"currentTabIdChange\";\nconst ENTRY_FOCUS_EVT = \"rovingFocusGroup.entryFocus\";\nconst EVT_OPTS = {\n  bubbles: false,\n  cancelable: true\n};\n\nconst _sfc_main = defineComponent({\n  name: \"ElRovingFocusGroupImpl\",\n  inheritAttrs: false,\n  props: rovingFocusGroupProps,\n  emits: [CURRENT_TAB_ID_CHANGE_EVT, \"entryFocus\"],\n\n  setup(props, {\n    emit\n  }) {\n    var _a;\n\n    const currentTabbedId = ref((_a = props.currentTabId || props.defaultCurrentTabId) != null ? _a : null);\n    const isBackingOut = ref(false);\n    const isClickFocus = ref(false);\n    const rovingFocusGroupRef = ref(null);\n    const {\n      getItems\n    } = inject(COLLECTION_INJECTION_KEY, void 0);\n    const rovingFocusGroupRootStyle = computed(() => {\n      return [{\n        outline: \"none\"\n      }, props.style];\n    });\n\n    const onItemFocus = tabbedId => {\n      emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);\n    };\n\n    const onItemShiftTab = () => {\n      isBackingOut.value = true;\n    };\n\n    const onMousedown = composeEventHandlers(e => {\n      var _a2;\n\n      (_a2 = props.onMousedown) == null ? void 0 : _a2.call(props, e);\n    }, () => {\n      isClickFocus.value = true;\n    });\n    const onFocus = composeEventHandlers(e => {\n      var _a2;\n\n      (_a2 = props.onFocus) == null ? void 0 : _a2.call(props, e);\n    }, e => {\n      const isKeyboardFocus = !unref(isClickFocus);\n      const {\n        target,\n        currentTarget\n      } = e;\n\n      if (target === currentTarget && isKeyboardFocus && !unref(isBackingOut)) {\n        const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS);\n        currentTarget == null ? void 0 : currentTarget.dispatchEvent(entryFocusEvt);\n\n        if (!entryFocusEvt.defaultPrevented) {\n          const items = getItems().filter(item => item.focusable);\n          const activeItem = items.find(item => item.active);\n          const currentItem = items.find(item => item.id === unref(currentTabbedId));\n          const candidates = [activeItem, currentItem, ...items].filter(Boolean);\n          const candidateNodes = candidates.map(item => item.ref);\n          focusFirst(candidateNodes);\n        }\n      }\n\n      isClickFocus.value = false;\n    });\n    const onBlur = composeEventHandlers(e => {\n      var _a2;\n\n      (_a2 = props.onBlur) == null ? void 0 : _a2.call(props, e);\n    }, () => {\n      isBackingOut.value = false;\n    });\n\n    const handleEntryFocus = (...args) => {\n      emit(\"entryFocus\", ...args);\n    };\n\n    provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {\n      currentTabbedId: readonly(currentTabbedId),\n      loop: toRef(props, \"loop\"),\n      tabIndex: computed(() => {\n        return unref(isBackingOut) ? -1 : 0;\n      }),\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      orientation: toRef(props, \"orientation\"),\n      dir: toRef(props, \"dir\"),\n      onItemFocus,\n      onItemShiftTab,\n      onBlur,\n      onFocus,\n      onMousedown\n    });\n    watch(() => props.currentTabId, val => {\n      currentTabbedId.value = val != null ? val : null;\n    });\n    onMounted(() => {\n      const rovingFocusGroupEl = unref(rovingFocusGroupRef);\n      on(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEntryFocus);\n    });\n    onBeforeUnmount(() => {\n      const rovingFocusGroupEl = unref(rovingFocusGroupRef);\n      off(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEntryFocus);\n    });\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\");\n}\n\nvar ElRovingFocusGroupImpl = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group-impl.vue\"]]);\n\nexport { ElRovingFocusGroupImpl as default };","map":{"version":3,"mappings":";;;;;;;AA4BA,MAAMA,yBAA4B,uBAAlC;AAEA,MAAMC,eAAkB,gCAAxB;AACA,MAAMC,QAAsB;AAAEC,SAAS,OAAX;AAAkBC,cAAY;AAA9B,CAA5B;;AACA,MAAKC,YAAaC,eAAa;AAC7BC,MAAM,0BADuB;AAE7BC,cAAc,OAFe;AAG7BC,OAAO,uBAHsB;AAI7BC,SAAO,CAACV,yBAAD,EAA4B,YAA5B,CAJsB;;AAK7BW,QAAMF,KAAN,EAAa;AAAEG;AAAF,GAAb,EAAuB;AACrB;;AAGM,yBAAe,MAAS,4EAAxB;AACA,yBAAeC,IAAI,KAAJ,CAAf;AACA;AACN,UAAMC,mBACJ,YADF;AAIM;AAAAC;AAAA,yCAA2C,MAA3C;AAGG;AACL;AAEAC;AAFA,SAIFP,WAJE;AAOE,KARG;;AASP,oCAAgC;AAClCG;AAEA,KAHE;;AAIA,wBAAqB;AACvBK;AAEM,KAHJ;;AAKE,4CAAqB;AAAA,UAEjBC,GAFiB;;AAGrB,mBAAaC,WAAb,KAAqB,IAArB,GAAqB,MAArB,GAAqBD,kBAArB;AAEJ,KALyB,EAKzB;AAEME,2BACJ,IADI;AAEF,KATqB,CAArB;AAUF,UACOC;AACC;;AACA,+BAA4B,IAA5B,GAA4B,MAA5B,GAA4BH,kBAA5B;AACN,KAHK,EAGLI;AAKE,2BAAsB,SAAU,cAAhC;AACA;AAAAC;AAAAC;AAAA,UAA0CF,CAA1C;;AAEI,sCAAiCG,eAAjC,IAAiC,oBAAjC,EAAiC;AACnC,2BAIG,8BAAwBvB,QAAxB,CAJH;AAKAsB,gCAAyB,MAAzB,GAA+BA,cAAcE,aAAd,CAAoBC,aAApB,CAA/B;;AACM;AAGA,gCAA2B,SAA3B,CAA2BC,sBAA3B;AAGN,gBAAMC,kBAA4B,KAA5B,CAA4BD,QAAKA,WAAjC,CAAN;AACA,2BAAyB,yDAAzB;AACF;AACF;AAEAE,oBAAqB,gBAArB;AAEJ;AAEM;;AAEFV,2BAAgB,KAAhB;AAAgB,KAnCX,CADP;AAuCE,mBAAaW,oBAAQ;AAEzB;;AAEM,qCAAuC,MAAvC,GAAuCb,kBAAvC;AACC,KALkB,EAKlB;AACPD;AAEA,KARyB,CAArB;;AASF,iCAAyCe,IAAzC,KAAyC;AACzCpB,yBAAmB,GAAMoB,IAAzB;AACA,KAFA;;AAGSC,8CAA2B;AACpCC,qBAAC,2BADmC;AAEpCC,gCAFoC;AAGpCC;AACA,oBAAmB,cAAnB,GAAuC,EAAvC,GAAuC,CAAvC;AACA,OAFA,CAHoC;AAMpCtB,yBANoC;AAOpCuB,+BAPoC;AAQpCC,8CARoC;AASpCC,8BAToC;AAUpCC,iBAVoC;AAWrCC,oBAXqC;AAatCC,YAbsC;AAgBlCrB,aAhBkC;AAkBtCF;AAlBsC,KAA3B;AAqBHwB,2CAA8C;AACjDT,kDAAqD,IAArD;AACJ,KAFO;AAIRU,oBAAgB;AACR,iCAAqBC,MAAM/B,mBAAN,CAArB;AACFgC;AACL,KAHD;AAIFC;AACD;;KADC;;;AA/H6B,EAA/B","names":["CURRENT_TAB_ID_CHANGE_EVT","ENTRY_FOCUS_EVT","EVT_OPTS","bubbles","cancelable","_sfc_main","defineComponent","name","inheritAttrs","props","emits","setup","emit","ref","rovingFocusGroupRef","getItems","outline","isBackingOut","_a2","onMousedown","isClickFocus","onFocus","e","target","currentTarget","isKeyboardFocus","dispatchEvent","entryFocusEvt","item","activeItem","focusFirst","composeEventHandlers","args","provide","currentTabbedId","loop","tabIndex","rovingFocusGroupRootStyle","orientation","dir","onItemFocus","onItemShiftTab","onBlur","watch","onMounted","unref","on","onBeforeUnmount"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-group-impl.vue"],"sourcesContent":["<template>\n  <slot />\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  readonly,\n  ref,\n  toRef,\n  unref,\n  watch,\n} from 'vue'\nimport { composeEventHandlers, off, on } from '@element-plus/utils'\nimport {\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n  rovingFocusGroupProps,\n} from './roving-focus-group'\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY } from './tokens'\nimport { focusFirst } from './utils'\n\nimport type { StyleValue } from 'vue'\n\nconst CURRENT_TAB_ID_CHANGE_EVT = 'currentTabIdChange'\n\nconst ENTRY_FOCUS_EVT = 'rovingFocusGroup.entryFocus'\nconst EVT_OPTS: EventInit = { bubbles: false, cancelable: true }\nexport default defineComponent({\n  name: 'ElRovingFocusGroupImpl',\n  inheritAttrs: false,\n  props: rovingFocusGroupProps,\n  emits: [CURRENT_TAB_ID_CHANGE_EVT, 'entryFocus'],\n  setup(props, { emit }) {\n    const currentTabbedId = ref<string | null>(\n      (props.currentTabId || props.defaultCurrentTabId) ?? null\n    )\n    const isBackingOut = ref(false)\n    const isClickFocus = ref(false)\n    const rovingFocusGroupRef = ref<HTMLElement | null>(null)\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n    const rovingFocusGroupRootStyle = computed(() => {\n      // casting to any for fix compiler error since HTMLElement.StyleValue does not\n      // support CSSProperties\n      return [\n        {\n          outline: 'none',\n        },\n        props.style as StyleValue,\n      ] as any\n    })\n\n    const onItemFocus = (tabbedId: string) => {\n      emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId)\n    }\n\n    const onItemShiftTab = () => {\n      isBackingOut.value = true\n    }\n\n    const onMousedown = composeEventHandlers(\n      (e: Event) => {\n        props.onMousedown?.(e)\n      },\n      () => {\n        isClickFocus.value = true\n      }\n    )\n\n    const onFocus = composeEventHandlers(\n      (e: FocusEvent) => {\n        props.onFocus?.(e)\n      },\n      (e) => {\n        const isKeyboardFocus = !unref(isClickFocus)\n        const { target, currentTarget } = e\n        if (\n          target === currentTarget &&\n          isKeyboardFocus &&\n          !unref(isBackingOut)\n        ) {\n          const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS)\n          currentTarget?.dispatchEvent(entryFocusEvt)\n\n          if (!entryFocusEvt.defaultPrevented) {\n            const items = getItems<{\n              id: string\n              focusable: boolean\n              active: boolean\n            }>().filter((item) => item.focusable)\n            const activeItem = items.find((item) => item.active)\n            const currentItem = items.find(\n              (item) => item.id === unref(currentTabbedId)\n            )\n            const candidates = [activeItem!, currentItem!, ...items].filter(\n              Boolean\n            )\n            const candidateNodes = candidates.map((item) => item.ref!)\n            focusFirst(candidateNodes)\n          }\n        }\n\n        isClickFocus.value = false\n      }\n    )\n\n    const onBlur = composeEventHandlers(\n      (e: Event) => {\n        props.onBlur?.(e)\n      },\n      () => {\n        isBackingOut.value = false\n      }\n    )\n\n    const handleEntryFocus = (...args: any[]) => {\n      emit('entryFocus', ...args)\n    }\n\n    provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {\n      currentTabbedId: readonly(currentTabbedId),\n      loop: toRef(props, 'loop'),\n      tabIndex: computed(() => {\n        return unref(isBackingOut) ? -1 : 0\n      }),\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      orientation: toRef(props, 'orientation'),\n      dir: toRef(props, 'dir'),\n      onItemFocus,\n      onItemShiftTab,\n      onBlur,\n      onFocus,\n      onMousedown,\n    })\n\n    watch(\n      () => props.currentTabId,\n      (val) => {\n        currentTabbedId.value = val ?? null\n      }\n    )\n\n    onMounted(() => {\n      const rovingFocusGroupEl = unref(rovingFocusGroupRef)!\n      on(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEntryFocus)\n    })\n\n    onBeforeUnmount(() => {\n      const rovingFocusGroupEl = unref(rovingFocusGroupRef)!\n      off(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEntryFocus)\n    })\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}