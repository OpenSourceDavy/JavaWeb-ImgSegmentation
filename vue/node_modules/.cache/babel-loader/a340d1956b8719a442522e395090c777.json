{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (middleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let _debug_loop_count_ = 0;\n\n  for (let i = 0; i < middleware.length; i++) {\n    {\n      _debug_loop_count_++;\n\n      if (_debug_loop_count_ > 100) {\n        throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n      }\n    }\n    const {\n      name,\n      fn\n    } = middleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (reset) {\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n    strategy\n  }) : rects[elementContext]); // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    const clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside of the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n    return {\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\n\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\n\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\n\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\n\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$slice$;\n\n              const placement = (_overflowsData$slice$ = overflowsData.slice().sort((a, b) => a.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0) - b.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\n\nconst hide = function (_temp) {\n  let {\n    strategy = 'referenceHidden',\n    ...detectOverflowOptions\n  } = _temp === void 0 ? {} : _temp;\n  return {\n    name: 'hide',\n\n    async fn(middlewareArguments) {\n      const {\n        rects\n      } = middlewareArguments;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nfunction convertValueToCoords(placement, rects, value, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value({ ...rects,\n    placement\n  }) : value;\n  const isNumber = typeof rawValue === 'number'; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = isNumber ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\n\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const diffCoords = convertValueToCoords(placement, rects, value, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\n\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\n\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({ ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\n\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply,\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        height: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        width: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      const prevDimensions = await platform.getDimensions(elements.floating);\n      apply == null ? void 0 : apply({ ...dimensions,\n        ...rects\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (prevDimensions.width !== nextDimensions.width || prevDimensions.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find; // Find the first rect in which the point is fully inside\n\n\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"sources":["G:/springboot+vue/crm_vue/vue/node_modules/@floating-ui/core/dist/floating-ui.core.esm.development.js"],"names":["getSide","placement","split","getAlignment","getMainAxisFromPlacement","includes","getLengthFromAxis","axis","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","isRTL","console","error","join","filter","name","Error","rects","getElementRects","statefulPlacement","middlewareData","_debug_loop_count_","i","fn","nextX","nextY","data","reset","initialPlacement","elements","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","middlewareArguments","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","offsetParent","getOffsetParent","min","Math","max","within","min$1","value","max$1","arrow","warn","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","centerOffset","hash$1","getOppositePlacement","replace","matched","getAlignmentSides","alignment","mainAlignmentSide","main","cross","hash","start","end","getOppositeAlignmentPlacement","sides","allPlacements","reduce","acc","concat","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_middlewareData$autoP3","_middlewareData$autoP4","_placementsSortedByLe","detectOverflowOptions","placements","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByLeastOverflow","slice","sort","a","b","placementThatFitsOnAllSides","find","every","resetPlacement","getExpandedPlacements","oppositePlacement","flip","_middlewareData$flip","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","flipAlignment","isBasePlacement","overflowsData","push","_middlewareData$flip$","_middlewareData$flip2","nextIndex","_overflowsData$slice$","getSideOffsets","isAnySideFullyClipped","some","hide","_temp","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","isNumber","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","_middlewareData$offse3","_middlewareData$offse4","isOriginSide","size","apply","heightSide","widthSide","xMin","xMax","yMin","yMax","dimensions","prevDimensions","nextDimensions","inline","_await$platform$getCl","fallback","clientRects","getClientRects","getBoundingClientRect","_clientRects$find","firstRect","lastRect","isTop","isLeftSide","maxRight","map","minLeft","measureRects","resetRects"],"mappings":"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","sourcesContent":["function getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (middleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let _debug_loop_count_ = 0;\n\n  for (let i = 0; i < middleware.length; i++) {\n    {\n      _debug_loop_count_++;\n\n      if (_debug_loop_count_ > 100) {\n        throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n      }\n    }\n\n    const {\n      name,\n      fn\n    } = middleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (reset) {\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n    strategy\n  }) : rects[elementContext]); // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    const clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside of the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n    return {\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$slice$;\n\n              const placement = (_overflowsData$slice$ = overflowsData.slice().sort((a, b) => a.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0) - b.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (_temp) {\n  let {\n    strategy = 'referenceHidden',\n    ...detectOverflowOptions\n  } = _temp === void 0 ? {} : _temp;\n  return {\n    name: 'hide',\n\n    async fn(middlewareArguments) {\n      const {\n        rects\n      } = middlewareArguments;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nfunction convertValueToCoords(placement, rects, value, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value({ ...rects,\n    placement\n  }) : value;\n  const isNumber = typeof rawValue === 'number'; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = isNumber ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const diffCoords = convertValueToCoords(placement, rects, value, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({ ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply,\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        height: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        width: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      const prevDimensions = await platform.getDimensions(elements.floating);\n      apply == null ? void 0 : apply({ ...dimensions,\n        ...rects\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (prevDimensions.width !== nextDimensions.width || prevDimensions.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"]},"metadata":{},"sourceType":"module"}