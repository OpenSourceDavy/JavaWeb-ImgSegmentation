{"ast":null,"code":"import request from \"@/utils/request\";\nlet history = [];\n\nfunction Point(x, y, type) {\n  this.x = x;\n  this.y = y;\n  this.type = type; // 左击 1  右击 3\n}\n\nfunction windowToCanvas(e, mycanvas) {\n  // 返回元素的大小以及位置\n  let rect = mycanvas.getBoundingClientRect(); // rect 的宽度会加上 canvas 的 border 会影响精度\n\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width), e.offsetY - rect.top * (mycanvas.height / rect.height), e.which);\n}\n\nfunction showLastHistory(ctx, history) {\n  ctx.putImageData(history[history.length - 1].data, 0, 0);\n}\n\nfunction addHistoy(history, ctx, mycanvas) {\n  history.push({\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\n  });\n}\n\nexport default {\n  name: \"Canvas\",\n\n  data() {\n    return {\n      dialogVisible: false,\n      ctx: null,\n      mycanvas: null,\n      textarea: '',\n      tool: '',\n      imgUrl: '',\n      tempPos: [],\n      posArray: [],\n      form: {},\n      Cwidth: window.screen.width * 0.5,\n      Cheight: window.screen.height * 0.7,\n      tools: [{\n        value: \"3\",\n        label: \"直线\"\n      }, {\n        value: \"1\",\n        label: \"矩形\"\n      }, {\n        value: \"2\",\n        label: \"圆形\"\n      }, {\n        value: \"4\",\n        label: \"任意多边形\"\n      }, {\n        value: \"5\",\n        label: \"点\"\n      }],\n      point: [],\n      angle: '',\n      area: '',\n      isPolygon: false,\n      isLine: false,\n      isArea: false,\n      fill: '',\n      fills: [{\n        value: \"0\",\n        label: \"不填充\"\n      }, {\n        value: \"1\",\n        label: \"填充\"\n      }],\n      color: '',\n      isColor: false,\n      PT: '',\n      MT: '',\n      TL: ''\n    };\n  },\n\n  mounted() {\n    //this.();\n    let str = sessionStorage.getItem(\"img\") || \"{}\";\n    this.form = JSON.parse(str);\n    this.mycanvas = this.$refs.cont;\n    this.ctx = this.mycanvas.getContext('2d');\n    this.mycanvas.width = window.screen.width * 0.5;\n    this.mycanvas.height = window.screen.height * 0.7;\n    console.log(this.form);\n    this.drawImg();\n    this.drawer();\n  },\n\n  methods: {\n    submit() {\n      console.log(this.form.result);\n      this.form.state = \"已评阅\";\n      request.put(\"/img\", this.form).then(res => {\n        console.log(res);\n\n        if (res.code === '0') {\n          this.$message({\n            type: \"success\",\n            message: \"提交成功\"\n          });\n        } else {\n          this.$message({\n            type: \"error\",\n            message: res.message\n          });\n        }\n\n        sessionStorage.removeItem(\"img\");\n        this.$router.push(\"/img\");\n      });\n    },\n\n    judge() {\n      if (this.PT == \"\" || this.MT == \"\" || this.TL == \"\") {\n        this.$alert('请输入三个Cobb角后再点击按钮', '提示', {\n          confirmButtonText: '确定',\n          type: \"warning\"\n        });\n        return false;\n      } else {\n        if (this.PT < 25 && this.MT >= 25 && this.TL < 25) {\n          this.$alert('脊椎侧凸类型：主胸弯', '判断结果', {\n            confirmButtonText: '确定',\n            type: \"info\"\n          });\n        } else if (this.PT >= 25 && this.MT >= 25 && this.TL < 25 && this.MT > this.PT) {\n          this.$alert('脊椎侧凸类型：双胸弯', '判断结果', {\n            confirmButtonText: '确定',\n            type: \"info\"\n          });\n        } else if (this.PT < 25 && this.MT >= 25 && this.TL >= 25 && this.MT > this.TL) {\n          this.$alert('脊椎侧凸类型：双主弯', '判断结果', {\n            confirmButtonText: '确定',\n            type: \"info\"\n          });\n        } else if (this.PT >= 25 && this.MT >= 25 && this.TL >= 25 && this.MT > this.PT && this.TL > this.PT) {\n          this.$alert('脊椎侧凸类型：三主弯', '判断结果', {\n            confirmButtonText: '确定',\n            type: \"info\"\n          });\n        } else if (this.PT < 25 && this.MT < 25 && this.TL >= 25) {\n          this.$alert('脊椎侧凸类型：胸腰弯/腰弯', '判断结果', {\n            confirmButtonText: '确定',\n            type: \"info\"\n          });\n        } else if (this.PT < 25 && this.MT >= 25 && this.TL >= 25 && this.TL > this.MT) {\n          this.$alert('脊椎侧凸类型：胸腰弯/腰弯-主胸弯', '判断结果', {\n            confirmButtonText: '确定',\n            type: \"info\"\n          });\n        } else {\n          this.$alert('没有该类型的侧凸', '提示', {\n            confirmButtonText: '确定',\n            type: \"warning\"\n          });\n        }\n      }\n    },\n\n    handleEvent(e) {\n      //console.log(e)\n      this.drawer();\n    },\n\n    changeFill() {\n      if (this.fill == 0) {\n        this.isColor = false;\n      } else {\n        this.isColor = true;\n      }\n    },\n\n    changeTool(t) {\n      this.point = [];\n      this.angle = '';\n      this.drawer();\n\n      if (t == '1') {\n        //画矩形\n        this.isArea = true;\n        this.isLine = false;\n        this.isPolygon = false;\n        this.fill = '';\n        this.isColor = false;\n      } else if (t == '2') {\n        //画圆\n        this.isArea = true;\n        this.isPolygon = false;\n        this.isLine = false;\n        this.fill = '';\n        this.isColor = false;\n      } else if (t == '3') {\n        //画直线\n        this.isArea = false;\n        this.isPolygon = false;\n        this.isLine = true;\n        this.isColor = false;\n      } else if (t == '4') {\n        //画多边形\n        this.isArea = true;\n        this.isPolygon = true;\n        this.isLine = false;\n        this.fill = '';\n        this.isColor = false;\n      } else if (t == '5') {\n        //画点\n        this.isArea = false;\n        this.isPolygon = false;\n        this.isLine = false;\n        this.isColor = false;\n      }\n    },\n\n    drawImg() {\n      let img = new Image();\n      img.src = this.form.img;\n      img.crossOrigin = '';\n\n      img.onload = () => {\n        this.ctx.drawImage(img, this.Cwidth / 4, 0, 400, this.Cheight);\n      };\n    },\n\n    getTan(p1, p2, p3, p4) {\n      let k1 = (p2.y - p1.y) / (p2.x - p1.x);\n      let k2 = (p4.y - p3.y) / (p4.x - p3.x);\n      let tan = (k1 - k2) / (1 + k1 * k2);\n      return Math.abs(tan);\n    },\n\n    myAngle(tan) {\n      //Math.atan,传入tan值，计算弧度，角度等于弧度乘以180/π\n      let result = Math.atan(tan) * 180 / Math.PI; // let result2 = Math.atan(0.169) * 180 / Math.PI;\n      // console.log(result2)\n\n      return result;\n    },\n\n    getPolygonArea() {\n      let area = 0; //多边形面积公式 s = (x1y2-x2y1)/2 + (x2y3-x3y2)/2 +......+ (xny1-x1yn)/2\n      //(a[i]*b[(i+1)%n]-a[(i+1)%n]*b[i])\n\n      let l = this.point.length;\n\n      for (let i = 0; i < l; i++) {\n        area += this.point[i].x * this.point[(i + 1) % l].y - this.point[(i + 1) % l].x * this.point[i].y;\n      }\n\n      this.area = Math.abs(area) / 2;\n      this.area = this.area / 100; //数值太大，统一缩小100倍\n    },\n\n    // 绘制矩形\n    drawerRect(ctx, left, top, w, h) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      if (this.fill == 1) {\n        //是否填充图形区域\n        ctx.fillStyle = this.color; //设置填充颜色\n\n        ctx.fill(); //开始填充\n      }\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(left, top, w, h);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [left, top, w, h]\n      };\n    },\n\n    // 绘制圆\n    drawerCircle(ctx, x, y, r) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      if (this.fill == 1) {\n        //是否填充图形区域\n        ctx.fillStyle = this.color; //设置填充颜色\n\n        ctx.fill(); //开始填充\n      }\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.beginPath(); // 开始路径\n\n      ctx.arc(x, y, r, 0, Math.PI * 2, true); // 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\n\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, r]\n      };\n    },\n\n    // 绘制直线\n    drawerLine(ctx, x, y, z, n) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(z, n);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, z, n]\n      };\n    },\n\n    // 绘制点\n    drawerPoint(ctx, x, y) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n      this.posArray.push({\n        data: [x, y]\n      });\n    },\n\n    //  多边形个顶点连线，画多边形\n    drawPolygon() {\n      //排序，决定个点之间的连线顺序，尽量避免各边相交\n      let ps = this.sortPoints(this.point);\n    },\n\n    //对多边形各个顶点排序\n    sortPoints(points) {\n      if (points == \"\") {\n        return false;\n      } //让点按x轴升序排序\n\n\n      let tempPoints = points.sort((p1, p2) => {\n        return p1.x - p2.x;\n      }); //找到x轴的左右极点\n\n      let firstP = tempPoints[0]; //x轴最左端\n\n      let lastP = tempPoints[tempPoints.length - 1]; //x轴最右端\n      //如果多个x轴的左右极点，则按y轴排出左右极点\n\n      let smallXP = tempPoints.filter(ball => ball.x === firstP.x);\n      let bigXP = tempPoints.filter(ball => ball.x === lastP.x); // 处理左右极点有多个的情况,y轴降序\n\n      if (smallXP.length > 1) {\n        smallXP.sort((ballA, ballB) => {\n          return ballB.y - ballA.y;\n        });\n      }\n\n      if (bigXP.length > 1) {\n        bigXP.sort((ballA, ballB) => {\n          return ballB.y - ballA.y;\n        });\n      }\n\n      firstP = smallXP[0];\n      lastP = bigXP[0]; // 获得两个极点连线的角度\n\n      let splitLineAngle = Math.atan2(lastP.y - firstP.y, lastP.x - firstP.x);\n      let upperP = []; //上点  小于splitLineAngle的都是上点  X轴降序连接\n\n      let lowerP = []; //下点  大于splitLineAngle的都是下点  X轴升序连接\n      //计算弧度  分为上下点数组\n\n      tempPoints.forEach(p => {\n        if (p === firstP || p === lastP) {\n          return false;\n        }\n\n        let angle = Math.atan2(p.y - firstP.y, p.x - firstP.x);\n\n        if (angle > splitLineAngle) {\n          lowerP.push(p);\n        } else {\n          upperP.push(p);\n        }\n      }); //升序\n\n      lowerP = lowerP.sort((p1, p2) => {\n        if (p1.x !== p2.x) {\n          // 处理X轴相同情况的排序\n          return p1.x - p2.x;\n        }\n\n        return p2.y - p1.y;\n      }); //降序\n\n      upperP = upperP.sort((p1, p2) => {\n        if (p1.x !== p2.x) {\n          // 处理X轴相同情况的排序\n          return p2.x - p1.x;\n        }\n\n        return p2.y - p1.x;\n      }); // 逆时针连接所有的点\n\n      let myPoints = [firstP].concat(lowerP, [lastP], upperP); //调用画直线的方法，进行连线\n\n      let length = myPoints.length;\n      this.ctx.save();\n      this.ctx.beginPath();\n      this.ctx.lineWidth = '2'; // 画笔粗细\n\n      this.ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      this.ctx.moveTo(myPoints[0].x, myPoints[0].y);\n\n      for (let i = 0; i < length; i++) {\n        this.ctx.lineTo(myPoints[i].x, myPoints[i].y);\n      }\n\n      this.ctx.lineTo(myPoints[0].x, myPoints[0].y);\n      this.ctx.stroke();\n\n      if (this.fill == 1) {\n        //是否填充图形区域\n        this.ctx.fillStyle = this.color; //设置填充颜色\n\n        this.ctx.fill(); //开始填充\n      }\n\n      this.ctx.restore();\n      this.getPolygonArea(); //计算多边形体积\n      //画完清空\n\n      this.point = [];\n      myPoints = [];\n    },\n\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\n    drawer() {\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      let that = this;\n\n      if (that.tool === '1') {\n        //画矩形\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let w = Math.abs(point.x - mousedown.x);\n            let h = Math.abs(point.y - mousedown.y);\n            let left = point.x > mousedown.x ? mousedown.x : point.x;\n            let top = point.y > mousedown.y ? mousedown.y : point.y;\n            let pos = that.drawerRect(ctx, left, top, w, h);\n            that.area = w * h / 100; //计算矩形面积 数值太大，统一缩小100倍\n\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '2') {\n        // 画圆\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas); //圆上两点，其连线过圆心，长度是直径\n\n            let rx = (point.x - mousedown.x) / 2;\n            let ry = (point.y - mousedown.y) / 2;\n            let r = Math.sqrt(rx * rx + ry * ry); //a平方 + b平方 = c平方\n            //求圆面积\n\n            that.area = Math.PI * r * r / 100; //数值太大，统一缩小100倍\n\n            that.area = Math.round(that.area * 1000) / 1000; //取小数点后三位\n\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '3') {\n        //画直线\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            let mouseup = windowToCanvas(e, mycanvas); //存直线的起始点和终点，有四个点则确定有两条直线，再求其的夹角\n\n            that.point.push(mouseup);\n            that.point.push(mousedown);\n            this.point = that.point;\n            let l = that.point.length;\n\n            if (l >= 4) {\n              //计算tan的值\n              let tan = that.getTan(that.point[l - 4], that.point[l - 3], that.point[l - 2], that.point[l - 1]); //根据tan值求角度\n\n              let angle = that.myAngle(tan);\n              that.angle = Math.round(angle * 1000) / 1000; //取小数点后三位\n\n              that.angle = that.angle + \"°\"; //加上角度\n              //that.point = []\n            }\n\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '4') {\n        //画多边形\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (e) {\n          let point = windowToCanvas(e, mycanvas);\n          that.point.push(point);\n          that.drawerPoint(ctx, point.x, point.y);\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '5') {\n        //画点\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (event) {\n          let rect = mycanvas.getBoundingClientRect();\n          let CanvasPos = {\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\n          };\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y);\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      }\n    },\n\n    // 重置\n    resetMap() {\n      // 标注的信息都放在这个数组中\n      this.posArray = [];\n      history = [history[0]];\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height);\n      addHistoy(history, ctx, mycanvas);\n      this.drawImg();\n      this.tool = '';\n      this.point = [];\n      this.isPolygon = false;\n      this.isLine = false;\n      this.isArea = false;\n      this.isColor = false;\n    },\n\n    // 取消上一步操作\n    cancel() {\n      if (history.length > 1) {\n        this.posArray.pop();\n        history.pop();\n\n        if (this.tool == 3) {\n          this.point.pop();\n          this.point.pop();\n        }\n\n        let mycanvas = this.$refs.cont;\n        let ctx = mycanvas.getContext('2d');\n        showLastHistory(ctx, history);\n      } else {\n        this.drawImg();\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["request","history","Point","x","y","type","windowToCanvas","e","mycanvas","rect","getBoundingClientRect","offsetX","left","width","offsetY","top","height","which","showLastHistory","ctx","putImageData","length","data","addHistoy","push","getImageData","name","dialogVisible","textarea","tool","imgUrl","tempPos","posArray","form","Cwidth","window","screen","Cheight","tools","value","label","point","angle","area","isPolygon","isLine","isArea","fill","fills","color","isColor","PT","MT","TL","mounted","str","sessionStorage","getItem","JSON","parse","$refs","cont","getContext","console","log","drawImg","drawer","methods","submit","result","state","put","then","res","code","$message","message","removeItem","$router","judge","$alert","confirmButtonText","handleEvent","changeFill","changeTool","t","img","Image","src","crossOrigin","onload","drawImage","getTan","p1","p2","p3","p4","k1","k2","tan","Math","abs","myAngle","atan","PI","getPolygonArea","l","i","drawerRect","w","h","strokeStyle","fillStyle","lineWidth","save","beginPath","stroke","restore","drawerCircle","r","arc","drawerLine","z","n","moveTo","lineTo","drawerPoint","closePath","drawPolygon","ps","sortPoints","points","tempPoints","sort","firstP","lastP","smallXP","filter","ball","bigXP","ballA","ballB","splitLineAngle","atan2","upperP","lowerP","forEach","p","myPoints","concat","that","onclick","onmousedown","preventDefault","mousedown","onmousemove","pos","onmouseup","rx","ry","sqrt","round","mouseup","event","CanvasPos","clientX","clientY","resetMap","clearRect","cancel","pop"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-row>\r\n      <el-col :span=\"12\">\r\n        <!--canvas居中：display设置为block-->\r\n        <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n                @click=\"handleEvent\"\r\n        >\r\n        </canvas>\r\n      </el-col>\r\n      <el-col :span=\"2\" style=\"margin-left: 20px\">\r\n        <span>专家意见：</span>\r\n      </el-col>\r\n      <el-col :span=\"9\" style=\"text-align:left\">\r\n        <el-input\r\n            type=\"textarea\"\r\n            :rows=\"27\"\r\n            placeholder=\"请输入内容\"\r\n            v-model=\"this.form.result\">\r\n        </el-input>\r\n        <el-button type=\"primary\" style=\"margin-left: 510px;text-align:right;\" @click=\"submit\">提交</el-button>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div style=\"margin: 10px 0px;display: flex\">\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"cancel\" v-show=\"!isPolygon\">撤销</el-button>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"resetMap\">重置</el-button>\r\n    <span style=\"margin-left: 5px\">选择绘制图案：</span>\r\n    <el-select v-model=\"tool\" clearable @change=\"changeTool\"\r\n               size=\"small\">\r\n      <el-option\r\n          v-for=\"item in tools\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\">\r\n      </el-option>\r\n    </el-select>\r\n    <div>\r\n      <span style=\"margin-left: 5px;text-align:right;\" v-show=\"isLine\">最新两条直线的夹角为：{{angle}}</span>\r\n      <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"drawPolygon\"\r\n                 v-show=\"isPolygon\"\r\n      >画多边形</el-button>\r\n      <span style=\"margin-left: 5px;text-align:right;\" v-show=\"isArea\">最新图形的面积为：{{area}}</span>\r\n    </div>\r\n\r\n  </div>\r\n  <div v-show=\"isLine\">\r\n    <span style=\"margin-left: 10px;text-align:right;\">请输入三个Cobb角判断脊椎侧凸类型：</span>\r\n    <span style=\"margin-left: 10px;text-align:right;\">上胸弯：</span>\r\n    <el-input v-model=\"PT\" style=\"width: 80px;\"></el-input>\r\n    <span style=\"margin-left: 10px;text-align:right;\">主胸弯：</span>\r\n    <el-input v-model=\"MT\" style=\"width: 80px;\"></el-input>\r\n    <span style=\"margin-left: 10px;text-align:right;\">腰胸弯/腰弯：</span>\r\n    <el-input v-model=\"TL\" style=\"width: 80px;\"></el-input>\r\n    <el-button type=\"primary\" style=\"margin-left: 10px;text-align:right;\" @click=\"judge\">判断</el-button>\r\n  </div>\r\n\r\n  <div>\r\n    <div v-show=\"isArea\">\r\n      <span style=\"margin-left: 10px\">是否填充所画区域：</span>\r\n      <el-select v-model=\"fill\" clearable @change=\"changeFill\"\r\n                 size=\"small\">\r\n        <el-option\r\n            v-for=\"item in fills\"\r\n            :key=\"item.value\"\r\n            :label=\"item.label\"\r\n            :value=\"item.value\">\r\n        </el-option>\r\n      </el-select>\r\n      <span style=\"margin-left: 10px\" v-show=\"isColor\">请选择填充颜色：</span>\r\n      <el-color-picker v-model=\"color\" v-show=\"isColor\"></el-color-picker>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  let rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width),\r\n      e.offsetY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      dialogVisible:false,\r\n      ctx:null,\r\n      mycanvas:null,\r\n      textarea:'',\r\n      tool:'',\r\n      imgUrl:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n      form: {},\r\n      Cwidth:(window.screen.width)*0.5,\r\n      Cheight:(window.screen.height)*0.7,\r\n      tools:[\r\n        {value:\"3\", label:\"直线\"},\r\n        {value:\"1\", label:\"矩形\"},\r\n        {value:\"2\", label:\"圆形\"},\r\n        {value:\"4\", label:\"任意多边形\"},\r\n        {value:\"5\", label:\"点\"},\r\n      ],\r\n      point:[],\r\n      angle:'',\r\n      area:'',\r\n      isPolygon:false,\r\n      isLine:false,\r\n      isArea:false,\r\n      fill:'',\r\n      fills:[\r\n        {value:\"0\", label:\"不填充\"},\r\n        {value:\"1\", label:\"填充\"},\r\n      ],\r\n      color:'',\r\n      isColor:false,\r\n      PT:'',\r\n      MT:'',\r\n      TL:'',\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.();\r\n    let str = sessionStorage.getItem(\"img\") || \"{}\"\r\n    this.form = JSON.parse(str)\r\n\r\n    this.mycanvas = this.$refs.cont\r\n    this.ctx = this.mycanvas.getContext('2d');\r\n    this.mycanvas.width = (window.screen.width)*0.5\r\n    this.mycanvas.height = (window.screen.height)*0.7\r\n    console.log(this.form)\r\n    this.drawImg()\r\n    this.drawer();\r\n\r\n  },\r\n\r\n  methods:{\r\n\r\n    submit(){\r\n      console.log(this.form.result)\r\n      this.form.state = \"已评阅\"\r\n      request.put(\"/img\",this.form).then(res => {\r\n        console.log(res)\r\n        if(res.code === '0'){\r\n          this.$message({\r\n            type:\"success\",\r\n            message:\"提交成功\"\r\n          })\r\n        }else{\r\n          this.$message({\r\n            type:\"error\",\r\n            message:res.message\r\n          })\r\n        }\r\n        sessionStorage.removeItem(\"img\")\r\n        this.$router.push(\"/img\")\r\n      })\r\n    },\r\n\r\n    judge(){\r\n      if(this.PT == \"\" || this.MT == \"\" || this.TL == \"\"){\r\n        this.$alert('请输入三个Cobb角后再点击按钮', '提示', {\r\n          confirmButtonText: '确定',\r\n          type:\"warning\"\r\n        });\r\n        return false\r\n      }else{\r\n        if(this.PT < 25 && this.MT >=25 && this.TL <25){\r\n          this.$alert('脊椎侧凸类型：主胸弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT >= 25 && this.MT >= 25 && this.TL < 25 && this.MT > this.PT){\r\n          this.$alert('脊椎侧凸类型：双胸弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT < 25 && this.MT >= 25 && this.TL >= 25 && this.MT > this.TL){\r\n          this.$alert('脊椎侧凸类型：双主弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT >= 25 && this.MT >= 25 && this.TL >= 25 && this.MT > this.PT && this.TL > this.PT){\r\n          this.$alert('脊椎侧凸类型：三主弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT < 25 && this.MT < 25 && this.TL >= 25){\r\n          this.$alert('脊椎侧凸类型：胸腰弯/腰弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else if(this.PT < 25 && this.MT >= 25 && this.TL >= 25 && this.TL > this.MT){\r\n          this.$alert('脊椎侧凸类型：胸腰弯/腰弯-主胸弯', '判断结果', {\r\n            confirmButtonText: '确定',\r\n            type:\"info\"\r\n          });\r\n        }else{\r\n          this.$alert('没有该类型的侧凸', '提示', {\r\n            confirmButtonText: '确定',\r\n            type:\"warning\"\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n    handleEvent(e){\r\n      //console.log(e)\r\n      this.drawer();\r\n    },\r\n\r\n    changeFill(){\r\n      if(this.fill == 0){\r\n        this.isColor = false\r\n      }else{\r\n        this.isColor = true\r\n      }\r\n    },\r\n\r\n    changeTool(t){\r\n      this.point = [];\r\n      this.angle = '';\r\n      this.drawer();\r\n      if(t == '1'){\r\n        //画矩形\r\n        this.isArea = true\r\n        this.isLine = false\r\n        this.isPolygon = false\r\n        this.fill = ''\r\n        this.isColor =false\r\n      }else if(t == '2'){\r\n        //画圆\r\n        this.isArea = true\r\n        this.isPolygon = false\r\n        this.isLine = false\r\n        this.fill = ''\r\n        this.isColor =false\r\n      }else if(t == '3'){\r\n        //画直线\r\n        this.isArea = false\r\n        this.isPolygon = false\r\n        this.isLine = true\r\n        this.isColor = false\r\n      }else if(t == '4'){\r\n        //画多边形\r\n        this.isArea = true\r\n        this.isPolygon = true\r\n        this.isLine = false\r\n        this.fill = ''\r\n        this.isColor =false\r\n      }else if(t == '5'){\r\n        //画点\r\n        this.isArea = false\r\n        this.isPolygon = false\r\n        this.isLine = false\r\n        this.isColor = false\r\n      }\r\n    },\r\n\r\n    drawImg(){\r\n      let img = new Image();\r\n      img.src = this.form.img;\r\n      img.crossOrigin = '';\r\n      img.onload = () => {\r\n        this.ctx.drawImage(img, this.Cwidth/4, 0, 400, this.Cheight);\r\n      }\r\n    },\r\n\r\n    getTan(p1,p2,p3,p4){\r\n      let k1 = (p2.y - p1.y) / (p2.x - p1.x)\r\n      let k2 = (p4.y - p3.y) / (p4.x - p3.x)\r\n\r\n      let tan = (k1-k2) / (1+k1*k2)\r\n      return Math.abs(tan);\r\n    },\r\n\r\n    myAngle(tan){\r\n      //Math.atan,传入tan值，计算弧度，角度等于弧度乘以180/π\r\n      let result = Math.atan(tan) * 180 / Math.PI;\r\n      // let result2 = Math.atan(0.169) * 180 / Math.PI;\r\n      // console.log(result2)\r\n      return result;\r\n    },\r\n\r\n    getPolygonArea(){\r\n      let area = 0\r\n      //多边形面积公式 s = (x1y2-x2y1)/2 + (x2y3-x3y2)/2 +......+ (xny1-x1yn)/2\r\n      //(a[i]*b[(i+1)%n]-a[(i+1)%n]*b[i])\r\n      let l = this.point.length\r\n      for(let i = 0; i < l; i++){\r\n        area += this.point[i].x * this.point[(i+1)%l].y - this.point[(i+1)%l].x * this.point[i].y\r\n      }\r\n      this.area = Math.abs(area)/2\r\n      this.area = this.area/100 //数值太大，统一缩小100倍\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      if(this.fill == 1){\r\n        //是否填充图形区域\r\n        ctx.fillStyle=this.color;//设置填充颜色\r\n        ctx.fill();//开始填充\r\n      }\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      if(this.fill == 1){\r\n        //是否填充图形区域\r\n        ctx.fillStyle=this.color;//设置填充颜色\r\n        ctx.fill();//开始填充\r\n      }\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    //  多边形个顶点连线，画多边形\r\n    drawPolygon(){\r\n      //排序，决定个点之间的连线顺序，尽量避免各边相交\r\n      let ps = this.sortPoints(this.point);\r\n    },\r\n\r\n    //对多边形各个顶点排序\r\n    sortPoints(points){\r\n      if(points == \"\"){\r\n        return false\r\n      }\r\n\r\n      //让点按x轴升序排序\r\n      let tempPoints = points.sort((p1,p2) =>{\r\n        return  p1.x-p2.x\r\n      })\r\n\r\n      //找到x轴的左右极点\r\n      let firstP = tempPoints[0]  //x轴最左端\r\n      let lastP = tempPoints[tempPoints.length-1]  //x轴最右端\r\n\r\n      //如果多个x轴的左右极点，则按y轴排出左右极点\r\n      let smallXP = tempPoints.filter(ball => ball.x === firstP.x)\r\n      let bigXP = tempPoints.filter(ball => ball.x === lastP.x)\r\n      // 处理左右极点有多个的情况,y轴降序\r\n      if (smallXP.length > 1) {\r\n        smallXP.sort((ballA, ballB) => {\r\n          return ballB.y - ballA.y\r\n        })\r\n      }\r\n      if (bigXP.length > 1) {\r\n        bigXP.sort((ballA, ballB) => {\r\n          return ballB.y - ballA.y\r\n        })\r\n      }\r\n      firstP = smallXP[0]\r\n      lastP = bigXP[0]\r\n\r\n      // 获得两个极点连线的角度\r\n      let splitLineAngle = Math.atan2(lastP.y - firstP.y, lastP.x - firstP.x);\r\n      let upperP = []   //上点  小于splitLineAngle的都是上点  X轴降序连接\r\n      let lowerP = []   //下点  大于splitLineAngle的都是下点  X轴升序连接\r\n\r\n      //计算弧度  分为上下点数组\r\n      tempPoints.forEach(p => {\r\n        if (p === firstP || p === lastP) {\r\n          return false\r\n        }\r\n        let angle = Math.atan2(p.y - firstP.y, p.x - firstP.x);\r\n        if (angle > splitLineAngle) {\r\n          lowerP.push(p)\r\n        } else {\r\n          upperP.push(p)\r\n        }\r\n      })\r\n\r\n      //升序\r\n      lowerP = lowerP.sort((p1, p2) => {\r\n        if (p1.x !== p2.x) {  // 处理X轴相同情况的排序\r\n          return p1.x - p2.x\r\n        }\r\n        return p2.y - p1.y\r\n      })\r\n      //降序\r\n      upperP = upperP.sort((p1, p2) => {\r\n        if (p1.x !== p2.x) {  // 处理X轴相同情况的排序\r\n          return p2.x - p1.x\r\n        }\r\n        return p2.y - p1.x\r\n      })\r\n\r\n      // 逆时针连接所有的点\r\n      let myPoints = [firstP].concat(lowerP, [lastP], upperP)\r\n      //调用画直线的方法，进行连线\r\n      let length = myPoints.length\r\n      this.ctx.save()\r\n      this.ctx.beginPath()\r\n      this.ctx.lineWidth = '2' // 画笔粗细\r\n      this.ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      this.ctx.moveTo(myPoints[0].x,myPoints[0].y)\r\n      for(let i = 0; i<length  ; i++){\r\n        this.ctx.lineTo(myPoints[i].x,myPoints[i].y)\r\n      }\r\n      this.ctx.lineTo(myPoints[0].x,myPoints[0].y)\r\n      this.ctx.stroke()\r\n      if(this.fill == 1){\r\n        //是否填充图形区域\r\n        this.ctx.fillStyle=this.color;//设置填充颜色\r\n        this.ctx.fill();//开始填充\r\n      }\r\n      this.ctx.restore()\r\n\r\n\r\n      this.getPolygonArea() //计算多边形体积\r\n\r\n      //画完清空\r\n      this.point = []\r\n      myPoints = []\r\n    },\r\n\r\n\r\n\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      let that = this\r\n      if (that.tool === '1') {\r\n        //画矩形\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            that.area = (w*h)/100 //计算矩形面积 数值太大，统一缩小100倍\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '2') {\r\n        // 画圆\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            //圆上两点，其连线过圆心，长度是直径\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)  //a平方 + b平方 = c平方\r\n            //求圆面积\r\n            that.area = (Math.PI * r * r) /100  //数值太大，统一缩小100倍\r\n            that.area = Math.round(that.area * 1000) / 1000 //取小数点后三位\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '3') {\r\n        //画直线\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            let mouseup = windowToCanvas(e, mycanvas)\r\n            //存直线的起始点和终点，有四个点则确定有两条直线，再求其的夹角\r\n            that.point.push(mouseup)\r\n            that.point.push(mousedown)\r\n            this.point = that.point\r\n            let l = that.point.length\r\n            if(l >= 4){\r\n              //计算tan的值\r\n              let tan = that.getTan(that.point[l-4],that.point[l-3],that.point[l-2],that.point[l-1])\r\n              //根据tan值求角度\r\n              let angle = that.myAngle(tan)\r\n              that.angle = Math.round(angle*1000)/1000  //取小数点后三位\r\n              that.angle = that.angle+\"°\" //加上角度\r\n              //that.point = []\r\n            }\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '4') {\r\n        //画多边形\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (e) {\r\n          let point = windowToCanvas(e, mycanvas)\r\n          that.point.push(point)\r\n          that.drawerPoint(ctx, point.x, point.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '5') {\r\n        //画点\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let rect = mycanvas.getBoundingClientRect()\r\n          let CanvasPos = {\r\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\r\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\r\n          }\r\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n      this.drawImg();\r\n      this.tool = '';\r\n      this.point = []\r\n      this.isPolygon = false\r\n      this.isLine = false\r\n      this.isArea = false\r\n      this.isColor = false\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        this.posArray.pop()\r\n        history.pop()\r\n        if(this.tool == 3){\r\n          this.point.pop()\r\n          this.point.pop()\r\n        }\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }else{\r\n        this.drawImg();\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}