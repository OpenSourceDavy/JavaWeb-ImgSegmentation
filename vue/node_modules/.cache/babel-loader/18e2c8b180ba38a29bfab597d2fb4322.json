{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, withDirectives, vModelCheckbox, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxProps, useCheckbox, useCheckboxGroup } from './useCheckbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCheckboxButton\",\n  props: useCheckboxProps,\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n\n  setup(props) {\n    const {\n      focus,\n      isChecked,\n      isDisabled,\n      size,\n      model,\n      handleChange\n    } = useCheckbox(props);\n    const {\n      checkboxGroup\n    } = useCheckboxGroup();\n    const ns = useNamespace(\"checkbox\");\n    const activeStyle = computed(() => {\n      var _a, _b, _c, _d;\n\n      const fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : \"\";\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : \"\",\n        boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : null\n      };\n    });\n    return {\n      focus,\n      isChecked,\n      isDisabled,\n      model,\n      handleChange,\n      activeStyle,\n      size,\n      ns\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-checked\", \"aria-disabled\"];\nconst _hoisted_2 = [\"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_3 = [\"name\", \"tabindex\", \"disabled\", \"value\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"label\", {\n    class: normalizeClass([_ctx.ns.b(\"button\"), _ctx.ns.bm(\"button\", _ctx.size), _ctx.ns.is(\"disabled\", _ctx.isDisabled), _ctx.ns.is(\"checked\", _ctx.isChecked), _ctx.ns.is(\"focus\", _ctx.focus)]),\n    role: \"checkbox\",\n    \"aria-checked\": _ctx.isChecked,\n    \"aria-disabled\": _ctx.isDisabled\n  }, [_ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.model = $event),\n    class: normalizeClass(_ctx.ns.be(\"button\", \"original\")),\n    type: \"checkbox\",\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.isDisabled,\n    \"true-value\": _ctx.trueLabel,\n    \"false-value\": _ctx.falseLabel,\n    onChange: _cache[1] || (_cache[1] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onFocus: _cache[2] || (_cache[2] = $event => _ctx.focus = true),\n    onBlur: _cache[3] || (_cache[3] = $event => _ctx.focus = false)\n  }, null, 42, _hoisted_2)), [[vModelCheckbox, _ctx.model]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 1,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.model = $event),\n    class: normalizeClass(_ctx.ns.be(\"button\", \"original\")),\n    type: \"checkbox\",\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.isDisabled,\n    value: _ctx.label,\n    onChange: _cache[5] || (_cache[5] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onFocus: _cache[6] || (_cache[6] = $event => _ctx.focus = true),\n    onBlur: _cache[7] || (_cache[7] = $event => _ctx.focus = false)\n  }, null, 42, _hoisted_3)), [[vModelCheckbox, _ctx.model]]), _ctx.$slots.default || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    class: normalizeClass(_ctx.ns.be(\"button\", \"inner\")),\n    style: normalizeStyle(_ctx.isChecked ? _ctx.activeStyle : null)\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 6)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nvar CheckboxButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue\"]]);\n\nexport { CheckboxButton as default };","map":{"version":3,"mappings":";;;;;;;;AAwDA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,oBADuB;AAE7BC,OAAO,kBAFsB;AAG7BC,SAAO,CAACC,kBAAD,EAAqB,QAArB,CAHsB;;AAI7BC,QAAMH,KAAN,EAAa;AACL;AAAEI,WAAF;AAASC,eAAT;AAAoBC,gBAApB;AAAgCC,UAAhC;AAAsCC,WAAtC;AAA6CC;AAA7C,QACJC,YAAYV,KAAZ,CADI;AAEA;AAAEW;AAAF,QAAoBC,gBAAiB,EAArC;AACA,eAAKC,aAAa,UAAb,CAAL;AAEA,wBAAcC,SAAS,MAAM;AAC3B;;AACC;AAAA,aACY;AACjBC,uBAAa,WADI;AAEjBC,mBAAsB,WAFL;AAGjBC,qBAAuB,8BAA4B,MAA5B,GAA4BN,uBAA5B,KAA4B,IAA5B,GAA4B,MAA5B,GAA4BO,QAAnD,KAAmD,IAAnD,GAAmDC,EAAnD,GAAmD,EAHlC;AAInBC;AAJmB,OADZ;AAQF,KAVa,CAAd;AAWJ;AACAhB,WADA;AAEAC,eAFA;AAGAC,gBAHA;AAIAE,WAJA;AAKAC,kBALA;AAMAY,iBANA;AAOAd,UAPA;AAQFe;AARE;AAUL;;AA/B8B,EAA/B;;;;;;2BARUC;AAAA,SA9CAC;AAAAC,yBAAc,EAAkBC,QAAGC,CAAH,CAAK,QAAL,CAAlB,EAA+CD,QAAGE,EAAH,CAAK,QAAL,EAAKF,IAAuB,KAA5B,CAA/C,EAAoFA,QAAGG,EAAH,CAAK,UAAL,EAA0BH,eAA1B,CAApF,EAAuHA,QAAGG,EAAH,CAAK,SAAL,EAAoBH,cAApB,CAAvH,EAA2IA,+BAA3I,EAAd;AAQLI,QAAc,YART;AASL,oBAAeJ,cATV;AASU;AATV,KAYE,CAYNA;UAAA;AAVC,2BAAOH,cAAKA,yCAAL,CAUR;AATAE,SAAK,kDASL;AARCM,QAAM,YAQP;AAPChC,QAAU,WAOX;AANCiC,YAAU,eAMX;AALCC,YAAY,iBAKb;AAJC,kBAAaP,cAId;AAHC,mBAAQA,eAGT;AAFCQ,qDAAYR,+CAAZ,CAED;AADCS,iDAAWT,iBAAX,CACD;AADYU;AACZ,6BAXc,8BAWd,IAaAC;UAAA;AATC,2BAAOd,cAAKA,yCAAL,CASR;AARAE,SAAK,kDAQL;AAPCM,QAAM,YAOP;AANChC,QAAU,WAMX;AALCiC,YAAU,eAKX;AAJCC,YAAO,iBAIR;AAHCK,eAAQ,MAGT;AAFCJ,qDAAYR,+CAAZ,CAED;AADCS,iDAAWT,iBAAX,CACD;AADYU;AACZ,6BAVc,8BAUd,CAzBM,EAiCDV;AAJJa,OAAK,GAID;AAHJd,WAAKe,cAAE,sBAAuB,OAAvB,EAGH;AAH0BC;AAG1B,KADL,CAAwBC,mCAAf,EAAe,EAAV,uDAAU,CAAxB,CACK,wCAjCC,CAZF,iBA8CA","names":["_sfc_main","defineComponent","name","props","emits","UPDATE_MODEL_EVENT","setup","focus","isChecked","isDisabled","size","model","handleChange","useCheckbox","checkboxGroup","useCheckboxGroup","useNamespace","computed","backgroundColor","borderColor","color","_c","_d","boxShadow","activeStyle","ns","_cache","_openBlock","class","_ctx","b","bm","is","role","type","tabindex","disabled","onChange","onFocus","onBlur","_withDirectives","value","key","_normalizeClass","style","_renderSlot"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-button.vue"],"sourcesContent":["<template>\n  <label\n    :class=\"[\n      ns.b('button'),\n      ns.bm('button', size),\n      ns.is('disabled', isDisabled),\n      ns.is('checked', isChecked),\n      ns.is('focus', focus),\n    ]\"\n    role=\"checkbox\"\n    :aria-checked=\"isChecked\"\n    :aria-disabled=\"isDisabled\"\n  >\n    <input\n      v-if=\"trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueLabel\"\n      :false-value=\"falseLabel\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"label\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : null\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useCheckbox, useCheckboxGroup, useCheckboxProps } from './useCheckbox'\n\nexport default defineComponent({\n  name: 'ElCheckboxButton',\n  props: useCheckboxProps,\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n  setup(props) {\n    const { focus, isChecked, isDisabled, size, model, handleChange } =\n      useCheckbox(props)\n    const { checkboxGroup } = useCheckboxGroup()\n    const ns = useNamespace('checkbox')\n\n    const activeStyle = computed(() => {\n      const fillValue = checkboxGroup?.fill?.value ?? ''\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: checkboxGroup?.textColor?.value ?? '',\n        boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : null,\n      }\n    })\n\n    return {\n      focus,\n      isChecked,\n      isDisabled,\n      model,\n      handleChange,\n      activeStyle,\n      size,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}