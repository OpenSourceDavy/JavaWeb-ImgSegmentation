{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../directives/repeat-click/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { isNumber } from '@vueuse/core';\n\nconst _sfc_main = defineComponent({\n  name: \"ElInputNumber\",\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus\n  },\n  directives: {\n    RepeatClick\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      formItem\n    } = useFormItem();\n    const ns = useNamespace(\"input-number\");\n    const minDisabled = computed(() => ensurePrecision(props.modelValue, -1) < props.min);\n    const maxDisabled = computed(() => ensurePrecision(props.modelValue) > props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useSize();\n    const inputNumberDisabled = useDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n\n      let currentValue = data.currentValue;\n\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n\n      return currentValue;\n    });\n\n    const toPrecision = (num, pre) => {\n      if (isUndefined(pre)) pre = numPrecision.value;\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`);\n    };\n\n    const getPrecision = value => {\n      if (isUndefined(value)) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n\n      return precision;\n    };\n\n    const ensurePrecision = (val, coefficient = 1) => {\n      if (!isNumber(val)) return data.currentValue;\n      val = isNumber(val) ? val : Number.NaN;\n      return toPrecision(val + props.step * coefficient);\n    };\n\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = ensurePrecision(value);\n      setCurrentValue(newVal);\n    };\n\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      const value = props.modelValue || 0;\n      const newVal = ensurePrecision(value, -1);\n      setCurrentValue(newVal);\n    };\n\n    const verifyValue = (value, update) => {\n      const {\n        max,\n        min,\n        step,\n        precision,\n        stepStrictly\n      } = props;\n      let newVal = Number(value);\n\n      if (value === null) {\n        newVal = Number.NaN;\n      }\n\n      if (!Number.isNaN(newVal)) {\n        if (stepStrictly) {\n          newVal = Math.round(newVal / step) * step;\n        }\n\n        if (!isUndefined(precision)) {\n          newVal = toPrecision(newVal, precision);\n        }\n\n        if (newVal > max || newVal < min) {\n          newVal = newVal > max ? max : min;\n          update && emit(\"update:modelValue\", newVal);\n        }\n      }\n\n      return newVal;\n    };\n\n    const setCurrentValue = value => {\n      var _a;\n\n      const oldVal = data.currentValue;\n      let newVal = verifyValue(value);\n      if (oldVal === newVal) return;\n\n      if (Number.isNaN(newVal)) {\n        newVal = void 0;\n      }\n\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      data.currentValue = newVal;\n    };\n\n    const handleInput = value => {\n      return data.userInput = value;\n    };\n\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n\n      data.userInput = null;\n    };\n\n    const focus = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    const blur = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n\n    const handleBlur = event => {\n      var _a;\n\n      emit(\"blur\", event);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n    };\n\n    watch(() => props.modelValue, value => {\n      const newVal = verifyValue(value, true);\n      data.currentValue = newVal;\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      innerInput.setAttribute(\"aria-valuemax\", String(props.max));\n      innerInput.setAttribute(\"aria-valuemin\", String(props.min));\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n\n      if (!isNumber(props.modelValue)) {\n        let val = Number(props.modelValue);\n\n        if (Number.isNaN(val)) {\n          val = void 0;\n        }\n\n        emit(\"update:modelValue\", val);\n      }\n    });\n    onUpdated(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", data.currentValue);\n    });\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_minus = resolveComponent(\"minus\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n\n  const _component_plus = resolveComponent(\"plus\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.inputNumberSize), _ctx.ns.is(\"disabled\", _ctx.inputNumberDisabled), _ctx.ns.is(\"without-controls\", !_ctx.controls), _ctx.ns.is(\"controls-right\", _ctx.controlsAtRight)]),\n    onDragstart: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"prevent\"]))\n  }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"decrease\"), _ctx.ns.is(\"disabled\", _ctx.minDisabled)]),\n    onKeydown: _cache[0] || (_cache[0] = withKeys((...args) => _ctx.decrease && _ctx.decrease(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_down, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_minus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"increase\"), _ctx.ns.is(\"disabled\", _ctx.maxDisabled)]),\n    onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.increase && _ctx.increase(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_up, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_plus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.increase]]) : createCommentVNode(\"v-if\", true), createVNode(_component_el_input, {\n    ref: \"input\",\n    type: \"number\",\n    step: _ctx.step,\n    \"model-value\": _ctx.displayValue,\n    placeholder: _ctx.placeholder,\n    disabled: _ctx.inputNumberDisabled,\n    size: _ctx.inputNumberSize,\n    max: _ctx.max,\n    min: _ctx.min,\n    name: _ctx.name,\n    label: _ctx.label,\n    \"validate-event\": false,\n    onKeydown: [withKeys(withModifiers(_ctx.increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(_ctx.decrease, [\"prevent\"]), [\"down\"])],\n    onBlur: _ctx.handleBlur,\n    onFocus: _ctx.handleFocus,\n    onInput: _ctx.handleInput,\n    onChange: _ctx.handleInputChange\n  }, null, 8, [\"step\", \"model-value\", \"placeholder\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\", \"onBlur\", \"onFocus\", \"onInput\", \"onChange\"])], 34);\n}\n\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue\"]]);\n\nexport { InputNumber as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInput","ElIcon","ArrowUp","ArrowDown","Plus","Minus","directives","RepeatClick","props","emits","setup","emit","input","ref","data","reactive","currentValue","userInput","formItem","useFormItem","useNamespace","computed","ensurePrecision","modelValue","min","max","getPrecision","step","isUndefined","precision","debugWarn","Math","stepPrecision","controls","controlsPosition","inputNumberSize","useSize","inputNumberDisabled","useDisabled","isNaN","toFixed","num","pre","numPrecision","parseFloat","value","toString","valueString","dotPosition","length","val","coefficient","isNumber","Number","toPrecision","increase","maxDisabled","setCurrentValue","newVal","decrease","minDisabled","update","stepStrictly","oldVal","_a","_b","event","watch","immediate","onMounted","innerInput","String","onUpdated","displayValue","handleInput","handleInputChange","controlsAtRight","focus","blur","_component_el_icon","_resolveComponent","class","_ctx","onDragstart","_cache","withModifiers","key","role","_","_createCommentVNode","_directive_repeat_click","_createVNode","type","placeholder","disabled","size","label","onKeydown","_withKeys"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  onMounted,\n  onUpdated,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\n\nimport { ElIcon } from '@element-plus/components/icon'\nimport { RepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { debugWarn, isNumber, isUndefined } from '@element-plus/utils'\nimport { ArrowDown, ArrowUp, Minus, Plus } from '@element-plus/icons-vue'\nimport { inputNumberEmits, inputNumberProps } from './input-number'\n\nimport type { ComponentPublicInstance } from 'vue'\n\ninterface IData {\n  currentValue: number | undefined\n  userInput: null | number | string\n}\n\nexport default defineComponent({\n  name: 'ElInputNumber',\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus,\n  },\n  directives: {\n    RepeatClick,\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, { emit }) {\n    const input = ref<ComponentPublicInstance<typeof ElInput>>()\n    const data = reactive<IData>({\n      currentValue: props.modelValue,\n      userInput: null,\n    })\n    const { formItem } = useFormItem()\n    const ns = useNamespace('input-number')\n\n    const minDisabled = computed(\n      () => ensurePrecision(props.modelValue, -1) < props.min\n    )\n    const maxDisabled = computed(\n      () => ensurePrecision(props.modelValue) > props.max\n    )\n\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step)\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\n            'InputNumber',\n            'precision should not be less than the decimal places of step'\n          )\n        }\n        return props.precision\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision)\n      }\n    })\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === 'right'\n    })\n\n    const inputNumberSize = useSize()\n    const inputNumberDisabled = useDisabled()\n\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput\n      }\n      let currentValue: number | string | undefined = data.currentValue\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return ''\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision)\n        }\n      }\n      return currentValue\n    })\n    const toPrecision = (num: number, pre?: number) => {\n      if (isUndefined(pre)) pre = numPrecision.value\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`)\n    }\n    const getPrecision = (value: number | undefined) => {\n      if (isUndefined(value)) return 0\n      const valueString = value.toString()\n      const dotPosition = valueString.indexOf('.')\n      let precision = 0\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1\n      }\n      return precision\n    }\n    const ensurePrecision = (val: number, coefficient: 1 | -1 = 1) => {\n      if (!isNumber(val)) return data.currentValue\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : Number.NaN\n      return toPrecision(val + props.step * coefficient)\n    }\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = ensurePrecision(value)\n      setCurrentValue(newVal)\n    }\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = ensurePrecision(value, -1)\n      setCurrentValue(newVal)\n    }\n    const verifyValue = (\n      value: number | string | undefined,\n      update?: boolean\n    ): number | undefined => {\n      const { max, min, step, precision, stepStrictly } = props\n      let newVal = Number(value)\n      if (value === null) {\n        newVal = Number.NaN\n      }\n      if (!Number.isNaN(newVal)) {\n        if (stepStrictly) {\n          newVal = Math.round(newVal / step) * step\n        }\n        if (!isUndefined(precision)) {\n          newVal = toPrecision(newVal, precision)\n        }\n        if (newVal > max || newVal < min) {\n          newVal = newVal > max ? max : min\n          update && emit('update:modelValue', newVal)\n        }\n      }\n      return newVal\n    }\n    const setCurrentValue = (value: number | string | undefined) => {\n      const oldVal = data.currentValue\n      let newVal = verifyValue(value)\n      if (oldVal === newVal) return\n      if (Number.isNaN(newVal)) {\n        newVal = undefined\n      }\n      data.userInput = null\n      emit('update:modelValue', newVal)\n      emit('input', newVal)\n      emit('change', newVal, oldVal)\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n      data.currentValue = newVal\n    }\n    const handleInput = (value: string) => {\n      return (data.userInput = value)\n    }\n    const handleInputChange = (value: string) => {\n      const newVal = value !== '' ? Number(value) : ''\n      if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n        setCurrentValue(newVal)\n      }\n      data.userInput = null\n    }\n\n    const focus = () => {\n      input.value?.focus?.()\n    }\n\n    const blur = () => {\n      input.value?.blur?.()\n    }\n\n    const handleFocus = (event: MouseEvent | FocusEvent) => {\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: MouseEvent | FocusEvent) => {\n      emit('blur', event)\n      formItem?.validate?.('blur').catch((err) => debugWarn(err))\n    }\n\n    watch(\n      () => props.modelValue,\n      (value) => {\n        const newVal = verifyValue(value, true)\n        data.currentValue = newVal\n        data.userInput = null\n      },\n      { immediate: true }\n    )\n    onMounted(() => {\n      const innerInput = input.value?.input as HTMLInputElement\n      innerInput.setAttribute('role', 'spinbutton')\n      innerInput.setAttribute('aria-valuemax', String(props.max))\n      innerInput.setAttribute('aria-valuemin', String(props.min))\n      innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n      innerInput.setAttribute(\n        'aria-disabled',\n        String(inputNumberDisabled.value)\n      )\n      if (!isNumber(props.modelValue)) {\n        let val: number | undefined = Number(props.modelValue)\n        if (Number.isNaN(val)) {\n          val = undefined\n        }\n        emit('update:modelValue', val)\n      }\n    })\n    onUpdated(() => {\n      const innerInput = input.value?.input\n      innerInput?.setAttribute('aria-valuenow', data.currentValue)\n    })\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}