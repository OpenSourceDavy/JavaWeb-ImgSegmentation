{"ast":null,"code":"import { watch, nextTick, computed, toRefs } from 'vue';\nimport { isEqual, pick } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport _Tree from '../../tree/index.mjs';\nimport component from './tree-select-option.mjs';\nimport { isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\n\nconst useTree = (props, {\n  attrs,\n  slots,\n  emit\n}, {\n  select,\n  tree,\n  key\n}) => {\n  watch(() => props.modelValue, () => {\n    if (props.showCheckbox) {\n      nextTick(() => {\n        const treeInstance = tree.value;\n\n        if (treeInstance && !isEqual(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props\n  }));\n\n  const getNodeValByProp = (prop, data) => {\n    var _a;\n\n    const propVal = propsMap.value[prop];\n\n    if (isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n\n  return { ...pick(toRefs(props), Object.keys(_Tree.props)),\n    ...attrs,\n    nodeKey: key,\n    defaultExpandedKeys: computed(() => props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(props.modelValue) : toValidArray(props.modelValue)),\n    renderContent: (h, {\n      node,\n      data,\n      store\n    }) => {\n      return h(component, {\n        value: getNodeValByProp(\"value\", data),\n        label: getNodeValByProp(\"label\", data),\n        disabled: getNodeValByProp(\"disabled\", data)\n      }, props.renderContent ? () => props.renderContent(h, {\n        node,\n        data,\n        store\n      }) : slots.default ? () => slots.default({\n        node,\n        data,\n        store\n      }) : void 0);\n    },\n    filterNodeMethod: (value, data, node) => {\n      var _a;\n\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      return (_a = getNodeValByProp(\"label\", data)) == null ? void 0 : _a.includes(value);\n    },\n    onNodeClick: (data, node, e) => {\n      var _a, _b, _c;\n\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n\n      if (props.checkStrictly || node.isLeaf) {\n        if (!getNodeValByProp(\"disabled\", data)) {\n          const option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option, true);\n        }\n      } else {\n        e.ctx.handleExpandIconClick();\n      }\n    },\n    onCheck: (data, params) => {\n      var _a, _b;\n\n      (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, params);\n      const checkedKeys = !props.checkStrictly ? (_b = tree.value) == null ? void 0 : _b.getCheckedKeys(true) : params.checkedKeys;\n      const value = getNodeValByProp(\"value\", data);\n      emit(UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(value) ? value : void 0);\n    }\n  };\n};\n\nfunction toValidArray(val) {\n  return Array.isArray(val) ? val : val || val === 0 ? [val] : [];\n}\n\nexport { useTree };","map":{"version":3,"mappings":"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","names":["useTree","props","attrs","slots","emit","select","tree","key","watch","modelValue","showCheckbox","nextTick","treeInstance","value","isEqual","getCheckedKeys","toValidArray","setCheckedKeys","immediate","deep","propsMap","computed","getNodeValByProp","prop","data","_a","propVal","isFunction","getNode","pick","toRefs","Object","keys","ElTree","nodeKey","defaultExpandedKeys","concat","renderContent","h","node","store","TreeSelectOption","label","disabled","default","filterNodeMethod","includes","onNodeClick","e","_b","_c","call","checkStrictly","isLeaf","option","options","get","handleOptionSelect","ctx","handleExpandIconClick","onCheck","params","checkedKeys","UPDATE_MODEL_EVENT","multiple","val","Array","isArray"],"sources":["../../../../../../packages/components/tree-select/src/tree.ts"],"sourcesContent":["import { computed, nextTick, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isFunction } from '@element-plus/utils'\nimport ElTree from '@element-plus/components/tree'\nimport TreeSelectOption from './tree-select-option'\nimport type { Ref } from 'vue'\nimport type ElSelect from '@element-plus/components/select'\nimport type Node from '@element-plus/components/tree/src/model/node'\nimport type { TreeNodeData } from '@element-plus/components/tree/src/tree.type'\n\nexport const useTree = (\n  props,\n  { attrs, slots, emit },\n  {\n    select,\n    tree,\n    key,\n  }: {\n    select: Ref<InstanceType<typeof ElSelect> | undefined>\n    tree: Ref<InstanceType<typeof ElTree> | undefined>\n    key: Ref<string>\n  }\n) => {\n  watch(\n    () => props.modelValue,\n    () => {\n      if (props.showCheckbox) {\n        nextTick(() => {\n          const treeInstance = tree.value\n          if (\n            treeInstance &&\n            !isEqual(\n              treeInstance.getCheckedKeys(),\n              toValidArray(props.modelValue)\n            )\n          ) {\n            treeInstance.setCheckedKeys(toValidArray(props.modelValue))\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props,\n  }))\n\n  const getNodeValByProp = (\n    prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf',\n    data: TreeNodeData\n  ) => {\n    const propVal = propsMap.value[prop]\n    if (isFunction(propVal)) {\n      return propVal(\n        data,\n        tree.value?.getNode(getNodeValByProp('value', data)) as Node\n      )\n    } else {\n      return data[propVal as string]\n    }\n  }\n\n  return {\n    ...pick(toRefs(props), Object.keys(ElTree.props)),\n    ...attrs,\n    nodeKey: key,\n    defaultExpandedKeys: computed(() =>\n      props.defaultExpandedKeys\n        ? props.defaultExpandedKeys.concat(props.modelValue)\n        : toValidArray(props.modelValue)\n    ),\n    renderContent: (h, { node, data, store }) => {\n      return h(\n        TreeSelectOption,\n        {\n          value: getNodeValByProp('value', data),\n          label: getNodeValByProp('label', data),\n          disabled: getNodeValByProp('disabled', data),\n        },\n        props.renderContent\n          ? () => props.renderContent(h, { node, data, store })\n          : slots.default\n          ? () => slots.default({ node, data, store })\n          : undefined\n      )\n    },\n    filterNodeMethod: (value, data, node) => {\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node)\n      if (!value) return true\n      return getNodeValByProp('label', data)?.includes(value)\n    },\n    onNodeClick: (data, node, e) => {\n      attrs.onNodeClick?.(data, node, e)\n\n      if (props.checkStrictly || node.isLeaf) {\n        if (!getNodeValByProp('disabled', data)) {\n          const option = select.value?.options.get(\n            getNodeValByProp('value', data)\n          )\n          select.value?.handleOptionSelect(option, true)\n        }\n      } else {\n        e.ctx.handleExpandIconClick()\n      }\n    },\n    onCheck: (data, params) => {\n      attrs.onCheck?.(data, params)\n\n      // remove folder node when `checkStrictly` is false\n      const checkedKeys = !props.checkStrictly\n        ? tree.value?.getCheckedKeys(true)\n        : params.checkedKeys\n\n      const value = getNodeValByProp('value', data)\n      emit(\n        UPDATE_MODEL_EVENT,\n        props.multiple\n          ? checkedKeys\n          : checkedKeys.includes(value)\n          ? value\n          : undefined\n      )\n    },\n  }\n}\n\nfunction toValidArray(val: any) {\n  return Array.isArray(val) ? val : val || val === 0 ? [val] : []\n}\n"]},"metadata":{},"sourceType":"module"}