{"ast":null,"code":"import { defineComponent, ref, computed, reactive, onMounted, h } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { ElSelect } from '../../select/index.mjs';\nimport _Tree from '../../tree/index.mjs';\nimport { useSelect } from './select.mjs';\nimport { useTree } from './tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTreeSelect\",\n  props: { ...ElSelect.props,\n    ..._Tree.props\n  },\n\n  setup(props, context) {\n    const {\n      slots,\n      expose\n    } = context;\n    const select = ref();\n    const tree = ref();\n    const key = computed(() => props.valueKey || props.nodeKey || \"value\");\n    const selectProps = useSelect(props, context, {\n      select,\n      tree,\n      key\n    });\n    const treeProps = useTree(props, context, {\n      select,\n      tree,\n      key\n    });\n    const methods = reactive({});\n    expose(methods);\n    onMounted(() => {\n      Object.assign(methods, { ...pick(tree.value, [\"filter\", \"updateKeyChildren\", \"getCheckedNodes\", \"setCheckedNodes\", \"getCheckedKeys\", \"setCheckedKeys\", \"setChecked\", \"getHalfCheckedNodes\", \"getHalfCheckedKeys\", \"getCurrentKey\", \"getCurrentNode\", \"setCurrentKey\", \"setCurrentNode\", \"getNode\", \"remove\", \"append\", \"insertBefore\", \"insertAfter\"]),\n        ...pick(select.value, [\"focus\", \"blur\"])\n      });\n    });\n    return () => h(ElSelect, reactive({ ...selectProps,\n      ref: ref2 => select.value = ref2\n    }), { ...slots,\n      default: () => h(_Tree, reactive({ ...treeProps,\n        ref: ref2 => tree.value = ref2\n      }))\n    });\n  }\n\n});\n\nvar TreeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-select/src/tree-select.vue\"]]);\n\nexport { TreeSelect as default };","map":{"version":3,"mappings":";;;;;;;;AAQA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,gBADuB;AAE7BC,OAAO,OACFC,QAAS,MADP;AACO,OACTC,KAAO;AAFL,GAFsB;;AAM7BC,QAAMH,KAAN,EAAaI,OAAb,EAAsB;AACd;AAAEC,WAAF;AAASC;AAAT,QAAoBF,OAApB;AAEN,UAAMG,SAASC,GAAmC,EAAlD;AACA,UAAMC,OAAOD,GAAiC,EAA9C;AAEA,UAAME,MAAMC,QAAS,OAAMX,MAAMY,QAAN,IAAkBZ,MAAMa,OAAxB,IAAmC,OAAzC,CAArB;AAEM,wBAAcC,UAAUd,KAAV,EAAiBI,OAAjB,EAA0B;AAAEG,YAAF;AAAUE,UAAV;AAAgBC;AAAhB,KAA1B,CAAd;AACA,sBAAYK,QAAQf,KAAR,EAAeI,OAAf,EAAwB;AAAEG,YAAF;AAAUE,UAAV;AAAgBC;AAAhB,KAAxB,CAAZ;AAGA,oBAAUM,QAAS,IAAnB;AACNV,WAAOW,OAAP;AACAC,cAAU,MAAM;AACdC,aAAOC,MAAP,CAAcH,OAAd,EAAuB,EAClB,QAAKR,KAAKY,KAAV,EAAiB,CAClB,QADkB,EAElB,mBAFkB,EAGlB,iBAHkB,EAIlB,iBAJkB,EAKlB,gBALkB,EAMlB,gBANkB,EAOlB,YAPkB,EAQlB,qBARkB,EASlB,oBATkB,EAUlB,eAVkB,EAWlB,gBAXkB,EAYlB,eAZkB,EAalB,gBAbkB,EAclB,SAdkB,EAelB,QAfkB,EAgBlB,QAhBkB,EAiBlB,cAjBkB,EAkBlB,aAlBkB,CAAjB,CADkB;AAoBpB,WACEC,KAAKf,MAAO,MAAZ,EAAmB,CAAC,OAAD,EAAU,MAAV,CAAnB;AArBkB,OAAvB;AAuBD,KAxBD;AA0BO,iBACLgB,CACE,WAQAP,QAAS,GACJ,cADI;AAEPR,SAAK,EAACgB,IAAD,IAAUjB,OAAOc,KAAP,GAAeG;AAFvB,MART,EAYA,EACK,QADL;AAEEC,aAAS,QACPF,CACE,QACAP,QAAS,GACJ,YADI;AAEPR,WAAK,EAACgB,IAAD,IAAUf,KAAKY,KAAL,GAAaG;AAFrB,QADT;AAJN,KAZA,CAFG;AA0BT;;AAxE6B,EAA/B","names":["_sfc_main","defineComponent","name","props","ElSelect","ElTree","setup","context","slots","expose","select","ref","tree","key","computed","valueKey","nodeKey","useSelect","useTree","reactive","methods","onMounted","Object","assign","value","pick","h","ref2","default"],"sources":["../../../../../../packages/components/tree-select/src/tree-select.vue"],"sourcesContent":["<script lang=\"ts\">\nimport { computed, defineComponent, h, onMounted, reactive, ref } from 'vue'\nimport { pick } from 'lodash-unified'\nimport ElSelect from '@element-plus/components/select'\nimport ElTree from '@element-plus/components/tree'\nimport { useSelect } from './select'\nimport { useTree } from './tree'\n\nexport default defineComponent({\n  name: 'ElTreeSelect',\n  props: {\n    ...ElSelect.props,\n    ...ElTree.props,\n  },\n  setup(props, context) {\n    const { slots, expose } = context\n\n    const select = ref<InstanceType<typeof ElSelect>>()\n    const tree = ref<InstanceType<typeof ElTree>>()\n\n    const key = computed(() => props.valueKey || props.nodeKey || 'value')\n\n    const selectProps = useSelect(props, context, { select, tree, key })\n    const treeProps = useTree(props, context, { select, tree, key })\n\n    // expose ElTree/ElSelect methods\n    const methods = reactive({})\n    expose(methods)\n    onMounted(() => {\n      Object.assign(methods, {\n        ...pick(tree.value, [\n          'filter',\n          'updateKeyChildren',\n          'getCheckedNodes',\n          'setCheckedNodes',\n          'getCheckedKeys',\n          'setCheckedKeys',\n          'setChecked',\n          'getHalfCheckedNodes',\n          'getHalfCheckedKeys',\n          'getCurrentKey',\n          'getCurrentNode',\n          'setCurrentKey',\n          'setCurrentNode',\n          'getNode',\n          'remove',\n          'append',\n          'insertBefore',\n          'insertAfter',\n        ]),\n        ...pick(select.value, ['focus', 'blur']),\n      })\n    })\n\n    return () =>\n      h(\n        ElSelect,\n        /**\n         * 1. The `props` is processed into `Refs`, but `v-bind` and\n         * render function props cannot read `Refs`, so use `reactive`\n         * unwrap the `Refs` and keep reactive.\n         * 2. The keyword `ref` requires `Ref`, but `reactive` broke it,\n         * so use function.\n         */\n        reactive({\n          ...selectProps,\n          ref: (ref) => (select.value = ref),\n        }),\n        {\n          ...slots,\n          default: () =>\n            h(\n              ElTree,\n              reactive({\n                ...treeProps,\n                ref: (ref) => (tree.value = ref),\n              })\n            ),\n        }\n      )\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}