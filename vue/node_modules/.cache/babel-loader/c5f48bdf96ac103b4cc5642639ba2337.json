{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, toDisplayString, createCommentVNode, createBlock, withCtx, resolveDynamicComponent } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleCheck, CircleClose, Check, Close, WarningFilled } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport { progressProps } from './progress.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElProgress\",\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled\n  },\n  props: progressProps,\n\n  setup(props) {\n    const ns = useNamespace(\"progress\");\n    const barStyle = computed(() => ({\n      width: `${props.percentage}%`,\n      animationDuration: `${props.duration}s`,\n      backgroundColor: getCurrentColor(props.percentage)\n    }));\n    const relativeStrokeWidth = computed(() => (props.strokeWidth / props.width * 100).toFixed(1));\n    const radius = computed(() => {\n      if (props.type === \"circle\" || props.type === \"dashboard\") {\n        return Number.parseInt(`${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`, 10);\n      } else {\n        return 0;\n      }\n    });\n    const trackPath = computed(() => {\n      const r = radius.value;\n      const isDashboard = props.type === \"dashboard\";\n      return `\n          M 50 50\n          m 0 ${isDashboard ? \"\" : \"-\"}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"-\" : \"\"}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"\" : \"-\"}${r * 2}\n          `;\n    });\n    const perimeter = computed(() => 2 * Math.PI * radius.value);\n    const rate = computed(() => props.type === \"dashboard\" ? 0.75 : 1);\n    const strokeDashoffset = computed(() => {\n      const offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return `${offset}px`;\n    });\n    const trailPathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value\n    }));\n    const circlePathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value,\n      transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease\"\n    }));\n    const stroke = computed(() => {\n      let ret;\n\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        switch (props.status) {\n          case \"success\":\n            ret = \"#13ce66\";\n            break;\n\n          case \"exception\":\n            ret = \"#ff4949\";\n            break;\n\n          case \"warning\":\n            ret = \"#e6a23c\";\n            break;\n\n          default:\n            ret = \"#20a0ff\";\n        }\n      }\n\n      return ret;\n    });\n    const statusIcon = computed(() => {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    const progressTextSize = computed(() => {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    const content = computed(() => props.format(props.percentage));\n\n    const getCurrentColor = percentage => {\n      var _a;\n\n      const {\n        color\n      } = props;\n\n      if (typeof color === \"function\") {\n        return color(percentage);\n      } else if (typeof color === \"string\") {\n        return color;\n      } else {\n        const span = 100 / color.length;\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === \"string\") {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span\n            };\n          }\n\n          return seriesColor;\n        });\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage);\n\n        for (const color2 of colors) {\n          if (color2.percentage > percentage) return color2.color;\n        }\n\n        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage\n      };\n    });\n    return {\n      ns,\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-valuenow\"];\nconst _hoisted_2 = {\n  viewBox: \"0 0 100 100\"\n};\nconst _hoisted_3 = [\"d\", \"stroke-width\"];\nconst _hoisted_4 = [\"d\", \"stroke\", \"stroke-linecap\", \"stroke-width\"];\nconst _hoisted_5 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.type), _ctx.ns.is(_ctx.status), {\n      [_ctx.ns.m(\"without-text\")]: !_ctx.showText,\n      [_ctx.ns.m(\"text-inside\")]: _ctx.textInside\n    }]),\n    role: \"progressbar\",\n    \"aria-valuenow\": _ctx.percentage,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\"\n  }, [_ctx.type === \"line\" ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.b(\"bar\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"bar\", \"outer\")),\n    style: normalizeStyle({\n      height: `${_ctx.strokeWidth}px`\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.be(\"bar\", \"inner\"), {\n      [_ctx.ns.bem(\"bar\", \"inner\", \"indeterminate\")]: _ctx.indeterminate\n    }]),\n    style: normalizeStyle(_ctx.barStyle)\n  }, [(_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.be(\"bar\", \"innerText\"))\n  }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [createElementVNode(\"span\", null, toDisplayString(_ctx.content), 1)])], 2)) : createCommentVNode(\"v-if\", true)], 6)], 6)], 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.b(\"circle\")),\n    style: normalizeStyle({\n      height: `${_ctx.width}px`,\n      width: `${_ctx.width}px`\n    })\n  }, [(openBlock(), createElementBlock(\"svg\", _hoisted_2, [createElementVNode(\"path\", {\n    class: normalizeClass(_ctx.ns.be(\"circle\", \"track\")),\n    d: _ctx.trackPath,\n    stroke: \"#e5e9f2\",\n    \"stroke-width\": _ctx.relativeStrokeWidth,\n    fill: \"none\",\n    style: normalizeStyle(_ctx.trailPathStyle)\n  }, null, 14, _hoisted_3), createElementVNode(\"path\", {\n    class: normalizeClass(_ctx.ns.be(\"circle\", \"path\")),\n    d: _ctx.trackPath,\n    stroke: _ctx.stroke,\n    fill: \"none\",\n    \"stroke-linecap\": _ctx.strokeLinecap,\n    \"stroke-width\": _ctx.percentage ? _ctx.relativeStrokeWidth : 0,\n    style: normalizeStyle(_ctx.circlePathStyle)\n  }, null, 14, _hoisted_4)]))], 6)), (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n    key: 2,\n    class: normalizeClass(_ctx.ns.e(\"text\")),\n    style: normalizeStyle({\n      fontSize: `${_ctx.progressTextSize}px`\n    })\n  }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [!_ctx.status ? (openBlock(), createElementBlock(\"span\", _hoisted_5, toDisplayString(_ctx.content), 1)) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.statusIcon)))]),\n    _: 1\n  }))])], 6)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nvar Progress = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/progress/src/progress.vue\"]]);\n\nexport { Progress as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElIcon","CircleCheck","CircleClose","Check","Close","WarningFilled","props","setup","useNamespace","computed","width","animationDuration","backgroundColor","getCurrentColor","percentage","toFixed","type","parseInt","Number","parseFloat","relativeStrokeWidth","r","radius","isDashboard","perimeter","Math","value","rate","offset","strokeDasharray","strokeDashoffset","transition","color","ret","status","strokeWidth","content","format","span","colors","ns","barStyle","trackPath","trailPathStyle","circlePathStyle","stroke","statusIcon","progressTextSize","slotData","_openBlock","class","_ctx","b","m","role","key","_createElementVNode","_normalizeClass","style","height","_renderSlot","d","fill","_hoisted_3","fontSize","_guardReactiveProps","default"],"sources":["../../../../../../packages/components/progress/src/progress.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(type),\n      ns.is(status),\n      {\n        [ns.m('without-text')]: !showText,\n        [ns.m('text-inside')]: textInside,\n      },\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div v-if=\"type === 'line'\" :class=\"ns.b('bar')\">\n      <div\n        :class=\"ns.be('bar', 'outer')\"\n        :style=\"{ height: `${strokeWidth}px` }\"\n      >\n        <div\n          :class=\"[\n            ns.be('bar', 'inner'),\n            { [ns.bem('bar', 'inner', 'indeterminate')]: indeterminate },\n          ]\"\n          :style=\"barStyle\"\n        >\n          <div\n            v-if=\"(showText || $slots.default) && textInside\"\n            :class=\"ns.be('bar', 'innerText')\"\n          >\n            <slot v-bind=\"slotData\">\n              <span>{{ content }}</span>\n            </slot>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      v-else\n      :class=\"ns.b('circle')\"\n      :style=\"{ height: `${width}px`, width: `${width}px` }\"\n    >\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          :class=\"ns.be('circle', 'track')\"\n          :d=\"trackPath\"\n          stroke=\"#e5e9f2\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"\n        />\n        <path\n          :class=\"ns.be('circle', 'path')\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"percentage ? relativeStrokeWidth : 0\"\n          :style=\"circlePathStyle\"\n        />\n      </svg>\n    </div>\n    <div\n      v-if=\"(showText || $slots.default) && !textInside\"\n      :class=\"ns.e('text')\"\n      :style=\"{ fontSize: `${progressTextSize}px` }\"\n    >\n      <slot v-bind=\"slotData\">\n        <span v-if=\"!status\">{{ content }}</span>\n        <el-icon v-else><component :is=\"statusIcon\" /></el-icon>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  Check,\n  CircleCheck,\n  CircleClose,\n  Close,\n  WarningFilled,\n} from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { progressProps } from './progress'\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElProgress',\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled,\n  },\n  props: progressProps,\n\n  setup(props) {\n    const ns = useNamespace('progress')\n\n    const barStyle = computed(\n      (): CSSProperties => ({\n        width: `${props.percentage}%`,\n        animationDuration: `${props.duration}s`,\n        backgroundColor: getCurrentColor(props.percentage),\n      })\n    )\n\n    const relativeStrokeWidth = computed(() =>\n      ((props.strokeWidth / props.width) * 100).toFixed(1)\n    )\n\n    const radius = computed(() => {\n      if (props.type === 'circle' || props.type === 'dashboard') {\n        return Number.parseInt(\n          `${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`,\n          10\n        )\n      } else {\n        return 0\n      }\n    })\n\n    const trackPath = computed(() => {\n      const r = radius.value\n      const isDashboard = props.type === 'dashboard'\n      return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '-' : ''}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '' : '-'}${r * 2}\n          `\n    })\n\n    const perimeter = computed(() => 2 * Math.PI * radius.value)\n\n    const rate = computed(() => (props.type === 'dashboard' ? 0.75 : 1))\n\n    const strokeDashoffset = computed(() => {\n      const offset = (-1 * perimeter.value * (1 - rate.value)) / 2\n      return `${offset}px`\n    })\n\n    const trailPathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${perimeter.value * rate.value}px, ${\n          perimeter.value\n        }px`,\n        strokeDashoffset: strokeDashoffset.value,\n      })\n    )\n\n    const circlePathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${\n          perimeter.value * rate.value * (props.percentage / 100)\n        }px, ${perimeter.value}px`,\n        strokeDashoffset: strokeDashoffset.value,\n        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease',\n      })\n    )\n\n    const stroke = computed(() => {\n      let ret: string\n      if (props.color) {\n        ret = getCurrentColor(props.percentage)\n      } else {\n        switch (props.status) {\n          case 'success':\n            ret = '#13ce66'\n            break\n          case 'exception':\n            ret = '#ff4949'\n            break\n          case 'warning':\n            ret = '#e6a23c'\n            break\n          default:\n            ret = '#20a0ff'\n        }\n      }\n      return ret\n    })\n\n    const statusIcon = computed(() => {\n      if (props.status === 'warning') {\n        return WarningFilled\n      }\n      if (props.type === 'line') {\n        return props.status === 'success' ? CircleCheck : CircleClose\n      } else {\n        return props.status === 'success' ? Check : Close\n      }\n    })\n\n    const progressTextSize = computed(() => {\n      return props.type === 'line'\n        ? 12 + props.strokeWidth * 0.4\n        : props.width * 0.111111 + 2\n    })\n\n    const content = computed(() => props.format(props.percentage))\n\n    const getCurrentColor = (percentage: number) => {\n      const { color } = props\n      if (typeof color === 'function') {\n        return color(percentage)\n      } else if (typeof color === 'string') {\n        return color\n      } else {\n        const span = 100 / color.length\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === 'string') {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span,\n            }\n          }\n          return seriesColor\n        })\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage)\n\n        for (const color of colors) {\n          if (color.percentage > percentage) return color.color\n        }\n        return colors[colors.length - 1]?.color\n      }\n    }\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage,\n      }\n    })\n\n    return {\n      ns,\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}