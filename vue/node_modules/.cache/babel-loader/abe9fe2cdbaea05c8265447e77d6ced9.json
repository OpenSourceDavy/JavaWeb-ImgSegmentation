{"ast":null,"code":"let history = [];\n\nfunction Point(x, y, type) {\n  this.x = x;\n  this.y = y;\n  this.type = type; // 左击 1  右击 3\n}\n\nfunction windowToCanvas(e, mycanvas) {\n  // 返回元素的大小以及位置\n  let rect = mycanvas.getBoundingClientRect(); // rect 的宽度会加上 canvas 的 border 会影响精度\n\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width), e.offsetY - rect.top * (mycanvas.height / rect.height), e.which);\n}\n\nfunction showLastHistory(ctx, history) {\n  ctx.putImageData(history[history.length - 1].data, 0, 0);\n}\n\nfunction addHistoy(history, ctx, mycanvas) {\n  console.log(\"存历史\");\n  console.log(history);\n  history.push({\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\n  });\n}\n\nexport default {\n  name: \"Canvas\",\n\n  data() {\n    return {\n      dialogVisible: false,\n      ctx: null,\n      mycanvas: null,\n      textarea: '',\n      tool: '',\n      imgUrl: '',\n      tempPos: [],\n      posArray: [],\n      form: [],\n      Cwidth: window.screen.width * 0.5,\n      Cheight: window.screen.height * 0.75,\n      tools: [{\n        value: \"3\",\n        label: \"直线\"\n      }, {\n        value: \"1\",\n        label: \"矩形\"\n      }, {\n        value: \"2\",\n        label: \"圆形\"\n      }, {\n        value: \"4\",\n        label: \"任意多边形\"\n      }, {\n        value: \"5\",\n        label: \"点\"\n      }],\n      point: [],\n      JD: '',\n      area: '20.335',\n      isPolygon: false,\n      isLine: false,\n      isArea: false\n    };\n  },\n\n  mounted() {\n    //this.();\n    let str = sessionStorage.getItem(\"img\") || \"{}\";\n    console.log(str);\n    this.form = JSON.parse(str);\n    this.mycanvas = this.$refs.cont;\n    this.ctx = this.mycanvas.getContext('2d');\n    this.mycanvas.width = window.screen.width * 0.5;\n    this.mycanvas.height = window.screen.height * 0.75;\n    console.log(\"mounted\");\n    console.log(this.form);\n    this.drawImg();\n    this.drawer();\n    this.getAngle(); //测试\n\n    this.getPolygonArea();\n  },\n\n  methods: {\n    handleEvent(e) {\n      //console.log(e)\n      this.drawer();\n    },\n\n    changeTool(t) {\n      this.point = [];\n      this.JD = '';\n      this.drawer();\n\n      if (t == '1') {\n        //画矩形\n        this.isArea = true;\n        this.isLine = false;\n        this.isPolygon = false;\n      } else if (t == '2') {\n        //画圆\n        this.isArea = true;\n        this.isPolygon = false;\n        this.isLine = false;\n      } else if (t == '3') {\n        //画直线\n        this.isArea = false;\n        this.isPolygon = false;\n        this.isLine = true;\n      } else if (t == '4') {\n        //画多边形\n        this.isArea = true;\n        this.isPolygon = true;\n        this.isLine = false;\n      } else if (t == '5') {\n        //画点\n        this.isArea = false;\n        this.isPolygon = false;\n        this.isLine = false;\n      }\n    },\n\n    drawImg() {\n      let img = new Image();\n      img.src = this.form.img;\n      console.log(img.src);\n      console.log(this.form);\n      img.crossOrigin = '';\n\n      img.onload = () => {\n        this.ctx.drawImage(img, this.Cwidth / 4, 0, 400, this.Cheight);\n      };\n    },\n\n    getTan(p1, p2, p3, p4) {\n      let k1 = (p2.y - p1.y) / (p2.x - p1.x);\n      let k2 = (p4.y - p3.y) / (p4.x - p3.x);\n      let tan = (k1 - k2) / (1 + k1 * k2);\n      return Math.abs(tan);\n    },\n\n    myAngle(tan) {\n      //Math.atan,传入tan值，计算弧度，角度等于弧度乘以180/π\n      let result = Math.atan(tan) * 180 / Math.PI; // let result2 = Math.atan(0.169) * 180 / Math.PI;\n      // console.log(result2)\n\n      return result;\n    },\n\n    getAngle() {\n      this.myAngle(0.502);\n    },\n\n    getPolygonArea() {\n      let area = 0;\n      this.point = [{\n        x: 295,\n        y: 317\n      }, {\n        x: 424,\n        y: 317\n      }, {\n        x: 295,\n        y: 403\n      }, {\n        x: 424,\n        y: 403\n      }];\n\n      for (let i = 0; i < this.point.length - 1; i++) {\n        area += this.point[i].x * this.point[i + 1].y - this.point[i].y * this.point[i + 1].x;\n      }\n\n      this.area = Math.abs(area) / 2;\n      console.log(this.area);\n    },\n\n    init(form) {\n      console.log(form);\n      this.textarea = form.result;\n      this.imgUrl = form.img;\n      this.form = form;\n      console.log(this.imgUrl);\n      console.log(this.textarea);\n      console.log(this.form);\n      this.drawImg();\n      this.drawer();\n    },\n\n    // 绘制矩形\n    drawerRect(ctx, left, top, w, h) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(left, top, w, h);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [left, top, w, h]\n      };\n    },\n\n    // 绘制圆\n    drawerCircle(ctx, x, y, r) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.beginPath(); // 开始路径\n\n      ctx.arc(x, y, r, 0, Math.PI * 2, true); // 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\n\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, r]\n      };\n    },\n\n    // 绘制直线\n    drawerLine(ctx, x, y, z, n) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(z, n);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, z, n]\n      };\n    },\n\n    // 绘制点\n    drawerPoint(ctx, x, y) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n      this.posArray.push({\n        data: [x, y]\n      });\n    },\n\n    //  多边形个顶点连线，画多边形\n    drawPolygon() {\n      //排序，决定个点之间的连线顺序，尽量避免各边相交\n      let ps = this.sortPoints(this.point);\n    },\n\n    sortPoints(points) {\n      //让点按x轴升序排序\n      let tempPoints = points.sort((p1, p2) => {\n        return p1.x - p2.x;\n      }); //找到x轴的左右极点\n\n      let firstP = tempPoints[0]; //x轴最左端\n\n      let lastP = tempPoints[tempPoints.length - 1]; //x轴最右端\n      //如果多个x轴的左右极点，则按y轴排出左右极点\n\n      let smallXP = tempPoints.filter(ball => ball.x === firstP.x);\n      let bigXP = tempPoints.filter(ball => ball.x === lastP.x); // 处理左右极点有多个的情况,y轴降序\n\n      if (smallXP.length > 1) {\n        smallXP.sort((ballA, ballB) => {\n          return ballB.y - ballA.y;\n        });\n      }\n\n      if (bigXP.length > 1) {\n        bigXP.sort((ballA, ballB) => {\n          return ballB.y - ballA.y;\n        });\n      }\n\n      firstP = smallXP[0];\n      lastP = bigXP[0]; // 获得两个极点连线的角度\n\n      let splitLineAngle = Math.atan2(lastP.y - firstP.y, lastP.x - firstP.x);\n      let upperP = []; //上点  小于splitLineAngle的都是上点  X轴降序连接\n\n      let lowerP = []; //下点  大于splitLineAngle的都是下点  X轴升序连接\n      //计算弧度  分为上下点数组\n\n      tempPoints.forEach(p => {\n        if (p === firstP || p === lastP) {\n          return false;\n        }\n\n        let angle = Math.atan2(p.y - firstP.y, p.x - firstP.x);\n\n        if (angle > splitLineAngle) {\n          lowerP.push(p);\n        } else {\n          upperP.push(p);\n        }\n      }); //升序\n\n      lowerP = lowerP.sort((p1, p2) => {\n        if (p1.x !== p2.x) {\n          // 处理X轴相同情况的排序\n          return p1.x - p2.x;\n        }\n\n        return p2.y - p1.y;\n      }); //降序\n\n      upperP = upperP.sort((p1, p2) => {\n        if (p1.x !== p2.x) {\n          // 处理X轴相同情况的排序\n          return p2.x - p1.x;\n        }\n\n        return p2.y - p1.x;\n      }); // 逆时针连接所有的点\n\n      let myPoints = [firstP].concat(lowerP, [lastP], upperP); //调用画直线的方法，进行连线\n\n      let length = myPoints.length;\n\n      for (let i = 0; i < length - 1; i++) {\n        this.drawerLine(this.ctx, myPoints[i].x, myPoints[i].y, myPoints[i + 1].x, myPoints[i + 1].y);\n        console.log(i);\n      }\n\n      this.drawerLine(this.ctx, myPoints[length - 1].x, myPoints[length - 1].y, myPoints[0].x, myPoints[0].y);\n      this.getPolygonArea(); //计算多边形体积\n      //画完清空\n\n      this.point = [];\n      myPoints = [];\n    },\n\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\n    drawer() {\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      let that = this;\n      console.log(\"外\");\n      console.log(this);\n      console.log(that);\n      console.log(this.tool);\n\n      if (that.tool === '1') {\n        //画矩形\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          console.log(\"里\");\n          console.log(this);\n          console.log(that);\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let w = Math.abs(point.x - mousedown.x);\n            let h = Math.abs(point.y - mousedown.y);\n            let left = point.x > mousedown.x ? mousedown.x : point.x;\n            let top = point.y > mousedown.y ? mousedown.y : point.y;\n            let pos = that.drawerRect(ctx, left, top, w, h);\n            console.log(\"---------\");\n            console.log(point);\n            console.log(mousedown);\n            console.log(\"---------\");\n            that.area = w * h / 100; //计算矩形面积 数值太大，统一缩小100倍\n\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '2') {\n        // 画圆\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas); //圆上两点，其连线过圆心，长度是直径\n\n            let rx = (point.x - mousedown.x) / 2;\n            let ry = (point.y - mousedown.y) / 2;\n            let r = Math.sqrt(rx * rx + ry * ry); //a平方 + b平方 = c平方\n            //求圆面积\n\n            that.area = Math.PI * r * r / 100; //数值太大，统一缩小100倍\n\n            that.area = Math.round(that.area * 1000) / 1000; //取小数点后三位\n\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '3') {\n        //画直线\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n          console.log(\"鼠标点击\");\n          console.log(mousedown);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            let mouseup = windowToCanvas(e, mycanvas);\n            console.log(\"鼠标松开\");\n            console.log(mouseup); //存直线的起始点和终点，有四个点则确定有两条直线，再求其的夹角\n\n            that.point.push(mouseup);\n            that.point.push(mousedown);\n            console.log(that.point);\n            this.point = that.point;\n            console.log(this.point);\n            let l = that.point.length;\n\n            if (l >= 4) {\n              //计算tan的值\n              let tan = that.getTan(that.point[l - 4], that.point[l - 3], that.point[l - 2], that.point[l - 1]); //根据tan值求角度\n\n              let JD = that.myAngle(tan);\n              that.JD = Math.round(JD * 1000) / 1000; //取小数点后三位\n\n              that.JD = that.JD + \"°\"; //加上角度\n\n              console.log(JD); //that.point = []\n            }\n\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '4') {\n        //画多边形\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (e) {\n          let point = windowToCanvas(e, mycanvas);\n          that.point.push(point);\n          that.drawerPoint(ctx, point.x, point.y);\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (that.tool === '5') {\n        //画点\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (event) {\n          let rect = mycanvas.getBoundingClientRect();\n          console.log(rect);\n          let CanvasPos = {\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\n          };\n          console.log(CanvasPos);\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y);\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      }\n    },\n\n    // 重置\n    resetMap() {\n      // 标注的信息都放在这个数组中\n      this.posArray = [];\n      history = [history[0]];\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height);\n      addHistoy(history, ctx, mycanvas);\n      this.drawImg();\n      this.tool = '';\n      this.point = [];\n      this.isPolygon = false;\n      this.isLine = false;\n      this.isArea = false;\n    },\n\n    // 取消上一步操作\n    cancel() {\n      if (history.length > 1) {\n        console.log(\"取消上一步\");\n        console.log(history);\n        this.posArray.pop();\n        history.pop();\n        console.log(this.point);\n        console.log(this.JD);\n\n        if (this.tool == 3) {\n          this.point.pop();\n          this.point.pop();\n        }\n\n        console.log(this.point);\n        let mycanvas = this.$refs.cont;\n        let ctx = mycanvas.getContext('2d');\n        showLastHistory(ctx, history);\n      } else {\n        this.drawImg();\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["history","Point","x","y","type","windowToCanvas","e","mycanvas","rect","getBoundingClientRect","offsetX","left","width","offsetY","top","height","which","showLastHistory","ctx","putImageData","length","data","addHistoy","console","log","push","getImageData","name","dialogVisible","textarea","tool","imgUrl","tempPos","posArray","form","Cwidth","window","screen","Cheight","tools","value","label","point","JD","area","isPolygon","isLine","isArea","mounted","str","sessionStorage","getItem","JSON","parse","$refs","cont","getContext","drawImg","drawer","getAngle","getPolygonArea","methods","handleEvent","changeTool","t","img","Image","src","crossOrigin","onload","drawImage","getTan","p1","p2","p3","p4","k1","k2","tan","Math","abs","myAngle","result","atan","PI","i","init","drawerRect","w","h","strokeStyle","lineWidth","save","beginPath","stroke","restore","drawerCircle","r","arc","drawerLine","z","n","fillStyle","moveTo","lineTo","drawerPoint","closePath","fill","drawPolygon","ps","sortPoints","points","tempPoints","sort","firstP","lastP","smallXP","filter","ball","bigXP","ballA","ballB","splitLineAngle","atan2","upperP","lowerP","forEach","p","angle","myPoints","concat","that","onclick","onmousedown","preventDefault","mousedown","onmousemove","pos","onmouseup","rx","ry","sqrt","round","mouseup","l","event","CanvasPos","clientX","clientY","resetMap","clearRect","cancel","pop"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-row>\r\n      <el-col :span=\"12\">\r\n        <!--canvas居中：display设置为block-->\r\n        <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n                @click=\"handleEvent\"\r\n        >\r\n        </canvas>\r\n      </el-col>\r\n      <el-col :span=\"2\" style=\"margin-left: 20px\">\r\n        <span>专家意见：</span>\r\n      </el-col>\r\n      <el-col :span=\"9\" style=\"text-align:left\">\r\n        <el-input\r\n            type=\"textarea\"\r\n            :rows=\"30\"\r\n            placeholder=\"请输入内容\"\r\n            v-model=\"this.form.result\">\r\n        </el-input>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div style=\"margin: 10px 0px;display: flex\">\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"cancel\" v-show=\"!isPolygon\">撤销</el-button>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"resetMap\">重置</el-button>\r\n    <span style=\"margin-left: 5px\">选择绘制图案：</span>\r\n    <el-select v-model=\"tool\" clearable @change=\"changeTool\"\r\n               size=\"small\">\r\n      <el-option\r\n          v-for=\"item in tools\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\">\r\n      </el-option>\r\n    </el-select>\r\n    <span style=\"margin-left: 5px;text-align:right;\" v-show=\"isLine\">最新两条直线的夹角为：{{JD}}</span>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"drawPolygon\"\r\n               v-show=\"isPolygon\"\r\n    >画多边形</el-button>\r\n    <span style=\"margin-left: 5px;text-align:right;\" v-show=\"isArea\">最新图形的面积为：{{area}}</span>\r\n  </div>\r\n\r\n  <div style=\"display: block\">\r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  let rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width),\r\n      e.offsetY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  console.log(\"存历史\")\r\n  console.log(history)\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      dialogVisible:false,\r\n      ctx:null,\r\n      mycanvas:null,\r\n      textarea:'',\r\n      tool:'',\r\n      imgUrl:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n      form:[],\r\n      Cwidth:(window.screen.width)*0.5,\r\n      Cheight:(window.screen.height)*0.75,\r\n      tools:[\r\n        {value:\"3\", label:\"直线\"},\r\n        {value:\"1\", label:\"矩形\"},\r\n        {value:\"2\", label:\"圆形\"},\r\n        {value:\"4\", label:\"任意多边形\"},\r\n        {value:\"5\", label:\"点\"},\r\n      ],\r\n      point:[],\r\n      JD:'',\r\n      area:'20.335',\r\n      isPolygon:false,\r\n      isLine:false,\r\n      isArea:false,\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.();\r\n    let str = sessionStorage.getItem(\"img\") || \"{}\"\r\n    console.log(str)\r\n    this.form = JSON.parse(str)\r\n\r\n    this.mycanvas = this.$refs.cont\r\n    this.ctx = this.mycanvas.getContext('2d');\r\n    this.mycanvas.width = (window.screen.width)*0.5\r\n    this.mycanvas.height = (window.screen.height)*0.75\r\n    console.log(\"mounted\")\r\n    console.log(this.form)\r\n    this.drawImg()\r\n    this.drawer();\r\n    this.getAngle();\r\n\r\n    //测试\r\n    this.getPolygonArea()\r\n  },\r\n\r\n  methods:{\r\n\r\n    handleEvent(e){\r\n      //console.log(e)\r\n      this.drawer();\r\n    },\r\n    changeTool(t){\r\n      this.point = [];\r\n      this.JD = '';\r\n      this.drawer();\r\n      if(t == '1'){\r\n        //画矩形\r\n        this.isArea = true\r\n        this.isLine = false\r\n        this.isPolygon = false\r\n      }else if(t == '2'){\r\n        //画圆\r\n        this.isArea = true\r\n        this.isPolygon = false\r\n        this.isLine = false\r\n      }else if(t == '3'){\r\n        //画直线\r\n        this.isArea = false\r\n        this.isPolygon = false\r\n        this.isLine = true\r\n      }else if(t == '4'){\r\n        //画多边形\r\n        this.isArea = true\r\n        this.isPolygon = true\r\n        this.isLine = false\r\n      }else if(t == '5'){\r\n        //画点\r\n        this.isArea = false\r\n        this.isPolygon = false\r\n        this.isLine = false\r\n      }\r\n    },\r\n\r\n    drawImg(){\r\n      let img = new Image();\r\n      img.src = this.form.img;\r\n      console.log(img.src)\r\n      console.log(this.form)\r\n      img.crossOrigin = '';\r\n      img.onload = () => {\r\n        this.ctx.drawImage(img, this.Cwidth/4, 0, 400, this.Cheight);\r\n      }\r\n    },\r\n\r\n    getTan(p1,p2,p3,p4){\r\n      let k1 = (p2.y - p1.y) / (p2.x - p1.x)\r\n      let k2 = (p4.y - p3.y) / (p4.x - p3.x)\r\n\r\n      let tan = (k1-k2) / (1+k1*k2)\r\n      return Math.abs(tan);\r\n    },\r\n\r\n    myAngle(tan){\r\n      //Math.atan,传入tan值，计算弧度，角度等于弧度乘以180/π\r\n      let result = Math.atan(tan) * 180 / Math.PI;\r\n      // let result2 = Math.atan(0.169) * 180 / Math.PI;\r\n      // console.log(result2)\r\n      return result;\r\n    },\r\n\r\n    getAngle(){\r\n      this.myAngle(0.502);\r\n    },\r\n\r\n    getPolygonArea(){\r\n      let area = 0\r\n      this.point = [\r\n        {x:295,y:317},\r\n        {x:424,y:317},\r\n        {x:295,y:403},\r\n        {x:424,y:403}\r\n      ]\r\n      for(let i=0;i<this.point.length-1;i++){\r\n        area += this.point[i].x * this.point[i+1].y - this.point[i].y * this.point[i+1].x\r\n      }\r\n      this.area = Math.abs(area)/2\r\n      console.log(this.area)\r\n    },\r\n\r\n    init(form){\r\n      console.log(form)\r\n      this.textarea = form.result\r\n      this.imgUrl = form.img\r\n      this.form = form\r\n      console.log(this.imgUrl)\r\n      console.log(this.textarea)\r\n      console.log(this.form)\r\n\r\n      this.drawImg()\r\n      this.drawer();\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    //  多边形个顶点连线，画多边形\r\n    drawPolygon(){\r\n      //排序，决定个点之间的连线顺序，尽量避免各边相交\r\n      let ps = this.sortPoints(this.point);\r\n    },\r\n\r\n    sortPoints(points){\r\n      //让点按x轴升序排序\r\n      let tempPoints = points.sort((p1,p2) =>{\r\n        return  p1.x-p2.x\r\n      })\r\n\r\n      //找到x轴的左右极点\r\n      let firstP = tempPoints[0]  //x轴最左端\r\n      let lastP = tempPoints[tempPoints.length-1]  //x轴最右端\r\n\r\n      //如果多个x轴的左右极点，则按y轴排出左右极点\r\n      let smallXP = tempPoints.filter(ball => ball.x === firstP.x)\r\n      let bigXP = tempPoints.filter(ball => ball.x === lastP.x)\r\n      // 处理左右极点有多个的情况,y轴降序\r\n      if (smallXP.length > 1) {\r\n        smallXP.sort((ballA, ballB) => {\r\n          return ballB.y - ballA.y\r\n        })\r\n      }\r\n      if (bigXP.length > 1) {\r\n        bigXP.sort((ballA, ballB) => {\r\n          return ballB.y - ballA.y\r\n        })\r\n      }\r\n      firstP = smallXP[0]\r\n      lastP = bigXP[0]\r\n\r\n      // 获得两个极点连线的角度\r\n      let splitLineAngle = Math.atan2(lastP.y - firstP.y, lastP.x - firstP.x);\r\n      let upperP = []   //上点  小于splitLineAngle的都是上点  X轴降序连接\r\n      let lowerP = []   //下点  大于splitLineAngle的都是下点  X轴升序连接\r\n\r\n      //计算弧度  分为上下点数组\r\n      tempPoints.forEach(p => {\r\n        if (p === firstP || p === lastP) {\r\n          return false\r\n        }\r\n        let angle = Math.atan2(p.y - firstP.y, p.x - firstP.x);\r\n        if (angle > splitLineAngle) {\r\n          lowerP.push(p)\r\n        } else {\r\n          upperP.push(p)\r\n        }\r\n      })\r\n\r\n      //升序\r\n      lowerP = lowerP.sort((p1, p2) => {\r\n        if (p1.x !== p2.x) {  // 处理X轴相同情况的排序\r\n          return p1.x - p2.x\r\n        }\r\n        return p2.y - p1.y\r\n      })\r\n      //降序\r\n      upperP = upperP.sort((p1, p2) => {\r\n        if (p1.x !== p2.x) {  // 处理X轴相同情况的排序\r\n          return p2.x - p1.x\r\n        }\r\n        return p2.y - p1.x\r\n      })\r\n\r\n      // 逆时针连接所有的点\r\n      let myPoints = [firstP].concat(lowerP, [lastP], upperP)\r\n      //调用画直线的方法，进行连线\r\n      let length = myPoints.length\r\n      for(let i = 0; i<length -1 ; i++){\r\n        this.drawerLine(this.ctx,myPoints[i].x,myPoints[i].y,myPoints[i+1].x,myPoints[i+1].y)\r\n        console.log(i)\r\n      }\r\n      this.drawerLine(this.ctx,myPoints[length-1].x,myPoints[length-1].y,myPoints[0].x,myPoints[0].y)\r\n\r\n      this.getPolygonArea() //计算多边形体积\r\n\r\n      //画完清空\r\n      this.point = []\r\n      myPoints = []\r\n    },\r\n\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      let that = this\r\n      console.log(\"外\")\r\n      console.log(this)\r\n      console.log(that)\r\n      console.log(this.tool)\r\n      if (that.tool === '1') {\r\n        //画矩形\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          console.log(\"里\")\r\n          console.log(this)\r\n          console.log(that)\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            console.log(\"---------\")\r\n            console.log(point)\r\n            console.log(mousedown)\r\n            console.log(\"---------\")\r\n            that.area = (w*h)/100 //计算矩形面积 数值太大，统一缩小100倍\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '2') {\r\n        // 画圆\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            //圆上两点，其连线过圆心，长度是直径\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)  //a平方 + b平方 = c平方\r\n            //求圆面积\r\n            that.area = (Math.PI * r * r) /100  //数值太大，统一缩小100倍\r\n            that.area = Math.round(that.area * 1000) / 1000 //取小数点后三位\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '3') {\r\n        //画直线\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          console.log(\"鼠标点击\")\r\n          console.log(mousedown)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            let mouseup = windowToCanvas(e, mycanvas)\r\n            console.log(\"鼠标松开\")\r\n            console.log(mouseup)\r\n            //存直线的起始点和终点，有四个点则确定有两条直线，再求其的夹角\r\n            that.point.push(mouseup)\r\n            that.point.push(mousedown)\r\n            console.log(that.point)\r\n            this.point = that.point\r\n            console.log(this.point)\r\n            let l = that.point.length\r\n            if(l >= 4){\r\n              //计算tan的值\r\n              let tan = that.getTan(that.point[l-4],that.point[l-3],that.point[l-2],that.point[l-1])\r\n              //根据tan值求角度\r\n              let JD = that.myAngle(tan)\r\n              that.JD = Math.round(JD*1000)/1000  //取小数点后三位\r\n              that.JD = that.JD+\"°\" //加上角度\r\n              console.log(JD)\r\n              //that.point = []\r\n            }\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '4') {\r\n        //画多边形\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (e) {\r\n          let point = windowToCanvas(e, mycanvas)\r\n          that.point.push(point)\r\n          that.drawerPoint(ctx, point.x, point.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (that.tool === '5') {\r\n        //画点\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let rect = mycanvas.getBoundingClientRect()\r\n          console.log(rect)\r\n          let CanvasPos = {\r\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\r\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\r\n          }\r\n          console.log(CanvasPos)\r\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y)\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n      this.drawImg();\r\n      this.tool = '';\r\n      this.point = []\r\n      this.isPolygon = false\r\n      this.isLine = false\r\n      this.isArea = false\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        console.log(\"取消上一步\")\r\n        console.log(history)\r\n        this.posArray.pop()\r\n        history.pop()\r\n        console.log(this.point)\r\n        console.log(this.JD)\r\n        if(this.tool == 3){\r\n          this.point.pop()\r\n          this.point.pop()\r\n        }\r\n        console.log(this.point)\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }else{\r\n        this.drawImg();\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}