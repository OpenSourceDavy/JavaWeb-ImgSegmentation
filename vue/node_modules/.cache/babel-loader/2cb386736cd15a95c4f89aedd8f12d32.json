{"ast":null,"code":"import { ref, unref, provide, inject, onMounted, onBeforeUnmount } from 'vue';\nimport Collection from './collection2.mjs';\nimport CollectionItem from './collection-item.mjs';\nconst COLLECTION_ITEM_SIGN = `data-el-collection-item`;\n\nconst createCollectionWithScope = name => {\n  const COLLECTION_NAME = `El${name}Collection`;\n  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`;\n  const COLLECTION_INJECTION_KEY = Symbol(COLLECTION_NAME);\n  const COLLECTION_ITEM_INJECTION_KEY = Symbol(COLLECTION_ITEM_NAME);\n  const ElCollection = { ...Collection,\n    name: COLLECTION_NAME,\n\n    setup() {\n      const collectionRef = ref(null);\n      const itemMap = /* @__PURE__ */new Map();\n\n      const getItems = () => {\n        const collectionEl = unref(collectionRef);\n        if (!collectionEl) return [];\n        const orderedNodes = Array.from(collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`));\n        const items = [...itemMap.values()];\n        const orderedItems = items.sort((a, b) => orderedNodes.indexOf(a.ref) - orderedNodes.indexOf(b.ref));\n        return orderedItems;\n      };\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap,\n        getItems,\n        collectionRef\n      });\n    }\n\n  };\n  const ElCollectionItem = { ...CollectionItem,\n    name: COLLECTION_ITEM_NAME,\n\n    setup(_, {\n      attrs\n    }) {\n      const collectionItemRef = ref(null);\n      const collectionInjection = inject(COLLECTION_INJECTION_KEY, void 0);\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef\n      });\n      onMounted(() => {\n        const collectionItemEl = unref(collectionItemRef);\n\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, {\n            ref: collectionItemEl,\n            ...attrs\n          });\n        }\n      });\n      onBeforeUnmount(() => {\n        const collectionItemEl = unref(collectionItemRef);\n        collectionInjection.itemMap.delete(collectionItemEl);\n      });\n    }\n\n  };\n  return {\n    COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection,\n    ElCollectionItem\n  };\n};\n\nexport { COLLECTION_ITEM_SIGN, createCollectionWithScope };","map":{"version":3,"mappings":";;;AAGY,MAACA,oBAAoB,GAAI,yBAAzB;;AACA,MAACC,yBAAyB,GAAIC,IAAD,IAAU;AACjD,QAAMC,eAAe,GAAI,KAAID,IAAK,YAAlC;AACA,QAAME,oBAAoB,GAAI,GAAED,eAAgB,MAAhD;AACA,QAAME,wBAAwB,GAAGC,MAAM,CAACH,eAAD,CAAvC;AACA,QAAMI,6BAA6B,GAAGD,MAAM,CAACF,oBAAD,CAA5C;AACA,QAAMI,YAAY,GAAG,EACnB,GAAGC,UADgB;AAEnBP,QAAI,EAAEC,eAFa;;AAGnBO,SAAK,GAAG;AACN,YAAMC,aAAa,GAAGC,GAAG,CAAC,IAAD,CAAzB;AACA,YAAMC,OAAO,kBAAmB,IAAIC,GAAJ,EAAhC;;AACA,YAAMC,QAAQ,GAAG,MAAM;AACrB,cAAMC,YAAY,GAAGC,KAAK,CAACN,aAAD,CAA1B;AACA,YAAI,CAACK,YAAL,EACE,OAAO,EAAP;AACF,cAAME,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWJ,YAAY,CAACK,gBAAb,CAA+B,IAAGrB,oBAAqB,GAAvD,CAAX,CAArB;AACA,cAAMsB,KAAK,GAAG,CAAC,GAAGT,OAAO,CAACU,MAAR,EAAJ,CAAd;AACA,cAAMC,YAAY,GAAGF,KAAK,CAACG,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUT,YAAY,CAACU,OAAb,CAAqBF,CAAC,CAACd,GAAvB,IAA8BM,YAAY,CAACU,OAAb,CAAqBD,CAAC,CAACf,GAAvB,CAAnD,CAArB;AACA,eAAOY,YAAP;AACD,OARD;;AASAK,aAAO,CAACxB,wBAAD,EAA2B;AAChCQ,eADgC;AAEhCE,gBAFgC;AAGhCJ;AAHgC,OAA3B,CAAP;AAKD;;AApBkB,GAArB;AAsBA,QAAMmB,gBAAgB,GAAG,EACvB,GAAGC,cADoB;AAEvB7B,QAAI,EAAEE,oBAFiB;;AAGvBM,SAAK,CAACsB,CAAD,EAAI;AAAEC;AAAF,KAAJ,EAAe;AAClB,YAAMC,iBAAiB,GAAGtB,GAAG,CAAC,IAAD,CAA7B;AACA,YAAMuB,mBAAmB,GAAGC,MAAM,CAAC/B,wBAAD,EAA2B,KAAK,CAAhC,CAAlC;AACAwB,aAAO,CAACtB,6BAAD,EAAgC;AACrC2B;AADqC,OAAhC,CAAP;AAGAG,eAAS,CAAC,MAAM;AACd,cAAMC,gBAAgB,GAAGrB,KAAK,CAACiB,iBAAD,CAA9B;;AACA,YAAII,gBAAJ,EAAsB;AACpBH,6BAAmB,CAACtB,OAApB,CAA4B0B,GAA5B,CAAgCD,gBAAhC,EAAkD;AAChD1B,eAAG,EAAE0B,gBAD2C;AAEhD,eAAGL;AAF6C,WAAlD;AAID;AACF,OARQ,CAAT;AASAO,qBAAe,CAAC,MAAM;AACpB,cAAMF,gBAAgB,GAAGrB,KAAK,CAACiB,iBAAD,CAA9B;AACAC,2BAAmB,CAACtB,OAApB,CAA4B4B,MAA5B,CAAmCH,gBAAnC;AACD,OAHc,CAAf;AAID;;AAtBsB,GAAzB;AAwBA,SAAO;AACLjC,4BADK;AAELE,iCAFK;AAGLC,gBAHK;AAILsB;AAJK,GAAP;AAMF,CAzDY","names":["COLLECTION_ITEM_SIGN","createCollectionWithScope","name","COLLECTION_NAME","COLLECTION_ITEM_NAME","COLLECTION_INJECTION_KEY","Symbol","COLLECTION_ITEM_INJECTION_KEY","ElCollection","Collection","setup","collectionRef","ref","itemMap","Map","getItems","collectionEl","unref","orderedNodes","Array","from","querySelectorAll","items","values","orderedItems","sort","a","b","indexOf","provide","ElCollectionItem","CollectionItem","_","attrs","collectionItemRef","collectionInjection","inject","onMounted","collectionItemEl","set","onBeforeUnmount","delete"],"sources":["../../../../../../packages/components/collection/src/collection.ts"],"sourcesContent":["import { inject, onBeforeUnmount, onMounted, provide, ref, unref } from 'vue'\nimport Collection from './collection.vue'\nimport CollectionItem from './collection-item.vue'\n\nimport type { InjectionKey } from 'vue'\nimport type {\n  ElCollectionInjectionContext,\n  ElCollectionItemInjectionContext,\n} from './tokens'\n\nexport const COLLECTION_ITEM_SIGN = `data-el-collection-item`\n\n// Make sure the first letter of name is capitalized\nexport const createCollectionWithScope = (name: string) => {\n  const COLLECTION_NAME = `El${name}Collection`\n  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`\n  const COLLECTION_INJECTION_KEY: InjectionKey<ElCollectionInjectionContext> =\n    Symbol(COLLECTION_NAME)\n  const COLLECTION_ITEM_INJECTION_KEY: InjectionKey<ElCollectionItemInjectionContext> =\n    Symbol(COLLECTION_ITEM_NAME)\n\n  const ElCollection = {\n    ...Collection,\n    name: COLLECTION_NAME,\n    setup() {\n      const collectionRef = ref<HTMLElement | null>(null)\n      const itemMap: ElCollectionInjectionContext['itemMap'] = new Map()\n      const getItems = () => {\n        const collectionEl = unref(collectionRef)\n\n        if (!collectionEl) return []\n        const orderedNodes = Array.from(\n          collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`)\n        )\n\n        const items = [...itemMap.values()]\n\n        const orderedItems = items.sort(\n          (a, b) => orderedNodes.indexOf(a.ref!) - orderedNodes.indexOf(b.ref!)\n        )\n        return orderedItems\n      }\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap,\n        getItems,\n        collectionRef,\n      })\n    },\n  }\n\n  const ElCollectionItem = {\n    ...CollectionItem,\n    name: COLLECTION_ITEM_NAME,\n    setup(_, { attrs }) {\n      const collectionItemRef = ref<HTMLElement | null>(null)\n      const collectionInjection = inject(COLLECTION_INJECTION_KEY, undefined)!\n\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef,\n      })\n\n      onMounted(() => {\n        const collectionItemEl = unref(collectionItemRef)\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, {\n            ref: collectionItemEl,\n            ...attrs,\n          })\n        }\n      })\n\n      onBeforeUnmount(() => {\n        const collectionItemEl = unref(collectionItemRef)!\n        collectionInjection.itemMap.delete(collectionItemEl)\n      })\n    },\n  }\n\n  return {\n    COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection,\n    ElCollectionItem,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}