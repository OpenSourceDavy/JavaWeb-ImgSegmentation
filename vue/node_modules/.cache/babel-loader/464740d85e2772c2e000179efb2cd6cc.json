{"ast":null,"code":"import { defineComponent, useSlots, inject, computed, ref, Text, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, Fragment, renderSlot, createBlock, withCtx, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { buttonProps, buttonEmits } from './button.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { buttonGroupContextKey } from '../../../tokens/button.mjs';\nimport { useGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nconst _hoisted_1 = [\"disabled\", \"autofocus\", \"type\"];\nconst __default__ = {\n  name: \"ElButton\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const slots = useSlots();\n    const buttonGroupContext = inject(buttonGroupContextKey, void 0);\n    const globalConfig = useGlobalConfig(\"button\");\n    const ns = useNamespace(\"button\");\n    const {\n      form\n    } = useFormItem();\n\n    const _size = useSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));\n\n    const _disabled = useDisabled();\n\n    const _ref = ref();\n\n    const _type = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || \"\");\n\n    const autoInsertSpace = computed(() => {\n      var _a, _b, _c;\n\n      return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;\n    });\n    const shouldAddSpace = computed(() => {\n      var _a;\n\n      const defaultSlot = (_a = slots.default) == null ? void 0 : _a.call(slots);\n\n      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n        const slot = defaultSlot[0];\n\n        if ((slot == null ? void 0 : slot.type) === Text) {\n          const text = slot.children;\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim());\n        }\n      }\n\n      return false;\n    });\n    const buttonStyle = computed(() => {\n      let styles = {};\n      const buttonColor = props.color;\n\n      if (buttonColor) {\n        const color = new TinyColor(buttonColor);\n        const shadeBgColor = color.shade(20).toString();\n\n        if (props.plain) {\n          styles = {\n            \"--el-button-bg-color\": color.tint(90).toString(),\n            \"--el-button-text-color\": buttonColor,\n            \"--el-button-hover-text-color\": \"var(--el-color-white)\",\n            \"--el-button-hover-bg-color\": buttonColor,\n            \"--el-button-hover-border-color\": buttonColor,\n            \"--el-button-active-bg-color\": shadeBgColor,\n            \"--el-button-active-text-color\": \"var(--el-color-white)\",\n            \"--el-button-active-border-color\": shadeBgColor\n          };\n        } else {\n          const tintBgColor = color.tint(30).toString();\n          styles = {\n            \"--el-button-bg-color\": buttonColor,\n            \"--el-button-border-color\": buttonColor,\n            \"--el-button-hover-bg-color\": tintBgColor,\n            \"--el-button-hover-border-color\": tintBgColor,\n            \"--el-button-active-bg-color\": shadeBgColor,\n            \"--el-button-active-border-color\": shadeBgColor\n          };\n        }\n\n        if (_disabled.value) {\n          const disabledButtonColor = color.tint(50).toString();\n          styles[\"--el-button-disabled-bg-color\"] = disabledButtonColor;\n          styles[\"--el-button-disabled-border-color\"] = disabledButtonColor;\n        }\n      }\n\n      return styles;\n    });\n\n    const handleClick = evt => {\n      if (props.nativeType === \"reset\") {\n        form == null ? void 0 : form.resetFields();\n      }\n\n      emit(\"click\", evt);\n    };\n\n    expose({\n      ref: _ref,\n      size: _size,\n      type: _type,\n      disabled: _disabled,\n      shouldAddSpace\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"button\", {\n        ref_key: \"_ref\",\n        ref: _ref,\n        class: normalizeClass([unref(ns).b(), unref(ns).m(unref(_type)), unref(ns).m(unref(_size)), unref(ns).is(\"disabled\", unref(_disabled)), unref(ns).is(\"loading\", _ctx.loading), unref(ns).is(\"plain\", _ctx.plain), unref(ns).is(\"round\", _ctx.round), unref(ns).is(\"circle\", _ctx.circle)]),\n        disabled: unref(_disabled) || _ctx.loading,\n        autofocus: _ctx.autofocus,\n        type: _ctx.nativeType,\n        style: normalizeStyle(unref(buttonStyle)),\n        onClick: handleClick\n      }, [_ctx.loading ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [_ctx.$slots.loading ? renderSlot(_ctx.$slots, \"loading\", {\n        key: 0\n      }) : (openBlock(), createBlock(unref(ElIcon), {\n        key: 1,\n        class: normalizeClass(unref(ns).is(\"loading\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))]),\n        _: 1\n      }, 8, [\"class\"]))], 2112)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 1\n      }, {\n        default: withCtx(() => [_ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {\n          key: 0\n        })) : renderSlot(_ctx.$slots, \"icon\", {\n          key: 1\n        })]),\n        _: 3\n      })) : createCommentVNode(\"v-if\", true), _ctx.$slots.default ? (openBlock(), createElementBlock(\"span\", {\n        key: 2,\n        class: normalizeClass({\n          [unref(ns).em(\"text\", \"expand\")]: unref(shouldAddSpace)\n        })\n      }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true)], 14, _hoisted_1);\n    };\n  }\n\n});\n\nvar Button = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/button/src/button.vue\"]]);\n\nexport { Button as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AAEA;AACA;AACA;AACA;AAAAA;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA,qCACA;AAIA;;AACA;AACA,KAPA;AAQA;AACA;;AACA;;AACA;AACA;;AACA;AACA;AACA;AAIA;AACA;;AAEA;AAEA,KAhBA;AAiBA;AACA;AACA;;AACA;AAAA,cACAC,kCADA;AACA,cACAC,yCADA;;AACA,YACAC,WADA,EACA;AAAAC,gBACA;AACA,6DADA;AAEA,iDAFA;AAGA,mEAHA;AAIA,qDAJA;AAKA,yDALA;AAMA,uDANA;AAOA,oEAPA;AAQA;AARA,WADA;AAUA,SAXA,MAYA;AAAA,gBACAC,uCADA;AACAD,gBACA;AACA,+CADA;AAEA,mDAFA;AAGA,qDAHA;AAIA,yDAJA;AAMA,uDANA;AAOA;AAPA,WADA;AAUA;;AACA;AACA;AAEAA;AACAA;AAEA;AACA;;AACA;AACA,KAtCA;;AAuCA;AACA;AAEAJ;AAEA;;AAEAM;AAAA,KAPA;;AASAC,UAEA;AAEAC,eAFA;AAGAC,iBAHA;iBAAA;yBAAA;;AAAA,MAFA","names":["form","color","shadeBgColor","props","styles","tintBgColor","emit","expose","ref","size"],"sources":["../../../../../../packages/components/button/src/button.vue"],"sourcesContent":["<template>\n  <button\n    ref=\"_ref\"\n    :class=\"[\n      ns.b(),\n      ns.m(_type),\n      ns.m(_size),\n      ns.is('disabled', _disabled),\n      ns.is('loading', loading),\n      ns.is('plain', plain),\n      ns.is('round', round),\n      ns.is('circle', circle),\n    ]\"\n    :disabled=\"_disabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <template v-if=\"loading\">\n      <slot v-if=\"$slots.loading\" name=\"loading\" />\n      <el-icon v-else :class=\"ns.is('loading')\">\n        <component :is=\"loadingIcon\" />\n      </el-icon>\n    </template>\n    <el-icon v-else-if=\"icon || $slots.icon\">\n      <component :is=\"icon\" v-if=\"icon\" />\n      <slot v-else name=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ [ns.em('text', 'expand')]: shouldAddSpace }\"\n    >\n      <slot />\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\" setup>\nimport { Text, computed, inject, ref, useSlots } from 'vue'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { buttonEmits, buttonProps } from './button'\n\ndefineOptions({\n  name: 'ElButton',\n})\n\nconst props = defineProps(buttonProps)\nconst emit = defineEmits(buttonEmits)\nconst slots = useSlots()\n\nconst buttonGroupContext = inject(buttonGroupContextKey, undefined)\nconst globalConfig = useGlobalConfig('button')\nconst ns = useNamespace('button')\nconst { form } = useFormItem()\nconst _size = useSize(computed(() => buttonGroupContext?.size))\nconst _disabled = useDisabled()\nconst _ref = ref<HTMLButtonElement>()\n\nconst _type = computed(() => props.type || buttonGroupContext?.type || '')\nconst autoInsertSpace = computed(\n  () => props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n)\n\n// add space between two characters in Chinese\nconst shouldAddSpace = computed(() => {\n  const defaultSlot = slots.default?.()\n  if (autoInsertSpace.value && defaultSlot?.length === 1) {\n    const slot = defaultSlot[0]\n    if (slot?.type === Text) {\n      const text = slot.children as string\n      return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim())\n    }\n  }\n  return false\n})\n\n// calculate hover & active color by custom color\n// only work when custom color\nconst buttonStyle = computed(() => {\n  let styles: Record<string, string> = {}\n\n  const buttonColor = props.color\n\n  if (buttonColor) {\n    const color = new TinyColor(buttonColor)\n    const shadeBgColor = color.shade(20).toString()\n    if (props.plain) {\n      styles = {\n        '--el-button-bg-color': color.tint(90).toString(),\n        '--el-button-text-color': buttonColor,\n        '--el-button-hover-text-color': 'var(--el-color-white)',\n        '--el-button-hover-bg-color': buttonColor,\n        '--el-button-hover-border-color': buttonColor,\n        '--el-button-active-bg-color': shadeBgColor,\n        '--el-button-active-text-color': 'var(--el-color-white)',\n        '--el-button-active-border-color': shadeBgColor,\n      }\n    } else {\n      const tintBgColor = color.tint(30).toString()\n      styles = {\n        '--el-button-bg-color': buttonColor,\n        '--el-button-border-color': buttonColor,\n        '--el-button-hover-bg-color': tintBgColor,\n        '--el-button-hover-border-color': tintBgColor,\n        '--el-button-active-bg-color': shadeBgColor,\n        '--el-button-active-border-color': shadeBgColor,\n      }\n    }\n\n    if (_disabled.value) {\n      const disabledButtonColor = color.tint(50).toString()\n      styles['--el-button-disabled-bg-color'] = disabledButtonColor\n      styles['--el-button-disabled-border-color'] = disabledButtonColor\n    }\n  }\n\n  return styles\n})\n\nconst handleClick = (evt: MouseEvent) => {\n  if (props.nativeType === 'reset') {\n    form?.resetFields()\n  }\n  emit('click', evt)\n}\n\ndefineExpose({\n  /** @description button html element */\n  ref: _ref,\n  /** @description button size */\n  size: _size,\n  /** @description button type */\n  type: _type,\n  /** @description button disabled */\n  disabled: _disabled,\n  /** @description whether adding space */\n  shouldAddSpace,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}