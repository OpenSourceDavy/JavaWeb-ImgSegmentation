{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // config.headers['token'] = user.token;  // 设置请求头\n  //取出sessionStorage里缓存的用户信息\n\n  let userJson = sessionStorage.getItem(\"user\");\n  console.log(userJson);\n\n  if (!userJson) {\n    router.push(\"/login\");\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"sources":["C:/Users/davy3/crm_vue1/vue/src/utils/request.js"],"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","headers","userJson","sessionStorage","getItem","console","log","push","error","Promise","reject","response","res","data","responseType","JSON","parse"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,MADkB;AACT;AAClBC,EAAAA,OAAO,EAAE;AAFkB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiCC,MAAM,IAAI;AACzCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADyC,CAGzC;AAEA;;AACA,MAAIC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,MAAG,CAACA,QAAJ,EAAa;AACXT,IAAAA,MAAM,CAACc,IAAP,CAAY,QAAZ;AACD;;AAED,SAAOP,MAAP;AACD,CAbD,EAaGQ,KAAK,IAAI;AACV,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAfD,E,CAiBA;AACA;;AACAd,OAAO,CAACI,YAAR,CAAqBa,QAArB,CAA8BZ,GAA9B,CACIY,QAAQ,IAAI;AACV,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADU,CAEV;;AACA,MAAIF,QAAQ,CAACX,MAAT,CAAgBc,YAAhB,KAAiC,MAArC,EAA6C;AAC3C,WAAOF,GAAP;AACD,GALS,CAMV;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;AACD;;AACD,SAAOA,GAAP;AACD,CAZL,EAaIJ,KAAK,IAAI;AACPH,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQE,KAApB,EADO,CACoB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAhBL;AAoBA,eAAed,OAAf","sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\n\r\nconst request = axios.create({\r\n  baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n  timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n  // config.headers['token'] = user.token;  // 设置请求头\r\n\r\n  //取出sessionStorage里缓存的用户信息\r\n  let userJson = sessionStorage.getItem(\"user\")\r\n  console.log(userJson)\r\n  if(!userJson){\r\n    router.push(\"/login\")\r\n  }\r\n\r\n  return config\r\n}, error => {\r\n  return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n      let res = response.data;\r\n      // 如果是返回的文件\r\n      if (response.config.responseType === 'blob') {\r\n        return res\r\n      }\r\n      // 兼容服务端返回的字符串数据\r\n      if (typeof res === 'string') {\r\n        res = res ? JSON.parse(res) : res\r\n      }\r\n      return res;\r\n    },\r\n    error => {\r\n      console.log('err' + error) // for debug\r\n      return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"]},"metadata":{},"sourceType":"module"}