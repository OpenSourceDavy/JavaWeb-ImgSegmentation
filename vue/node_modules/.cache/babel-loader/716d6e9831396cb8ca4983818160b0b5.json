{"ast":null,"code":"import { ref, inject, computed } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps } from '../../../utils/vue/props.mjs';\nimport { useSizeProp, useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber, isBoolean } from '@vueuse/core';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\nconst radioPropsBase = buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  label: {\n    type: [String, Number, Boolean],\n    default: \"\"\n  }\n});\nconst radioProps = buildProps({ ...radioPropsBase,\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: \"\"\n  },\n  name: {\n    type: String,\n    default: \"\"\n  },\n  border: Boolean\n});\nconst radioEmits = {\n  [UPDATE_MODEL_EVENT]: val => isString(val) || isNumber(val) || isBoolean(val),\n  change: val => isString(val) || isNumber(val) || isBoolean(val)\n};\n\nconst useRadio = (props, emit) => {\n  const radioRef = ref();\n  const radioGroup = inject(radioGroupKey, void 0);\n  const isGroup = computed(() => !!radioGroup);\n  const modelValue = computed({\n    get() {\n      return isGroup.value ? radioGroup.modelValue : props.modelValue;\n    },\n\n    set(val) {\n      if (isGroup.value) {\n        radioGroup.changeEvent(val);\n      } else {\n        emit(UPDATE_MODEL_EVENT, val);\n      }\n\n      radioRef.value.checked = props.modelValue === props.label;\n    }\n\n  });\n  const size = useSize(computed(() => radioGroup == null ? void 0 : radioGroup.size));\n  const disabled = useDisabled(computed(() => radioGroup == null ? void 0 : radioGroup.disabled));\n  const focus = ref(false);\n  const tabIndex = computed(() => {\n    return disabled.value || isGroup.value && modelValue.value !== props.label ? -1 : 0;\n  });\n  return {\n    radioRef,\n    isGroup,\n    radioGroup,\n    focus,\n    size,\n    disabled,\n    tabIndex,\n    modelValue\n  };\n};\n\nexport { radioEmits, radioProps, radioPropsBase, useRadio };","map":{"version":3,"mappings":";;;;;;;;;;;AAKY,MAACA,cAAc,GAAGC,UAAU,CAAC;AACvCC,MAAI,EAAEC,WADiC;AAEvCC,UAAQ,EAAEC,OAF6B;AAGvCC,OAAK,EAAE;AACLC,QAAI,EAAE,CAACC,MAAD,EAASC,MAAT,EAAiBJ,OAAjB,CADD;AAELK,WAAO,EAAE;AAFJ;AAHgC,CAAD,CAA5B;AAQA,MAACC,UAAU,GAAGV,UAAU,CAAC,EACnC,GAAGD,cADgC;AAEnCY,YAAU,EAAE;AACVL,QAAI,EAAE,CAACC,MAAD,EAASC,MAAT,EAAiBJ,OAAjB,CADI;AAEVK,WAAO,EAAE;AAFC,GAFuB;AAMnCG,MAAI,EAAE;AACJN,QAAI,EAAEC,MADF;AAEJE,WAAO,EAAE;AAFL,GAN6B;AAUnCI,QAAM,EAAET;AAV2B,CAAD,CAAxB;AAYA,MAACU,UAAU,GAAG;AACxB,GAACC,kBAAD,GAAuBC,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBE,QAAQ,CAACF,GAAD,CAAzB,IAAkCG,SAAS,CAACH,GAAD,CADlD;AAExBI,QAAM,EAAGJ,GAAD,IAASC,QAAQ,CAACD,GAAD,CAAR,IAAiBE,QAAQ,CAACF,GAAD,CAAzB,IAAkCG,SAAS,CAACH,GAAD;AAFpC,CAAd;;AAIA,MAACK,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACvC,QAAMC,QAAQ,GAAGC,GAAG,EAApB;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,aAAD,EAAgB,KAAK,CAArB,CAAzB;AACA,QAAMC,OAAO,GAAGC,QAAQ,CAAC,MAAM,CAAC,CAACJ,UAAT,CAAxB;AACA,QAAMf,UAAU,GAAGmB,QAAQ,CAAC;AAC1BC,OAAG,GAAG;AACJ,aAAOF,OAAO,CAACG,KAAR,GAAgBN,UAAU,CAACf,UAA3B,GAAwCW,KAAK,CAACX,UAArD;AACD,KAHyB;;AAI1BsB,OAAG,CAACjB,GAAD,EAAM;AACP,UAAIa,OAAO,CAACG,KAAZ,EAAmB;AACjBN,kBAAU,CAACQ,WAAX,CAAuBlB,GAAvB;AACD,OAFD,MAEO;AACLO,YAAI,CAACR,kBAAD,EAAqBC,GAArB,CAAJ;AACD;;AACDQ,cAAQ,CAACQ,KAAT,CAAeG,OAAf,GAAyBb,KAAK,CAACX,UAAN,KAAqBW,KAAK,CAACjB,KAApD;AACD;;AAXyB,GAAD,CAA3B;AAaA,QAAMJ,IAAI,GAAGmC,OAAO,CAACN,QAAQ,CAAC,MAAMJ,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACzB,IAAhD,CAAT,CAApB;AACA,QAAME,QAAQ,GAAGkC,WAAW,CAACP,QAAQ,CAAC,MAAMJ,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACvB,QAAhD,CAAT,CAA5B;AACA,QAAMmC,KAAK,GAAGb,GAAG,CAAC,KAAD,CAAjB;AACA,QAAMc,QAAQ,GAAGT,QAAQ,CAAC,MAAM;AAC9B,WAAO3B,QAAQ,CAAC6B,KAAT,IAAkBH,OAAO,CAACG,KAAR,IAAiBrB,UAAU,CAACqB,KAAX,KAAqBV,KAAK,CAACjB,KAA9D,GAAsE,CAAC,CAAvE,GAA2E,CAAlF;AACD,GAFwB,CAAzB;AAGA,SAAO;AACLmB,YADK;AAELK,WAFK;AAGLH,cAHK;AAILY,SAJK;AAKLrC,QALK;AAMLE,YANK;AAOLoC,YAPK;AAQL5B;AARK,GAAP;AAUF,CAjCY","names":["radioPropsBase","buildProps","size","useSizeProp","disabled","Boolean","label","type","String","Number","default","radioProps","modelValue","name","border","radioEmits","UPDATE_MODEL_EVENT","val","isString","isNumber","isBoolean","change","useRadio","props","emit","radioRef","ref","radioGroup","inject","radioGroupKey","isGroup","computed","get","value","set","changeEvent","checked","useSize","useDisabled","focus","tabIndex"],"sources":["../../../../../../packages/components/radio/src/radio.ts"],"sourcesContent":["import { computed, inject, ref } from 'vue'\nimport { buildProps, isBoolean, isNumber, isString } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { radioGroupKey } from '@element-plus/tokens'\nimport { useDisabled, useSize, useSizeProp } from '@element-plus/hooks'\nimport type { ExtractPropTypes, SetupContext } from 'vue'\n\nexport const radioPropsBase = buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  label: {\n    type: [String, Number, Boolean],\n    default: '',\n  },\n})\nexport const radioProps = buildProps({\n  ...radioPropsBase,\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: '',\n  },\n  name: {\n    type: String,\n    default: '',\n  },\n  border: Boolean,\n} as const)\nexport type RadioProps = ExtractPropTypes<typeof radioProps>\n\nexport const radioEmits = {\n  [UPDATE_MODEL_EVENT]: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\nexport type RadioEmits = typeof radioEmits\n\nexport const useRadio = (\n  props: { label: RadioProps['label']; modelValue?: RadioProps['modelValue'] },\n  emit: SetupContext<RadioEmits>['emit']\n) => {\n  const radioRef = ref<HTMLInputElement>()\n  const radioGroup = inject(radioGroupKey, undefined)\n  const isGroup = computed(() => !!radioGroup)\n  const modelValue = computed<RadioProps['modelValue']>({\n    get() {\n      return isGroup.value ? radioGroup!.modelValue : props.modelValue!\n    },\n    set(val) {\n      if (isGroup.value) {\n        radioGroup!.changeEvent(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n      }\n      radioRef.value!.checked = props.modelValue === props.label\n    },\n  })\n\n  const size = useSize(computed(() => radioGroup?.size))\n  const disabled = useDisabled(computed(() => radioGroup?.disabled))\n  const focus = ref(false)\n  const tabIndex = computed(() => {\n    return disabled.value || (isGroup.value && modelValue.value !== props.label)\n      ? -1\n      : 0\n  })\n\n  return {\n    radioRef,\n    isGroup,\n    radioGroup,\n    focus,\n    size,\n    disabled,\n    tabIndex,\n    modelValue,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}