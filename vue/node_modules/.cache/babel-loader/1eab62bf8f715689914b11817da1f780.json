{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, toRef, computed, reactive, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createBlock, withCtx, renderSlot, createElementVNode, Fragment } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { menuItemProps, menuItemEmits } from './menu-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { Effect } from '../../popper/src/popper.mjs';\nconst COMPONENT_NAME = \"ElMenuItem\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip\n  },\n  props: menuItemProps,\n  emits: menuItemEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const instance = getCurrentInstance();\n    const rootMenu = inject(\"rootMenu\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const {\n      parentMenu,\n      paddingStyle,\n      indexPath\n    } = useMenu(instance, toRef(props, \"index\"));\n    const subMenu = inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const active = computed(() => props.index === rootMenu.activeIndex);\n    const item = reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n\n    onMounted(() => {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      paddingStyle,\n      active,\n      handleClick\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  class: \"el-menu-tooltip__trigger\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([\"el-menu-item\", {\n      \"is-active\": _ctx.active,\n      \"is-disabled\": _ctx.disabled\n    }]),\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    style: normalizeStyle(_ctx.paddingStyle),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [_ctx.parentMenu.type.name === \"ElMenu\" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(_component_el_tooltip, {\n    key: 0,\n    effect: _ctx.Effect.DARK,\n    placement: \"right\",\n    \"fallback-placements\": [\"left\"],\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [renderSlot(_ctx.$slots, \"title\")]),\n    default: withCtx(() => [createElementVNode(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"default\")])]),\n    _: 3\n  }, 8, [\"effect\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [renderSlot(_ctx.$slots, \"default\"), renderSlot(_ctx.$slots, \"title\")], 64))], 6);\n}\n\nvar MenuItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue\"]]);\n\nexport { MenuItem as default };","map":{"version":3,"mappings":";;;;;;;;;AAwDA,MAAMA,cAAiB,eAAvB;;AACA,MAAKC,YAAaC,eAAa;AAC7BC,MAAM,gBADuB;AAE7BC,YAAY;AACVC;AADU,GAFiB;AAM7BC,OAAO,eANsB;AAO7BC,OAAO,eAPsB;;AAS7BC,QAAMF,KAAN,EAAa;AAAEG;AAAF,GAAb,EAAuB;AACrB,UAAMC,WAAWC,kBAAmB,EAApC;AACM,qBAAWC,OAAqB,UAArB,CAAX;AACN,QAAI,CAACC,QAAL,EAAeC,WAAWd,cAAX,EAA2B,0BAA3B;AAET;AAAEe,gBAAF;AAAcC,kBAAd;AAA4BC;AAA5B,QAA0CC,QAC9CR,QAD8C,EAE9CS,MAAMb,KAAN,EAAa,OAAb,CAF8C,CAA1C;AAKN,UAAMc,OAAU,UAAmC,sBAAWC,KAAX,CAAiBC,GAAK,EAAzD,CAAhB;AACA,QAAI,CAACF,OAAL,EAAcN,WAAWd,cAAX,EAA2B,yBAA3B;AAEd,UAAMuB,SAASC,QAAS,OAAMlB,KAAM,MAAN,KAAgBO,SAASY,WAA/B,CAAxB;AACA,UAAMC,OAA2BC,QAAS;AACxCC,aAAOtB,KAAM,MAD2B;AAExCW,eAFwC;AAGxCM;AAHwC,MAA1C;;AAMA,UAAMM,cAAc,MAAM;AACpB,WAACvB,MAAMwB,QAAP,EAAiB;AACnBjB,iBAASkB,mBAAT,CAA6B;AAC3BH,iBAAOtB,KAAM,MADc;AAE3BW,qBAAWA,SAAU,MAFM;AAG3Be,iBAAO1B,KAAM;AAHc,SAA7B;AAKAG,aAAK,OAAL,EAAciB,IAAd;AACF;AACF,KATA;;AAWAO,cAAU,MAAM;AACdb,cAAQc,UAAR,CAAmBR,IAAnB;AACAb,eAASsB,WAAT,CAAqBT,IAArB;AACD,KAHD;AAKAU,oBAAgB,MAAM;AACpBhB,cAAQiB,aAAR,CAAsBX,IAAtB;AACAb,eAASyB,cAAT,CAAwBZ,IAAxB;AACD,KAHD;AAKO;AACLa,YADK;AAELxB,gBAFK;AAGLF,cAHK;AAILG,kBAJK;AAKLO,YALK;AAOLM;AAPK;AAST;;AA3D6B,EAA/B;;AA/BW;AAAAW,SAAM;AAAN;;;;;sBAzBTC,kBAiCK;AAhCHD,WAAKE,gBAAC,cAADA,EAAe;AAIS,8BAJT;AAIsC;AAJtC,KAAfA,EAgCF;AA/BHC,QAAK,YA+BF;AA9BHC,YAAS,MA8BN;AA7BFC,WAAKC,eAAEC,IAAY,aAAdD,CA6BH;AAxBFE,aAAKC,MAAE,GAAF,KAAEA,sEAAF;AAwBH,KAxBK,CAGSF,IAAW,WAAX,CAAWG,IAAX,CAAgB/C,IAAhB,KAAoB,QAApB,IAA6C4C,cAASzC,KAAT,CAAe6C,QAA5D,IAAgFJ,YAAOK,KAAvF,IAAuFC,aADxGC,WAiBa;AAAAC;AAXVC,YAAQT,IAAO,OAAP,CAAOU,IAWL;AAVXC,aAAU,SAUC;AATV,2BAAqB,QASX;AARXC;AAQW,KARX;AAEWC,aAAOC,QAChB,MAAqB,CAArBC,UAAqB,uBADLD,CAFlB;qBAKA,MAEM,CAFNE,mBAEM,KAFN,cAEM,CADJD,UAAQ,wBACJ,CAFN,CAEM,EAPN;;AAAA,GAQW,gBAhBI,kBAiBjBrB,kBAGW;AAAAc;AAAA,MAFTO,UAAQ,wBAEC,EADTA,UAAqB,sBACZ,GADY,EACZ,CApBM,CAHT,CAwBL","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElTooltip","props","emits","setup","emit","instance","getCurrentInstance","inject","rootMenu","throwError","parentMenu","paddingStyle","indexPath","useMenu","toRef","subMenu","value","uid","active","computed","activeIndex","item","reactive","index","handleClick","disabled","handleMenuItemClick","route","onMounted","addSubMenu","addMenuItem","onBeforeUnmount","removeSubMenu","removeMenuItem","Effect","class","_createElementBlock","_normalizeClass","role","tabindex","style","_normalizeStyle","_ctx","onClick","_cache","type","collapse","title","openBlock","_createBlock","key","effect","DARK","placement","persistent","content","_withCtx","_renderSlot","_createElementVNode"],"sources":["../../../../../../packages/components/menu/src/menu-item.vue"],"sourcesContent":["<template>\n  <li\n    class=\"el-menu-item\"\n    role=\"menuitem\"\n    tabindex=\"-1\"\n    :style=\"paddingStyle\"\n    :class=\"{\n      'is-active': active,\n      'is-disabled': disabled,\n    }\"\n    @click=\"handleClick\"\n  >\n    <el-tooltip\n      v-if=\"\n        parentMenu.type.name === 'ElMenu' &&\n        rootMenu.props.collapse &&\n        $slots.title\n      \"\n      :effect=\"Effect.DARK\"\n      placement=\"right\"\n      :fallback-placements=\"['left']\"\n      persistent\n    >\n      <template #content>\n        <slot name=\"title\" />\n      </template>\n      <div class=\"el-menu-tooltip__trigger\">\n        <slot />\n      </div>\n    </el-tooltip>\n    <template v-else>\n      <slot />\n      <slot name=\"title\" />\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  toRef,\n} from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { Effect } from '@element-plus/components/popper'\nimport { throwError } from '@element-plus/utils'\nimport useMenu from './use-menu'\nimport { menuItemEmits, menuItemProps } from './menu-item'\n\nimport type { MenuItemRegistered, MenuProvider, SubMenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItem'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip,\n  },\n\n  props: menuItemProps,\n  emits: menuItemEmits,\n\n  setup(props, { emit }) {\n    const instance = getCurrentInstance()!\n    const rootMenu = inject<MenuProvider>('rootMenu')\n    if (!rootMenu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\n    const { parentMenu, paddingStyle, indexPath } = useMenu(\n      instance,\n      toRef(props, 'index')\n    )\n\n    const subMenu = inject<SubMenuProvider>(`subMenu:${parentMenu.value.uid}`)\n    if (!subMenu) throwError(COMPONENT_NAME, 'can not inject sub menu')\n\n    const active = computed(() => props.index === rootMenu.activeIndex)\n    const item: MenuItemRegistered = reactive({\n      index: props.index,\n      indexPath,\n      active,\n    })\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route,\n        })\n        emit('click', item)\n      }\n    }\n\n    onMounted(() => {\n      subMenu.addSubMenu(item)\n      rootMenu.addMenuItem(item)\n    })\n\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item)\n      rootMenu.removeMenuItem(item)\n    })\n\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      paddingStyle,\n      active,\n\n      handleClick,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}