{"ast":null,"code":"import { defineComponent, inject, ref, unref, nextTick, computed, provide, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElCollectionItem, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY, ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY } from './tokens.mjs';\nimport { getFocusIntent, reorderArray, focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nconst _sfc_main = defineComponent({\n  components: {\n    ElRovingFocusCollectionItem: ElCollectionItem\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true\n    },\n    active: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"mousedown\", \"focus\", \"keydown\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      currentTabbedId,\n      loop,\n      onItemFocus,\n      onItemShiftTab\n    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);\n    const {\n      getItems\n    } = inject(COLLECTION_INJECTION_KEY, void 0);\n    const id = useId();\n    const rovingFocusGroupItemRef = ref(null);\n    const handleMousedown = composeEventHandlers(e => {\n      emit(\"mousedown\", e);\n    }, e => {\n      if (!props.focusable) {\n        e.preventDefault();\n      } else {\n        onItemFocus(unref(id));\n      }\n    });\n    const handleFocus = composeEventHandlers(e => {\n      emit(\"focus\", e);\n    }, () => {\n      onItemFocus(unref(id));\n    });\n    const handleKeydown = composeEventHandlers(e => {\n      emit(\"keydown\", e);\n    }, e => {\n      const {\n        key,\n        shiftKey,\n        target,\n        currentTarget\n      } = e;\n\n      if (key === EVENT_CODE.tab && shiftKey) {\n        onItemShiftTab();\n        return;\n      }\n\n      if (target !== currentTarget) return;\n      const focusIntent = getFocusIntent(e);\n\n      if (focusIntent) {\n        e.preventDefault();\n        const items = getItems().filter(item => item.focusable);\n        let elements = items.map(item => item.ref);\n\n        switch (focusIntent) {\n          case \"last\":\n            {\n              elements.reverse();\n              break;\n            }\n\n          case \"prev\":\n          case \"next\":\n            {\n              if (focusIntent === \"prev\") {\n                elements.reverse();\n              }\n\n              const currentIdx = elements.indexOf(currentTarget);\n              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n\n        nextTick(() => {\n          focusFirst(elements);\n        });\n      }\n    });\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id));\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => unref(isCurrentTab) ? 0 : -1),\n      handleMousedown,\n      handleFocus,\n      handleKeydown\n    });\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_roving_focus_collection_item = resolveComponent(\"el-roving-focus-collection-item\");\n\n  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {\n    id: _ctx.id,\n    focusable: _ctx.focusable,\n    active: _ctx.active\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"id\", \"focusable\", \"active\"]);\n}\n\nvar ElRovingFocusItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue\"]]);\n\nexport { ElRovingFocusItem as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","ElRovingFocusCollectionItem","props","focusable","type","default","active","emits","setup","emit","currentTabbedId","loop","onItemFocus","onItemShiftTab","inject","ROVING_FOCUS_GROUP_INJECTION_KEY","getItems","id","useId","ref","composeEventHandlers","e","preventDefault","key","shiftKey","target","currentTarget","EVENT_CODE","getFocusIntent","focusIntent","items","filter","item","elements","reverse","value","reorderArray","currentIdx","slice","nextTick","focusFirst","isCurrentTab","computed","unref","provide","ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY","rovingFocusGroupItemRef","tabIndex","handleMousedown","handleFocus","handleKeydown","_createBlock","_renderSlot"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-item.vue"],"sourcesContent":["<template>\n  <el-roving-focus-collection-item\n    :id=\"id\"\n    :focusable=\"focusable\"\n    :active=\"active\"\n  >\n    <slot />\n  </el-roving-focus-collection-item>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  unref,\n} from 'vue'\nimport { useId } from '@element-plus/hooks'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  ElCollectionItem as ElRovingFocusCollectionItem,\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n} from './roving-focus-group'\nimport {\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY,\n} from './tokens'\nimport { focusFirst, getFocusIntent, reorderArray } from './utils'\n\nexport default defineComponent({\n  components: {\n    ElRovingFocusCollectionItem,\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true,\n    },\n    active: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['mousedown', 'focus', 'keydown'],\n  setup(props, { emit }) {\n    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(\n      ROVING_FOCUS_GROUP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const id = useId()\n    const rovingFocusGroupItemRef = ref<HTMLElement | null>(null)\n\n    const handleMousedown = composeEventHandlers(\n      (e: Event) => {\n        emit('mousedown', e)\n      },\n      (e) => {\n        if (!props.focusable) {\n          e.preventDefault()\n        } else {\n          onItemFocus(unref(id))\n        }\n      }\n    )\n\n    const handleFocus = composeEventHandlers(\n      (e: Event) => {\n        emit('focus', e)\n      },\n      () => {\n        onItemFocus(unref(id))\n      }\n    )\n\n    const handleKeydown = composeEventHandlers(\n      (e: Event) => {\n        emit('keydown', e)\n      },\n      (e) => {\n        const { key, shiftKey, target, currentTarget } = e as KeyboardEvent\n        if (key === EVENT_CODE.tab && shiftKey) {\n          onItemShiftTab()\n          return\n        }\n        if (target !== currentTarget) return\n        const focusIntent = getFocusIntent(e as KeyboardEvent)\n\n        if (focusIntent) {\n          e.preventDefault()\n          const items = getItems<typeof props>().filter(\n            (item) => item.focusable\n          )\n\n          let elements = items.map((item) => item.ref!)\n\n          switch (focusIntent) {\n            case 'last': {\n              elements.reverse()\n              break\n            }\n            case 'prev':\n            case 'next': {\n              if (focusIntent === 'prev') {\n                elements.reverse()\n              }\n              const currentIdx = elements.indexOf(currentTarget as HTMLElement)\n              elements = loop.value\n                ? reorderArray(elements, currentIdx + 1)\n                : elements.slice(currentIdx + 1)\n              break\n            }\n            default: {\n              break\n            }\n          }\n\n          nextTick(() => {\n            focusFirst(elements)\n          })\n        }\n      }\n    )\n\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id))\n\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => (unref(isCurrentTab) ? 0 : -1)),\n      handleMousedown,\n      handleFocus,\n      handleKeydown,\n    })\n\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}