{"ast":null,"code":"let history = [];\n\nfunction Point(x, y, type) {\n  this.x = x;\n  this.y = y;\n  this.type = type; // 左击 1  右击 3\n}\n\nfunction windowToCanvas(e, mycanvas) {\n  // 返回元素的大小以及位置\n  var rect = mycanvas.getBoundingClientRect(); // rect 的宽度会加上 canvas 的 border 会影响精度\n\n  return new Point(e.clientX - rect.left * (mycanvas.width / rect.width), e.clientY - rect.top * (mycanvas.height / rect.height), e.which);\n}\n\nfunction showLastHistory(ctx, history) {\n  ctx.putImageData(history[history.length - 1]['data'], 0, 0);\n}\n\nfunction addHistoy(history, ctx, mycanvas) {\n  history.push({\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\n  });\n}\n\nexport default {\n  name: \"Canvas\",\n\n  data() {\n    return {\n      ctx: null\n    };\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  methods: {\n    init() {\n      this.ctx = this.$refs.cont.getContext('2d');\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, 0);\n      this.ctx.lineTo(300, 100);\n      this.ctx.strokeStyle = 'red';\n      this.ctx.lineWidth = 1;\n      this.ctx.stroke();\n      this.ctx.closePath();\n    },\n\n    // 绘制矩形\n    drawerRect(ctx, left, top, w, h) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(left, top, w, h);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [left, top, w, h]\n      };\n    },\n\n    // 绘制圆\n    drawerCircle(ctx, x, y, r) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.beginPath(); // 开始路径\n\n      ctx.arc(x, y, r, 0, Math.PI * 2, true); // 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\n\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, r]\n      };\n    },\n\n    // 绘制直线\n    drawerLine(ctx, x, y, z, n) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.lineWidth = '2'; // 画笔粗细\n\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(z, n);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, z, n]\n      };\n    },\n\n    // 绘制点\n    drawerPoint(ctx, x, y) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n      this.posArray.push({\n        data: [x, y]\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["history","Point","x","y","type","windowToCanvas","e","mycanvas","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","which","showLastHistory","ctx","putImageData","length","addHistoy","push","data","getImageData","name","mounted","init","methods","$refs","cont","getContext","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","drawerRect","w","h","save","restore","drawerCircle","r","arc","Math","PI","drawerLine","z","n","fillStyle","drawerPoint","fill","posArray"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!--canvas居中：display设置为block-->\r\n    <canvas ref=\"cont\" style=\"width: 500px;height: 500px;margin: 10px auto;border: 2px solid #aaaaaa;display: block\">\r\n    </canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  var rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.clientX - rect.left * (mycanvas.width / rect.width),\r\n      e.clientY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length - 1]['data'], 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      ctx:null\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.init();\r\n  },\r\n\r\n  methods:{\r\n    init(){\r\n      this.ctx = this.$refs.cont.getContext('2d');\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0,0);\r\n      this.ctx.lineTo(300,100);\r\n      this.ctx.strokeStyle = 'red'\r\n      this.ctx.lineWidth = 1\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '2' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}