{"ast":null,"code":"import '../../../constants/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\n\nconst useMove = (props, checkedState, propsKey, emit) => {\n  const _emit = (value, type, checked) => {\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value, type, checked);\n  };\n\n  const addToLeft = () => {\n    const currentValue = props.modelValue.slice();\n    checkedState.rightChecked.forEach(item => {\n      const index = currentValue.indexOf(item);\n\n      if (index > -1) {\n        currentValue.splice(index, 1);\n      }\n    });\n\n    _emit(currentValue, \"left\", checkedState.rightChecked);\n  };\n\n  const addToRight = () => {\n    let currentValue = props.modelValue.slice();\n    const itemsToBeMoved = props.data.filter(item => {\n      const itemKey = item[propsKey.value];\n      return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);\n    }).map(item => item[propsKey.value]);\n    currentValue = props.targetOrder === \"unshift\" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);\n\n    if (props.targetOrder === \"original\") {\n      currentValue = props.data.filter(item => currentValue.includes(item[propsKey.value])).map(item => item[propsKey.value]);\n    }\n\n    _emit(currentValue, \"right\", checkedState.leftChecked);\n  };\n\n  return {\n    addToLeft,\n    addToRight\n  };\n};\n\nexport { useMove };","map":{"version":3,"mappings":";;;AACY,MAACA,OAAO,GAAG,CAACC,KAAD,EAAQC,YAAR,EAAsBC,QAAtB,EAAgCC,IAAhC,KAAyC;AAC9D,QAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,OAAd,KAA0B;AACtCJ,QAAI,CAACK,kBAAD,EAAqBH,KAArB,CAAJ;AACAF,QAAI,CAACM,YAAD,EAAeJ,KAAf,EAAsBC,IAAtB,EAA4BC,OAA5B,CAAJ;AACD,GAHD;;AAIA,QAAMG,SAAS,GAAG,MAAM;AACtB,UAAMC,YAAY,GAAGX,KAAK,CAACY,UAAN,CAAiBC,KAAjB,EAArB;AACAZ,gBAAY,CAACa,YAAb,CAA0BC,OAA1B,CAAmCC,IAAD,IAAU;AAC1C,YAAMC,KAAK,GAAGN,YAAY,CAACO,OAAb,CAAqBF,IAArB,CAAd;;AACA,UAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdN,oBAAY,CAACQ,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACD;AACF,KALD;;AAMAb,SAAK,CAACO,YAAD,EAAe,MAAf,EAAuBV,YAAY,CAACa,YAApC,CAAL;AACD,GATD;;AAUA,QAAMM,UAAU,GAAG,MAAM;AACvB,QAAIT,YAAY,GAAGX,KAAK,CAACY,UAAN,CAAiBC,KAAjB,EAAnB;AACA,UAAMQ,cAAc,GAAGrB,KAAK,CAACsB,IAAN,CAAWC,MAAX,CAAmBP,IAAD,IAAU;AACjD,YAAMQ,OAAO,GAAGR,IAAI,CAACd,QAAQ,CAACG,KAAV,CAApB;AACA,aAAOJ,YAAY,CAACwB,WAAb,CAAyBC,QAAzB,CAAkCF,OAAlC,KAA8C,CAACxB,KAAK,CAACY,UAAN,CAAiBc,QAAjB,CAA0BF,OAA1B,CAAtD;AACD,KAHsB,EAGpBG,GAHoB,CAGfX,IAAD,IAAUA,IAAI,CAACd,QAAQ,CAACG,KAAV,CAHE,CAAvB;AAIAM,gBAAY,GAAGX,KAAK,CAAC4B,WAAN,KAAsB,SAAtB,GAAkCP,cAAc,CAACQ,MAAf,CAAsBlB,YAAtB,CAAlC,GAAwEA,YAAY,CAACkB,MAAb,CAAoBR,cAApB,CAAvF;;AACA,QAAIrB,KAAK,CAAC4B,WAAN,KAAsB,UAA1B,EAAsC;AACpCjB,kBAAY,GAAGX,KAAK,CAACsB,IAAN,CAAWC,MAAX,CAAmBP,IAAD,IAAUL,YAAY,CAACe,QAAb,CAAsBV,IAAI,CAACd,QAAQ,CAACG,KAAV,CAA1B,CAA5B,EAAyEsB,GAAzE,CAA8EX,IAAD,IAAUA,IAAI,CAACd,QAAQ,CAACG,KAAV,CAA3F,CAAf;AACD;;AACDD,SAAK,CAACO,YAAD,EAAe,OAAf,EAAwBV,YAAY,CAACwB,WAArC,CAAL;AACD,GAXD;;AAYA,SAAO;AACLf,aADK;AAELU;AAFK,GAAP;AAIF,CA/BY","names":["useMove","props","checkedState","propsKey","emit","_emit","value","type","checked","UPDATE_MODEL_EVENT","CHANGE_EVENT","addToLeft","currentValue","modelValue","slice","rightChecked","forEach","item","index","indexOf","splice","addToRight","itemsToBeMoved","data","filter","itemKey","leftChecked","includes","map","targetOrder","concat"],"sources":["../../../../../../packages/components/transfer/src/useMove.ts"],"sourcesContent":["import { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\n\nimport type { ComputedRef } from 'vue'\nimport type {\n  DataItem,\n  Key,\n  TransferCheckedState,\n  TransferProps,\n} from './transfer'\n\nexport const useMove = (\n  props: TransferProps,\n  checkedState: TransferCheckedState,\n  propsKey: ComputedRef<string>,\n  emit\n) => {\n  const _emit = (value, type: 'left' | 'right', checked: Key[]) => {\n    emit(UPDATE_MODEL_EVENT, value)\n    emit(CHANGE_EVENT, value, type, checked)\n  }\n\n  const addToLeft = () => {\n    const currentValue = props.modelValue.slice()\n\n    checkedState.rightChecked.forEach((item) => {\n      const index = currentValue.indexOf(item)\n      if (index > -1) {\n        currentValue.splice(index, 1)\n      }\n    })\n    _emit(currentValue, 'left', checkedState.rightChecked)\n  }\n\n  const addToRight = () => {\n    let currentValue = props.modelValue.slice()\n\n    const itemsToBeMoved = props.data\n      .filter((item: DataItem) => {\n        const itemKey = item[propsKey.value]\n        return (\n          checkedState.leftChecked.includes(itemKey) &&\n          !props.modelValue.includes(itemKey)\n        )\n      })\n      .map((item) => item[propsKey.value])\n\n    currentValue =\n      props.targetOrder === 'unshift'\n        ? itemsToBeMoved.concat(currentValue)\n        : currentValue.concat(itemsToBeMoved)\n\n    if (props.targetOrder === 'original') {\n      currentValue = props.data\n        .filter((item) => currentValue.includes(item[propsKey.value]))\n        .map((item) => item[propsKey.value])\n    }\n\n    _emit(currentValue, 'right', checkedState.leftChecked)\n  }\n\n  return {\n    addToLeft,\n    addToRight,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}