{"ast":null,"code":"import { isFunction, capitalize } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport { isEmpty, isUndefined } from '../../../utils/types.mjs';\n\nvar ExpandTrigger = /* @__PURE__ */(ExpandTrigger2 => {\n  ExpandTrigger2[\"CLICK\"] = \"click\";\n  ExpandTrigger2[\"HOVER\"] = \"hover\";\n  return ExpandTrigger2;\n})(ExpandTrigger || {});\n\nlet uid = 0;\n\nconst calculatePathNodes = node => {\n  const nodes = [node];\n  let {\n    parent\n  } = node;\n\n  while (parent) {\n    nodes.unshift(parent);\n    parent = parent.parent;\n  }\n\n  return nodes;\n};\n\nclass Node {\n  constructor(data, config, parent, root = false) {\n    this.data = data;\n    this.config = config;\n    this.parent = parent;\n    this.root = root;\n    this.uid = uid++;\n    this.checked = false;\n    this.indeterminate = false;\n    this.loading = false;\n    const {\n      value: valueKey,\n      label: labelKey,\n      children: childrenKey\n    } = config;\n    const childrenData = data[childrenKey];\n    const pathNodes = calculatePathNodes(this);\n    this.level = root ? 0 : parent ? parent.level + 1 : 1;\n    this.value = data[valueKey];\n    this.label = data[labelKey];\n    this.pathNodes = pathNodes;\n    this.pathValues = pathNodes.map(node => node.value);\n    this.pathLabels = pathNodes.map(node => node.label);\n    this.childrenData = childrenData;\n    this.children = (childrenData || []).map(child => new Node(child, config, this));\n    this.loaded = !config.lazy || this.isLeaf || !isEmpty(childrenData);\n  }\n\n  get isDisabled() {\n    const {\n      data,\n      parent,\n      config\n    } = this;\n    const {\n      disabled,\n      checkStrictly\n    } = config;\n    const isDisabled = isFunction(disabled) ? disabled(data, this) : !!data[disabled];\n    return isDisabled || !checkStrictly && (parent == null ? void 0 : parent.isDisabled);\n  }\n\n  get isLeaf() {\n    const {\n      data,\n      config,\n      childrenData,\n      loaded\n    } = this;\n    const {\n      lazy,\n      leaf\n    } = config;\n    const isLeaf = isFunction(leaf) ? leaf(data, this) : data[leaf];\n    return isUndefined(isLeaf) ? lazy && !loaded ? false : !(Array.isArray(childrenData) && childrenData.length) : !!isLeaf;\n  }\n\n  get valueByOption() {\n    return this.config.emitPath ? this.pathValues : this.value;\n  }\n\n  appendChild(childData) {\n    const {\n      childrenData,\n      children\n    } = this;\n    const node = new Node(childData, this.config, this);\n\n    if (Array.isArray(childrenData)) {\n      childrenData.push(childData);\n    } else {\n      this.childrenData = [childData];\n    }\n\n    children.push(node);\n    return node;\n  }\n\n  calcText(allLevels, separator) {\n    const text = allLevels ? this.pathLabels.join(separator) : this.label;\n    this.text = text;\n    return text;\n  }\n\n  broadcast(event, ...args) {\n    const handlerName = `onParent${capitalize(event)}`;\n    this.children.forEach(child => {\n      if (child) {\n        child.broadcast(event, ...args);\n        child[handlerName] && child[handlerName](...args);\n      }\n    });\n  }\n\n  emit(event, ...args) {\n    const {\n      parent\n    } = this;\n    const handlerName = `onChild${capitalize(event)}`;\n\n    if (parent) {\n      parent[handlerName] && parent[handlerName](...args);\n      parent.emit(event, ...args);\n    }\n  }\n\n  onParentCheck(checked) {\n    if (!this.isDisabled) {\n      this.setCheckState(checked);\n    }\n  }\n\n  onChildCheck() {\n    const {\n      children\n    } = this;\n    const validChildren = children.filter(child => !child.isDisabled);\n    const checked = validChildren.length ? validChildren.every(child => child.checked) : false;\n    this.setCheckState(checked);\n  }\n\n  setCheckState(checked) {\n    const totalNum = this.children.length;\n    const checkedNum = this.children.reduce((c, p) => {\n      const num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;\n      return c + num;\n    }, 0);\n    this.checked = this.loaded && this.children.every(child => child.loaded && child.checked) && checked;\n    this.indeterminate = this.loaded && checkedNum !== totalNum && checkedNum > 0;\n  }\n\n  doCheck(checked) {\n    if (this.checked === checked) return;\n    const {\n      checkStrictly,\n      multiple\n    } = this.config;\n\n    if (checkStrictly || !multiple) {\n      this.checked = checked;\n    } else {\n      this.broadcast(\"check\", checked);\n      this.setCheckState(checked);\n      this.emit(\"check\");\n    }\n  }\n\n}\n\nexport { ExpandTrigger, Node as default };","map":{"version":3,"mappings":";;;;AAEU,IAACA,aAAa,kBAAmB,CAAEC,cAAD,IAAoB;AAC9DA,gBAAc,CAAC,OAAD,CAAd,GAA0B,OAA1B;AACAA,gBAAc,CAAC,OAAD,CAAd,GAA0B,OAA1B;AACA,SAAOA,cAAP;AACD,CAJ0C,EAIxCD,aAAa,IAAI,EAJuB,CAAjC;;AAKV,IAAIE,GAAG,GAAG,CAAV;;AACA,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AACnC,QAAMC,KAAK,GAAG,CAACD,IAAD,CAAd;AACA,MAAI;AAAEE;AAAF,MAAaF,IAAjB;;AACA,SAAOE,MAAP,EAAe;AACbD,SAAK,CAACE,OAAN,CAAcD,MAAd;AACAA,UAAM,GAAGA,MAAM,CAACA,MAAhB;AACD;;AACD,SAAOD,KAAP;AACD,CARD;;AASA,MAAMG,IAAN,CAAW;AACTC,aAAW,CAACC,IAAD,EAAOC,MAAP,EAAeL,MAAf,EAAuBM,IAAI,GAAG,KAA9B,EAAqC;AAC9C,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKM,IAAL,GAAYA,IAAZ;AACA,SAAKV,GAAL,GAAWA,GAAG,EAAd;AACA,SAAKW,OAAL,GAAe,KAAf;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,UAAM;AAAEC,WAAK,EAAEC,QAAT;AAAmBC,WAAK,EAAEC,QAA1B;AAAoCC,cAAQ,EAAEC;AAA9C,QAA8DV,MAApE;AACA,UAAMW,YAAY,GAAGZ,IAAI,CAACW,WAAD,CAAzB;AACA,UAAME,SAAS,GAAGpB,kBAAkB,CAAC,IAAD,CAApC;AACA,SAAKqB,KAAL,GAAaZ,IAAI,GAAG,CAAH,GAAON,MAAM,GAAGA,MAAM,CAACkB,KAAP,GAAe,CAAlB,GAAsB,CAApD;AACA,SAAKR,KAAL,GAAaN,IAAI,CAACO,QAAD,CAAjB;AACA,SAAKC,KAAL,GAAaR,IAAI,CAACS,QAAD,CAAjB;AACA,SAAKI,SAAL,GAAiBA,SAAjB;AACA,SAAKE,UAAL,GAAkBF,SAAS,CAACG,GAAV,CAAetB,IAAD,IAAUA,IAAI,CAACY,KAA7B,CAAlB;AACA,SAAKW,UAAL,GAAkBJ,SAAS,CAACG,GAAV,CAAetB,IAAD,IAAUA,IAAI,CAACc,KAA7B,CAAlB;AACA,SAAKI,YAAL,GAAoBA,YAApB;AACA,SAAKF,QAAL,GAAgB,CAACE,YAAY,IAAI,EAAjB,EAAqBI,GAArB,CAA0BE,KAAD,IAAW,IAAIpB,IAAJ,CAASoB,KAAT,EAAgBjB,MAAhB,EAAwB,IAAxB,CAApC,CAAhB;AACA,SAAKkB,MAAL,GAAc,CAAClB,MAAM,CAACmB,IAAR,IAAgB,KAAKC,MAArB,IAA+B,CAACC,OAAO,CAACV,YAAD,CAArD;AACD;;AACa,MAAVW,UAAU,GAAG;AACf,UAAM;AAAEvB,UAAF;AAAQJ,YAAR;AAAgBK;AAAhB,QAA2B,IAAjC;AACA,UAAM;AAAEuB,cAAF;AAAYC;AAAZ,QAA8BxB,MAApC;AACA,UAAMsB,UAAU,GAAGG,UAAU,CAACF,QAAD,CAAV,GAAuBA,QAAQ,CAACxB,IAAD,EAAO,IAAP,CAA/B,GAA8C,CAAC,CAACA,IAAI,CAACwB,QAAD,CAAvE;AACA,WAAOD,UAAU,IAAI,CAACE,aAAD,KAAmB7B,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAAC2B,UAApD,CAArB;AACD;;AACS,MAANF,MAAM,GAAG;AACX,UAAM;AAAErB,UAAF;AAAQC,YAAR;AAAgBW,kBAAhB;AAA8BO;AAA9B,QAAyC,IAA/C;AACA,UAAM;AAAEC,UAAF;AAAQO;AAAR,QAAiB1B,MAAvB;AACA,UAAMoB,MAAM,GAAGK,UAAU,CAACC,IAAD,CAAV,GAAmBA,IAAI,CAAC3B,IAAD,EAAO,IAAP,CAAvB,GAAsCA,IAAI,CAAC2B,IAAD,CAAzD;AACA,WAAOC,WAAW,CAACP,MAAD,CAAX,GAAsBD,IAAI,IAAI,CAACD,MAAT,GAAkB,KAAlB,GAA0B,EAAEU,KAAK,CAACC,OAAN,CAAclB,YAAd,KAA+BA,YAAY,CAACmB,MAA9C,CAAhD,GAAwG,CAAC,CAACV,MAAjH;AACD;;AACgB,MAAbW,aAAa,GAAG;AAClB,WAAO,KAAK/B,MAAL,CAAYgC,QAAZ,GAAuB,KAAKlB,UAA5B,GAAyC,KAAKT,KAArD;AACD;;AACD4B,aAAW,CAACC,SAAD,EAAY;AACrB,UAAM;AAAEvB,kBAAF;AAAgBF;AAAhB,QAA6B,IAAnC;AACA,UAAMhB,IAAI,GAAG,IAAII,IAAJ,CAASqC,SAAT,EAAoB,KAAKlC,MAAzB,EAAiC,IAAjC,CAAb;;AACA,QAAI4B,KAAK,CAACC,OAAN,CAAclB,YAAd,CAAJ,EAAiC;AAC/BA,kBAAY,CAACwB,IAAb,CAAkBD,SAAlB;AACD,KAFD,MAEO;AACL,WAAKvB,YAAL,GAAoB,CAACuB,SAAD,CAApB;AACD;;AACDzB,YAAQ,CAAC0B,IAAT,CAAc1C,IAAd;AACA,WAAOA,IAAP;AACD;;AACD2C,UAAQ,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC7B,UAAMC,IAAI,GAAGF,SAAS,GAAG,KAAKrB,UAAL,CAAgBwB,IAAhB,CAAqBF,SAArB,CAAH,GAAqC,KAAK/B,KAAhE;AACA,SAAKgC,IAAL,GAAYA,IAAZ;AACA,WAAOA,IAAP;AACD;;AACDE,WAAS,CAACC,KAAD,EAAQ,GAAGC,IAAX,EAAiB;AACxB,UAAMC,WAAW,GAAI,WAAUC,UAAU,CAACH,KAAD,CAAQ,EAAjD;AACA,SAAKjC,QAAL,CAAcqC,OAAd,CAAuB7B,KAAD,IAAW;AAC/B,UAAIA,KAAJ,EAAW;AACTA,aAAK,CAACwB,SAAN,CAAgBC,KAAhB,EAAuB,GAAGC,IAA1B;AACA1B,aAAK,CAAC2B,WAAD,CAAL,IAAsB3B,KAAK,CAAC2B,WAAD,CAAL,CAAmB,GAAGD,IAAtB,CAAtB;AACD;AACF,KALD;AAMD;;AACDI,MAAI,CAACL,KAAD,EAAQ,GAAGC,IAAX,EAAiB;AACnB,UAAM;AAAEhD;AAAF,QAAa,IAAnB;AACA,UAAMiD,WAAW,GAAI,UAASC,UAAU,CAACH,KAAD,CAAQ,EAAhD;;AACA,QAAI/C,MAAJ,EAAY;AACVA,YAAM,CAACiD,WAAD,CAAN,IAAuBjD,MAAM,CAACiD,WAAD,CAAN,CAAoB,GAAGD,IAAvB,CAAvB;AACAhD,YAAM,CAACoD,IAAP,CAAYL,KAAZ,EAAmB,GAAGC,IAAtB;AACD;AACF;;AACDK,eAAa,CAAC9C,OAAD,EAAU;AACrB,QAAI,CAAC,KAAKoB,UAAV,EAAsB;AACpB,WAAK2B,aAAL,CAAmB/C,OAAnB;AACD;AACF;;AACDgD,cAAY,GAAG;AACb,UAAM;AAAEzC;AAAF,QAAe,IAArB;AACA,UAAM0C,aAAa,GAAG1C,QAAQ,CAAC2C,MAAT,CAAiBnC,KAAD,IAAW,CAACA,KAAK,CAACK,UAAlC,CAAtB;AACA,UAAMpB,OAAO,GAAGiD,aAAa,CAACrB,MAAd,GAAuBqB,aAAa,CAACE,KAAd,CAAqBpC,KAAD,IAAWA,KAAK,CAACf,OAArC,CAAvB,GAAuE,KAAvF;AACA,SAAK+C,aAAL,CAAmB/C,OAAnB;AACD;;AACD+C,eAAa,CAAC/C,OAAD,EAAU;AACrB,UAAMoD,QAAQ,GAAG,KAAK7C,QAAL,CAAcqB,MAA/B;AACA,UAAMyB,UAAU,GAAG,KAAK9C,QAAL,CAAc+C,MAAd,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChD,YAAMC,GAAG,GAAGD,CAAC,CAACxD,OAAF,GAAY,CAAZ,GAAgBwD,CAAC,CAACvD,aAAF,GAAkB,GAAlB,GAAwB,CAApD;AACA,aAAOsD,CAAC,GAAGE,GAAX;AACD,KAHkB,EAGhB,CAHgB,CAAnB;AAIA,SAAKzD,OAAL,GAAe,KAAKgB,MAAL,IAAe,KAAKT,QAAL,CAAc4C,KAAd,CAAqBpC,KAAD,IAAWA,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACf,OAArD,CAAf,IAAgFA,OAA/F;AACA,SAAKC,aAAL,GAAqB,KAAKe,MAAL,IAAeqC,UAAU,KAAKD,QAA9B,IAA0CC,UAAU,GAAG,CAA5E;AACD;;AACDK,SAAO,CAAC1D,OAAD,EAAU;AACf,QAAI,KAAKA,OAAL,KAAiBA,OAArB,EACE;AACF,UAAM;AAAEsB,mBAAF;AAAiBqC;AAAjB,QAA8B,KAAK7D,MAAzC;;AACA,QAAIwB,aAAa,IAAI,CAACqC,QAAtB,EAAgC;AAC9B,WAAK3D,OAAL,GAAeA,OAAf;AACD,KAFD,MAEO;AACL,WAAKuC,SAAL,CAAe,OAAf,EAAwBvC,OAAxB;AACA,WAAK+C,aAAL,CAAmB/C,OAAnB;AACA,WAAK6C,IAAL,CAAU,OAAV;AACD;AACF;;AAtGQ","names":["ExpandTrigger","ExpandTrigger2","uid","calculatePathNodes","node","nodes","parent","unshift","Node","constructor","data","config","root","checked","indeterminate","loading","value","valueKey","label","labelKey","children","childrenKey","childrenData","pathNodes","level","pathValues","map","pathLabels","child","loaded","lazy","isLeaf","isEmpty","isDisabled","disabled","checkStrictly","isFunction","leaf","isUndefined","Array","isArray","length","valueByOption","emitPath","appendChild","childData","push","calcText","allLevels","separator","text","join","broadcast","event","args","handlerName","capitalize","forEach","emit","onParentCheck","setCheckState","onChildCheck","validChildren","filter","every","totalNum","checkedNum","reduce","c","p","num","doCheck","multiple"],"sources":["../../../../../../packages/components/cascader-panel/src/node.ts"],"sourcesContent":["import { isFunction } from '@vue/shared'\nimport { capitalize, isEmpty, isUndefined } from '@element-plus/utils'\nimport type { VNode } from 'vue'\n\nexport type CascaderNodeValue = string | number\nexport type CascaderNodePathValue = CascaderNodeValue[]\nexport type CascaderValue =\n  | CascaderNodeValue\n  | CascaderNodePathValue\n  | (CascaderNodeValue | CascaderNodePathValue)[]\nexport type CascaderConfig = Required<CascaderProps>\nexport enum ExpandTrigger {\n  CLICK = 'click',\n  HOVER = 'hover',\n}\nexport type isDisabled = (data: CascaderOption, node: Node) => boolean\nexport type isLeaf = (data: CascaderOption, node: Node) => boolean\nexport type Resolve = (dataList?: CascaderOption[]) => void\nexport type LazyLoad = (node: Node, resolve: Resolve) => void\nexport type RenderLabel = ({\n  node: Node,\n  data: CascaderOption,\n}) => VNode | VNode[]\nexport interface CascaderOption extends Record<string, unknown> {\n  label?: string\n  value?: CascaderNodeValue\n  children?: CascaderOption[]\n  disabled?: boolean\n  leaf?: boolean\n}\n\nexport interface CascaderProps {\n  expandTrigger?: ExpandTrigger\n  multiple?: boolean\n  checkStrictly?: boolean\n  emitPath?: boolean\n  lazy?: boolean\n  lazyLoad?: LazyLoad\n  value?: string\n  label?: string\n  children?: string\n  disabled?: string | isDisabled\n  leaf?: string | isLeaf\n  hoverThreshold?: number\n}\n\nexport type Nullable<T> = null | T\n\ntype ChildrenData = CascaderOption[] | undefined\n\nlet uid = 0\n\nconst calculatePathNodes = (node: Node) => {\n  const nodes = [node]\n  let { parent } = node\n\n  while (parent) {\n    nodes.unshift(parent)\n    parent = parent.parent\n  }\n\n  return nodes\n}\n\nclass Node {\n  readonly uid: number = uid++\n  readonly level: number\n  readonly value: CascaderNodeValue\n  readonly label: string\n  readonly pathNodes: Node[]\n  readonly pathValues: CascaderNodePathValue\n  readonly pathLabels: string[]\n\n  childrenData: ChildrenData\n  children: Node[]\n  text: string\n  loaded: boolean\n  checked = false\n  indeterminate = false\n  loading = false\n\n  constructor(\n    readonly data: Nullable<CascaderOption>,\n    readonly config: CascaderConfig,\n    readonly parent?: Node,\n    readonly root = false\n  ) {\n    const { value: valueKey, label: labelKey, children: childrenKey } = config\n\n    const childrenData = data[childrenKey] as ChildrenData\n    const pathNodes = calculatePathNodes(this)\n\n    this.level = root ? 0 : parent ? parent.level + 1 : 1\n    this.value = data[valueKey] as CascaderNodeValue\n    this.label = data[labelKey] as string\n    this.pathNodes = pathNodes\n    this.pathValues = pathNodes.map((node) => node.value)\n    this.pathLabels = pathNodes.map((node) => node.label)\n    this.childrenData = childrenData\n    this.children = (childrenData || []).map(\n      (child) => new Node(child, config, this)\n    )\n    this.loaded = !config.lazy || this.isLeaf || !isEmpty(childrenData)\n  }\n\n  get isDisabled(): boolean {\n    const { data, parent, config } = this\n    const { disabled, checkStrictly } = config\n    const isDisabled = isFunction(disabled)\n      ? disabled(data, this)\n      : !!data[disabled]\n    return isDisabled || (!checkStrictly && parent?.isDisabled)\n  }\n\n  get isLeaf(): boolean {\n    const { data, config, childrenData, loaded } = this\n    const { lazy, leaf } = config\n    const isLeaf = isFunction(leaf) ? leaf(data, this) : data[leaf]\n\n    return isUndefined(isLeaf)\n      ? lazy && !loaded\n        ? false\n        : !(Array.isArray(childrenData) && childrenData.length)\n      : !!isLeaf\n  }\n\n  get valueByOption() {\n    return this.config.emitPath ? this.pathValues : this.value\n  }\n\n  appendChild(childData: CascaderOption) {\n    const { childrenData, children } = this\n    const node = new Node(childData, this.config, this)\n\n    if (Array.isArray(childrenData)) {\n      childrenData.push(childData)\n    } else {\n      this.childrenData = [childData]\n    }\n\n    children.push(node)\n\n    return node\n  }\n\n  calcText(allLevels: boolean, separator: string) {\n    const text = allLevels ? this.pathLabels.join(separator) : this.label\n    this.text = text\n    return text\n  }\n\n  broadcast(event: string, ...args: unknown[]) {\n    const handlerName = `onParent${capitalize(event)}`\n    this.children.forEach((child) => {\n      if (child) {\n        // bottom up\n        child.broadcast(event, ...args)\n        child[handlerName] && child[handlerName](...args)\n      }\n    })\n  }\n\n  emit(event: string, ...args: unknown[]) {\n    const { parent } = this\n    const handlerName = `onChild${capitalize(event)}`\n    if (parent) {\n      parent[handlerName] && parent[handlerName](...args)\n      parent.emit(event, ...args)\n    }\n  }\n\n  onParentCheck(checked: boolean) {\n    if (!this.isDisabled) {\n      this.setCheckState(checked)\n    }\n  }\n\n  onChildCheck() {\n    const { children } = this\n    const validChildren = children.filter((child) => !child.isDisabled)\n    const checked = validChildren.length\n      ? validChildren.every((child) => child.checked)\n      : false\n\n    this.setCheckState(checked)\n  }\n\n  setCheckState(checked: boolean) {\n    const totalNum = this.children.length\n    const checkedNum = this.children.reduce((c, p) => {\n      const num = p.checked ? 1 : p.indeterminate ? 0.5 : 0\n      return c + num\n    }, 0)\n\n    this.checked =\n      this.loaded &&\n      this.children.every((child) => child.loaded && child.checked) &&\n      checked\n    this.indeterminate =\n      this.loaded && checkedNum !== totalNum && checkedNum > 0\n  }\n\n  doCheck(checked: boolean) {\n    if (this.checked === checked) return\n\n    const { checkStrictly, multiple } = this.config\n\n    if (checkStrictly || !multiple) {\n      this.checked = checked\n    } else {\n      // bottom up to unify the calculation of the indeterminate state\n      this.broadcast('check', checked)\n      this.setCheckState(checked)\n      this.emit('check')\n    }\n  }\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}