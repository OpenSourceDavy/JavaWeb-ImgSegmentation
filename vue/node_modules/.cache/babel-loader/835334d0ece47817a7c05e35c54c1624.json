{"ast":null,"code":"import { getCurrentInstance, computed } from 'vue';\n\nconst useProp = name => {\n  const vm = getCurrentInstance();\n  return computed(() => {\n    var _a, _b;\n\n    return (_b = (_a = vm.proxy) == null ? void 0 : _a.$props[name]) != null ? _b : void 0;\n  });\n};\n\nexport { useProp };","map":{"version":3,"mappings":";;AACY,MAACA,OAAO,GAAIC,IAAD,IAAU;AAC/B,QAAMC,EAAE,GAAGC,kBAAkB,EAA7B;AACA,SAAOC,QAAQ,CAAC,MAAM;AACpB,QAAIC,EAAJ,EAAQC,EAAR;;AACA,WAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAGH,EAAE,CAACK,KAAT,KAAmB,IAAnB,GAA0B,KAAK,CAA/B,GAAmCF,EAAE,CAACG,MAAH,CAAUP,IAAV,CAAzC,KAA6D,IAA7D,GAAoEK,EAApE,GAAyE,KAAK,CAArF;AACD,GAHc,CAAf;AAIF,CANY","names":["useProp","name","vm","getCurrentInstance","computed","_a","_b","proxy","$props"],"sources":["../../../../../packages/hooks/use-prop/index.ts"],"sourcesContent":["import { computed, getCurrentInstance } from 'vue'\nimport type { ComputedRef } from 'vue'\n\nexport const useProp = <T>(name: string): ComputedRef<T | undefined> => {\n  const vm = getCurrentInstance()!\n  return computed(() => vm.proxy?.$props[name] ?? undefined)\n}\n"]},"metadata":{},"sourceType":"module"}