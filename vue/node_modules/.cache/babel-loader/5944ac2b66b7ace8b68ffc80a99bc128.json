{"ast":null,"code":"import { defineComponent, inject, ref, nextTick, onMounted, onBeforeUnmount, onUpdated, watch, computed, createVNode, Fragment } from 'vue';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst COMPONENT_NAME = \"ElLabelWrap\";\nvar FormLabelWrap = defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n\n  setup(props, {\n    slots\n  }) {\n    const formContext = inject(formContextKey);\n    const formItemContext = inject(formItemContextKey);\n    if (!formContext || !formItemContext) throwError(COMPONENT_NAME, \"usage: <el-form><el-form-item><label-wrap /></el-form-item></el-form>\");\n    const ns = useNamespace(\"form\");\n    const el = ref();\n    const computedWidth = ref(0);\n\n    const getLabelWidth = () => {\n      var _a;\n\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(Number.parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n\n    const updateLabelWidth = (action = \"update\") => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            formContext.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n\n    const updateLabelWidthFn = () => updateLabelWidth(\"update\");\n\n    onMounted(() => {\n      updateLabelWidthFn();\n    });\n    onBeforeUnmount(() => {\n      updateLabelWidth(\"remove\");\n    });\n    onUpdated(() => updateLabelWidthFn());\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext.registerLabelWidth(val, oldVal);\n      }\n    });\n    useResizeObserver(computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = el.value) == null ? void 0 : _a.firstElementChild) != null ? _b : null;\n    }), updateLabelWidthFn);\n    return () => {\n      var _a, _b;\n\n      if (!slots) return null;\n      const {\n        isAutoWidth\n      } = props;\n\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext.autoLabelWidth;\n        const style = {};\n\n        if (autoLabelWidth && autoLabelWidth !== \"auto\") {\n          const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);\n          const marginPosition = formContext.labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`;\n          }\n        }\n\n        return createVNode(\"div\", {\n          \"ref\": el,\n          \"class\": [ns.be(\"item\", \"label-wrap\")],\n          \"style\": style\n        }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);\n      } else {\n        return createVNode(Fragment, {\n          \"ref\": el\n        }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);\n      }\n    };\n  }\n\n});\nexport { FormLabelWrap as default };","map":{"version":3,"mappings":";;;;;;;;AAmBA,MAAMA,cAAc,GAAG,aAAvB;AACA,oBAAeC,eAAe,CAAC;AAC7BC,MAAI,EAAEF,cADuB;AAE7BG,OAAK,EAAE;AACLC,eAAW,EAAEC,OADR;AAELC,aAAS,EAAED;AAFN,GAFsB;;;AAO7BE;KAAeC;AAAS;AACtB,UAAMC,eAAoB,6BAA1B;AACA,wBAAqB,gBAArB,EACIC,2BAAiBC,uEAAjB;AAMJ,UAAMC,EAAE,GAAGC,YAAY,CAAC,MAAD,CAAvB;AAEMC,YAAE,GAAGC,GAAG,EAARD;AACN,UAAME,aAAa,GAAGD,GAAG,CAAC,CAAD,CAAzB;;;AAEME;;AACJ,UAAIH,CAAEI,EAACC,GAAHL,yBAA6B,CAA7BA,GAA6BI,oBAAjC,EAAiC;AAC/B,cAAME,KAAK,GAAGC,MAAM,CAACC,gBAAPD,CAAwBP,EAAE,CAACK,KAAHL,CAASS,iBAAjCF,EAAoDD,KAAlE;AACOI,mBAAI,CAACC,IAALD,CAAUE,MAAM,CAACC,UAAPD,CAAkBN,KAAlBM,CAAVF;AAFT,aAGO;AACL,eAAO,CAAP;AACD;AANH;;;AASAI;AACEA,iBAAe,QAAfA,IAAezB,iBAAfyB,EAAe;AACb,oBAAUC,KAAN,QAAJ,EAA2BzB;AACrB0B,yBAAW,MAAXA,GAAqBb,eAArBa;AACFd,WAFJ,MAEiB,UAAb,aAAa,EAAb;AACKP,uBAAU,qBAAV,CAAyBO,mBAAzB;AACLP;AACD;AACF,OARL;AASG;;AATH;;;AAWAsB;;AAEAC,mBAAgB;AACdD,sBAAkB,UAAlBA;AADO,KAAO,CAAhBC;AAGAC,oBAAgBF,kBAAM,EAAtBE;AACEC,yBAAiB,MAADC,MAAC,KAAjB;AADF;AAGS1B,mBAAOsB,mBAAP,CAAyBK,GAAzB,EAATD,MAAS;AAETE;AACMlC,KALJ+B;AAMEzB,qBAAY6B;AACb;;AAHH;AAMiB,KAJDA,GAICP,kBAJDO,CAAZ7B;AAWJ,WAAO,MAAM;AACX,UAAIS,EAAJ,EAAKV,EAAL;;AAEM,kBAAEJ;AAAF,YAAN;;AAAA,UACIA,KADE;;AAEJ,uBAAoB;AACdmC,4BAAN,6BAAMA;;;AACN,YAAIC,cAAc,IAAIA,cAAc,KAAK,MAAzC,EAAiD;AAC/C,gBAAMC,WAAW,GAAGjB,IAAI,CAACkB,GAALlB,CAClB,CADkBA,EAElBE,MAAM,CAACiB,QAAPjB,CAAgBc,cAAhBd,EAAgC,EAAhCA,IAAsCV,aAAa,CAACG,KAFlCK,CAApB;AAIMoB,8BAAc,GAClBnC,WAAW,CAACoC,aAAZpC,KAA8B,MAA9BA,GAAuC,aAAvCA,GAAuD,YADnDmC;;;AAENL,oCAAiB,kBAAjB;AACEA;AACD;;AACF;mBAAA;AACD,gDADC;AACD;AADC,WAEsB,YAAIO,QAAJ,KAAC,IAAD,GAAC,KADxB,CACuB,GADvB5B,cACuB,CAFtB;AAE4DqB,OAd7D,MAc6DA;AACxD/B,0BAFL;AAKK;AALL,WAMA,wDANA,CAEKA;AAIiBM;AAAKN,KAxB/B;AAyBG;;AAzFwB,CAAD,CAA9B","names":["COMPONENT_NAME","defineComponent","name","props","isAutoWidth","Boolean","updateAll","setup","slots","formContext","throwError","formItemContext","ns","useNamespace","el","ref","computedWidth","getLabelWidth","_a","value","width","window","getComputedStyle","firstElementChild","Math","ceil","Number","parseFloat","nextTick","default","action","updateLabelWidthFn","onMounted","onBeforeUnmount","updateLabelWidth","oldVal","val","watch","registerLabelWidth","style","autoLabelWidth","marginWidth","max","parseInt","marginPosition","labelPosition","be"],"sources":["../../../../../../packages/components/form/src/form-label-wrap.tsx"],"sourcesContent":["import {\n  Fragment,\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { throwError } from '@element-plus/utils'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElLabelWrap'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean,\n  },\n\n  setup(props, { slots }) {\n    const formContext = inject(formContextKey)\n    const formItemContext = inject(formItemContextKey)\n    if (!formContext || !formItemContext)\n      throwError(\n        COMPONENT_NAME,\n        'usage: <el-form><el-form-item><label-wrap /></el-form-item></el-form>'\n      )\n\n    const ns = useNamespace('form')\n\n    const el = ref<HTMLElement>()\n    const computedWidth = ref(0)\n\n    const getLabelWidth = () => {\n      if (el.value?.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width\n        return Math.ceil(Number.parseFloat(width))\n      } else {\n        return 0\n      }\n    }\n\n    const updateLabelWidth = (action: 'update' | 'remove' = 'update') => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === 'update') {\n            computedWidth.value = getLabelWidth()\n          } else if (action === 'remove') {\n            formContext.deregisterLabelWidth(computedWidth.value)\n          }\n        }\n      })\n    }\n    const updateLabelWidthFn = () => updateLabelWidth('update')\n\n    onMounted(() => {\n      updateLabelWidthFn()\n    })\n    onBeforeUnmount(() => {\n      updateLabelWidth('remove')\n    })\n    onUpdated(() => updateLabelWidthFn())\n\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext.registerLabelWidth(val, oldVal)\n      }\n    })\n\n    useResizeObserver(\n      computed(\n        () => (el.value?.firstElementChild ?? null) as HTMLElement | null\n      ),\n      updateLabelWidthFn\n    )\n\n    return () => {\n      if (!slots) return null\n\n      const { isAutoWidth } = props\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext.autoLabelWidth\n        const style: CSSProperties = {}\n        if (autoLabelWidth && autoLabelWidth !== 'auto') {\n          const marginWidth = Math.max(\n            0,\n            Number.parseInt(autoLabelWidth, 10) - computedWidth.value\n          )\n          const marginPosition =\n            formContext.labelPosition === 'left' ? 'marginRight' : 'marginLeft'\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`\n          }\n        }\n        return (\n          <div ref={el} class={[ns.be('item', 'label-wrap')]} style={style}>\n            {slots.default?.()}\n          </div>\n        )\n      } else {\n        return <Fragment ref={el}>{slots.default?.()}</Fragment>\n      }\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}