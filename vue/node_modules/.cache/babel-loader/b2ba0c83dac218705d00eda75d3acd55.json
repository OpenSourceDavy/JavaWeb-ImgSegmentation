{"ast":null,"code":"import { ref, computed } from 'vue';\nimport '../../../utils/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { castArray } from 'lodash-unified';\nconst SCOPE = \"ElForm\";\n\nfunction useFormLabelWidth() {\n  const potentialLabelWidthArr = ref([]);\n  const autoLabelWidth = computed(() => {\n    if (!potentialLabelWidthArr.value.length) return \"0\";\n    const max = Math.max(...potentialLabelWidthArr.value);\n    return max ? `${max}px` : \"\";\n  });\n\n  function getLabelWidthIndex(width) {\n    const index = potentialLabelWidthArr.value.indexOf(width);\n\n    if (index === -1) {\n      debugWarn(SCOPE, `unexpected width ${width}`);\n    }\n\n    return index;\n  }\n\n  function registerLabelWidth(val, oldVal) {\n    if (val && oldVal) {\n      const index = getLabelWidthIndex(oldVal);\n      potentialLabelWidthArr.value.splice(index, 1, val);\n    } else if (val) {\n      potentialLabelWidthArr.value.push(val);\n    }\n  }\n\n  function deregisterLabelWidth(val) {\n    const index = getLabelWidthIndex(val);\n\n    if (index > -1) {\n      potentialLabelWidthArr.value.splice(index, 1);\n    }\n  }\n\n  return {\n    autoLabelWidth,\n    registerLabelWidth,\n    deregisterLabelWidth\n  };\n}\n\nconst filterFields = (fields, props) => {\n  const normalized = castArray(props);\n  return normalized.length > 0 ? fields.filter(field => field.prop && normalized.includes(field.prop)) : fields;\n};\n\nexport { filterFields, useFormLabelWidth };","map":{"version":3,"mappings":";;;;AAEA,MAAMA,KAAK,GAAG,QAAd;;AACO,SAASC,iBAAT,GAA6B;AAClC,QAAMC,sBAAsB,GAAGC,GAAG,CAAC,EAAD,CAAlC;AACA,QAAMC,cAAc,GAAGC,QAAQ,CAAC,MAAM;AACpC,QAAI,CAACH,sBAAsB,CAACI,KAAvB,CAA6BC,MAAlC,EACE,OAAO,GAAP;AACF,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGN,sBAAsB,CAACI,KAAnC,CAAZ;AACA,WAAOE,GAAG,GAAI,GAAEA,GAAI,IAAV,GAAgB,EAA1B;AACD,GAL8B,CAA/B;;AAMA,WAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,UAAMC,KAAK,GAAGV,sBAAsB,CAACI,KAAvB,CAA6BO,OAA7B,CAAqCF,KAArC,CAAd;;AACA,QAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBE,eAAS,CAACd,KAAD,EAAS,oBAAmBW,KAAM,EAAlC,CAAT;AACD;;AACD,WAAOC,KAAP;AACD;;AACD,WAASG,kBAAT,CAA4BC,GAA5B,EAAiCC,MAAjC,EAAyC;AACvC,QAAID,GAAG,IAAIC,MAAX,EAAmB;AACjB,YAAML,KAAK,GAAGF,kBAAkB,CAACO,MAAD,CAAhC;AACAf,4BAAsB,CAACI,KAAvB,CAA6BY,MAA7B,CAAoCN,KAApC,EAA2C,CAA3C,EAA8CI,GAA9C;AACD,KAHD,MAGO,IAAIA,GAAJ,EAAS;AACdd,4BAAsB,CAACI,KAAvB,CAA6Ba,IAA7B,CAAkCH,GAAlC;AACD;AACF;;AACD,WAASI,oBAAT,CAA8BJ,GAA9B,EAAmC;AACjC,UAAMJ,KAAK,GAAGF,kBAAkB,CAACM,GAAD,CAAhC;;AACA,QAAIJ,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdV,4BAAsB,CAACI,KAAvB,CAA6BY,MAA7B,CAAoCN,KAApC,EAA2C,CAA3C;AACD;AACF;;AACD,SAAO;AACLR,kBADK;AAELW,sBAFK;AAGLK;AAHK,GAAP;AAKD;;AACW,MAACC,YAAY,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC7C,QAAMC,UAAU,GAAGC,SAAW,CAACF,KAAD,CAA9B;AACA,SAAOC,UAAU,CAACjB,MAAX,GAAoB,CAApB,GAAwBe,MAAM,CAACI,MAAP,CAAeC,KAAD,IAAWA,KAAK,CAACC,IAAN,IAAcJ,UAAU,CAACK,QAAX,CAAoBF,KAAK,CAACC,IAA1B,CAAvC,CAAxB,GAAkGN,MAAzG;AACF,CAHY","names":["SCOPE","useFormLabelWidth","potentialLabelWidthArr","ref","autoLabelWidth","computed","value","length","max","Math","getLabelWidthIndex","width","index","indexOf","debugWarn","registerLabelWidth","val","oldVal","splice","push","deregisterLabelWidth","filterFields","fields","props","normalized","ensureArray","filter","field","prop","includes"],"sources":["../../../../../../packages/components/form/src/utils.ts"],"sourcesContent":["import { computed, ref } from 'vue'\nimport { debugWarn, ensureArray } from '@element-plus/utils'\nimport type { Arrayable } from '@element-plus/utils'\nimport type { FormItemContext } from '@element-plus/tokens'\nimport type { FormItemProp } from './form-item'\n\nconst SCOPE = 'ElForm'\n\nexport function useFormLabelWidth() {\n  const potentialLabelWidthArr = ref<number[]>([])\n\n  const autoLabelWidth = computed(() => {\n    if (!potentialLabelWidthArr.value.length) return '0'\n    const max = Math.max(...potentialLabelWidthArr.value)\n    return max ? `${max}px` : ''\n  })\n\n  function getLabelWidthIndex(width: number) {\n    const index = potentialLabelWidthArr.value.indexOf(width)\n    if (index === -1) {\n      debugWarn(SCOPE, `unexpected width ${width}`)\n    }\n    return index\n  }\n\n  function registerLabelWidth(val: number, oldVal: number) {\n    if (val && oldVal) {\n      const index = getLabelWidthIndex(oldVal)\n      potentialLabelWidthArr.value.splice(index, 1, val)\n    } else if (val) {\n      potentialLabelWidthArr.value.push(val)\n    }\n  }\n\n  function deregisterLabelWidth(val: number) {\n    const index = getLabelWidthIndex(val)\n    if (index > -1) {\n      potentialLabelWidthArr.value.splice(index, 1)\n    }\n  }\n\n  return {\n    autoLabelWidth,\n    registerLabelWidth,\n    deregisterLabelWidth,\n  }\n}\n\nexport const filterFields = (\n  fields: FormItemContext[],\n  props: Arrayable<FormItemProp>\n) => {\n  const normalized = ensureArray(props)\n  return normalized.length > 0\n    ? fields.filter((field) => field.prop && normalized.includes(field.prop))\n    : fields\n}\n"]},"metadata":{},"sourceType":"module"}