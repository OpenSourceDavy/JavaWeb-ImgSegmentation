{"ast":null,"code":"import { defineComponent, useAttrs as useAttrs$1, ref, computed, nextTick, onMounted, openBlock, createBlock, unref, isRef, withCtx, createElementVNode, normalizeClass, normalizeStyle, createVNode, createElementBlock, Fragment, renderList, renderSlot, createTextVNode, toDisplayString, mergeProps, withKeys, withModifiers, createSlots } from 'vue';\nimport { isArray, isPromise } from '@vue/shared';\nimport { debounce } from 'lodash-unified';\nimport { onClickOutside } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { autocompleteProps, autocompleteEmits } from './autocomplete.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useDeprecateAppendToBody } from '../../popper/src/deprecation.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nconst _hoisted_1 = [\"aria-expanded\", \"aria-owns\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"id\", \"aria-selected\", \"onClick\"];\nconst __default__ = {\n  name: \"ElAutocomplete\",\n  inheritAttrs: false\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: autocompleteProps,\n  emits: autocompleteEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElAutocomplete\";\n    const ns = useNamespace(\"autocomplete\");\n    const {\n      compatTeleported\n    } = useDeprecateAppendToBody(COMPONENT_NAME, \"popperAppendToBody\");\n    let isClear = false;\n    const attrs = useAttrs();\n    const compAttrs = useAttrs$1();\n    const suggestions = ref([]);\n    const highlightedIndex = ref(-1);\n    const dropdownWidth = ref(\"\");\n    const activated = ref(false);\n    const suggestionDisabled = ref(false);\n    const loading = ref(false);\n    const inputRef = ref();\n    const regionRef = ref();\n    const popperRef = ref();\n    const listboxRef = ref();\n    const id = computed(() => {\n      return ns.b(String(generateId()));\n    });\n    const styles = computed(() => compAttrs.style);\n    const suggestionVisible = computed(() => {\n      const isValidData = isArray(suggestions.value) && suggestions.value.length > 0;\n      return (isValidData || loading.value) && activated.value;\n    });\n    const suggestionLoading = computed(() => {\n      return !props.hideLoading && loading.value;\n    });\n\n    const onSuggestionShow = () => {\n      nextTick(() => {\n        if (suggestionVisible.value) {\n          dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`;\n        }\n      });\n    };\n\n    const getData = queryString => {\n      if (suggestionDisabled.value) {\n        return;\n      }\n\n      loading.value = true;\n\n      const cb = suggestionsArg => {\n        loading.value = false;\n\n        if (suggestionDisabled.value) {\n          return;\n        }\n\n        if (isArray(suggestionsArg)) {\n          suggestions.value = suggestionsArg;\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1;\n        } else {\n          throwError(COMPONENT_NAME, \"autocomplete suggestions must be an array\");\n        }\n      };\n\n      if (isArray(props.fetchSuggestions)) {\n        cb(props.fetchSuggestions);\n      } else {\n        const result = props.fetchSuggestions(queryString, cb);\n\n        if (isArray(result)) {\n          cb(result);\n        } else if (isPromise(result)) {\n          result.then(cb);\n        }\n      }\n    };\n\n    const debouncedGetData = debounce(getData, props.debounce);\n\n    const handleInput = value => {\n      const valuePresented = Boolean(value);\n      emit(\"input\", value);\n      emit(UPDATE_MODEL_EVENT, value);\n      suggestionDisabled.value = false;\n      activated.value || (activated.value = isClear && valuePresented);\n\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true;\n        suggestions.value = [];\n        return;\n      }\n\n      if (isClear && valuePresented) {\n        isClear = false;\n      }\n\n      debouncedGetData(value);\n    };\n\n    const handleChange = value => {\n      emit(\"change\", value);\n    };\n\n    const handleFocus = evt => {\n      activated.value = true;\n      emit(\"focus\", evt);\n\n      if (props.triggerOnFocus) {\n        debouncedGetData(String(props.modelValue));\n      }\n    };\n\n    const handleBlur = evt => {\n      emit(\"blur\", evt);\n    };\n\n    const handleClear = () => {\n      activated.value = false;\n      isClear = true;\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"clear\");\n    };\n\n    const handleKeyEnter = () => {\n      if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {\n        handleSelect(suggestions.value[highlightedIndex.value]);\n      } else if (props.selectWhenUnmatched) {\n        emit(\"select\", {\n          value: props.modelValue\n        });\n        nextTick(() => {\n          suggestions.value = [];\n          highlightedIndex.value = -1;\n        });\n      }\n    };\n\n    const close = () => {\n      activated.value = false;\n    };\n\n    const focus = () => {\n      var _a;\n\n      (_a = inputRef.value) == null ? void 0 : _a.focus();\n    };\n\n    const handleSelect = item => {\n      emit(\"input\", item[props.valueKey]);\n      emit(UPDATE_MODEL_EVENT, item[props.valueKey]);\n      emit(\"select\", item);\n      nextTick(() => {\n        suggestions.value = [];\n        highlightedIndex.value = -1;\n      });\n    };\n\n    const highlight = index => {\n      if (!suggestionVisible.value || loading.value) {\n        return;\n      }\n\n      if (index < 0) {\n        highlightedIndex.value = -1;\n        return;\n      }\n\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1;\n      }\n\n      const suggestion = regionRef.value.querySelector(`.${ns.be(\"suggestion\", \"wrap\")}`);\n      const suggestionList = suggestion.querySelectorAll(`.${ns.be(\"suggestion\", \"list\")} li`);\n      const highlightItem = suggestionList[index];\n      const scrollTop = suggestion.scrollTop;\n      const {\n        offsetTop,\n        scrollHeight\n      } = highlightItem;\n\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight;\n      }\n\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight;\n      }\n\n      highlightedIndex.value = index;\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", `${id.value}-item-${highlightedIndex.value}`);\n    };\n\n    onClickOutside(listboxRef, close);\n    onMounted(() => {\n      ;\n      inputRef.value.ref.setAttribute(\"role\", \"textbox\");\n      inputRef.value.ref.setAttribute(\"aria-autocomplete\", \"list\");\n      inputRef.value.ref.setAttribute(\"aria-controls\", \"id\");\n      inputRef.value.ref.setAttribute(\"aria-activedescendant\", `${id.value}-item-${highlightedIndex.value}`);\n    });\n    expose({\n      highlightedIndex,\n      activated,\n      loading,\n      inputRef,\n      popperRef,\n      suggestions,\n      handleSelect,\n      handleKeyEnter,\n      focus,\n      close,\n      highlight\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popperRef\",\n        ref: popperRef,\n        visible: unref(suggestionVisible),\n        \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => isRef(suggestionVisible) ? suggestionVisible.value = $event : null),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"bottom-start\", \"top-start\"],\n        \"popper-class\": [unref(ns).e(\"popper\"), _ctx.popperClass],\n        teleported: unref(compatTeleported),\n        \"gpu-acceleration\": false,\n        pure: \"\",\n        \"manual-mode\": \"\",\n        effect: \"light\",\n        trigger: \"click\",\n        transition: `${unref(ns).namespace.value}-zoom-in-top`,\n        persistent: \"\",\n        onBeforeShow: onSuggestionShow\n      }, {\n        content: withCtx(() => [createElementVNode(\"div\", {\n          ref_key: \"regionRef\",\n          ref: regionRef,\n          class: normalizeClass([unref(ns).b(\"suggestion\"), unref(ns).is(\"loading\", unref(suggestionLoading))]),\n          style: normalizeStyle({\n            minWidth: dropdownWidth.value,\n            outline: \"none\"\n          }),\n          role: \"region\"\n        }, [createVNode(unref(ElScrollbar), {\n          id: unref(id),\n          tag: \"ul\",\n          \"wrap-class\": unref(ns).be(\"suggestion\", \"wrap\"),\n          \"view-class\": unref(ns).be(\"suggestion\", \"list\"),\n          role: \"listbox\"\n        }, {\n          default: withCtx(() => [unref(suggestionLoading) ? (openBlock(), createElementBlock(\"li\", _hoisted_2, [createVNode(unref(ElIcon), {\n            class: normalizeClass(unref(ns).is(\"loading\"))\n          }, {\n            default: withCtx(() => [createVNode(unref(Loading))]),\n            _: 1\n          }, 8, [\"class\"])])) : (openBlock(true), createElementBlock(Fragment, {\n            key: 1\n          }, renderList(suggestions.value, (item, index) => {\n            return openBlock(), createElementBlock(\"li\", {\n              id: `${unref(id)}-item-${index}`,\n              key: index,\n              class: normalizeClass({\n                highlighted: highlightedIndex.value === index\n              }),\n              role: \"option\",\n              \"aria-selected\": highlightedIndex.value === index,\n              onClick: $event => handleSelect(item)\n            }, [renderSlot(_ctx.$slots, \"default\", {\n              item\n            }, () => [createTextVNode(toDisplayString(item[_ctx.valueKey]), 1)])], 10, _hoisted_3);\n          }), 128))]),\n          _: 3\n        }, 8, [\"id\", \"wrap-class\", \"view-class\"])], 6)]),\n        default: withCtx(() => [createElementVNode(\"div\", {\n          ref_key: \"listboxRef\",\n          ref: listboxRef,\n          class: normalizeClass([unref(ns).b(), _ctx.$attrs.class]),\n          style: normalizeStyle(unref(styles)),\n          role: \"combobox\",\n          \"aria-haspopup\": \"listbox\",\n          \"aria-expanded\": unref(suggestionVisible),\n          \"aria-owns\": unref(id)\n        }, [createVNode(unref(ElInput), mergeProps({\n          ref_key: \"inputRef\",\n          ref: inputRef\n        }, unref(attrs), {\n          \"model-value\": _ctx.modelValue,\n          onInput: handleInput,\n          onChange: handleChange,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onClear: handleClear,\n          onKeydown: [_cache[0] || (_cache[0] = withKeys(withModifiers($event => highlight(highlightedIndex.value - 1), [\"prevent\"]), [\"up\"])), _cache[1] || (_cache[1] = withKeys(withModifiers($event => highlight(highlightedIndex.value + 1), [\"prevent\"]), [\"down\"])), withKeys(handleKeyEnter, [\"enter\"]), withKeys(close, [\"tab\"])]\n        }), createSlots({\n          _: 2\n        }, [_ctx.$slots.prepend ? {\n          name: \"prepend\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"prepend\")])\n        } : void 0, _ctx.$slots.append ? {\n          name: \"append\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"append\")])\n        } : void 0, _ctx.$slots.prefix ? {\n          name: \"prefix\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"prefix\")])\n        } : void 0, _ctx.$slots.suffix ? {\n          name: \"suffix\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"suffix\")])\n        } : void 0]), 1040, [\"model-value\", \"onKeydown\"])], 14, _hoisted_1)]),\n        _: 3\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"teleported\", \"transition\"]);\n    };\n  }\n\n});\n\nvar Autocomplete = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/autocomplete/src/autocomplete.vue\"]]);\n\nexport { Autocomplete as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;AAKA;AACA;AAAAA;AAAA,gCACA,iBACA,oBADA,CADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,KAFA;AAGA;AACA;AACA;AACA;AACA,KAHA;AAIA;AACA;AACA,KAFA;;AAIA;AACAC;AACA;AACAC;AACA;AACA,OAJA;AAKA,KANA;;AAQA;AACA;AACA;AACA;;AACAC;;AACA;AACAA;;AACA;AACA;AACA;;AACA;AACAC;AACAC;AACA,SAHA,MAGA;AACAC;AACA;AACA,OAXA;;AAYA;AACAC;AACA,OAFA,MAEA;AACA;;AACA;AACAA;AACA,SAFA,MAEA;AACAC;AACA;AACA;AACA,KA3BA;;AA4BA;;AACA;AACA;AAEAC;AACAA;AACAC;AACAC;;AAEA;AACAD;AACAN;AACA;AACA;;AACA;AACAQ;AACA;;AACAC;AACA,KAjBA;;AAkBA;AACAJ;AACA,KAFA;;AAGA;AACAE;AACAF;;AACA;AACAI;AACA;AACA,KANA;;AAOA;AACAJ;AACA,KAFA;;AAGA;AACAE;AACAC;AACAH;AACAA;AACA,KALA;;AAMA;AAEA,qCACAJ,2BADA,IAEAA,iDAFA,EAGA;AACAS;AACA,OALA,MAKA;AACAL;AAAAM;AAAA;AACAd;AACAG;AACAC;AACA,SAHA;AAIA;AACA,KAdA;;AAeA;AACAM;AACA,KAFA;;AAIA;AACA;;AACA;AAEA,KAJA;;AAKA;AACAF;AACAA;AACAA;AACAR;AACAG;AACAC;AACA,OAHA;AAIA,KARA;;AASA;AACA;AACA;AACA;;AACA;AACAA;AACA;AACA;;AACA;AACAW;AACA;;AAGA,yCACAC,aADA,CACA,iCADA;AAGA;AACA;AACA;AAEA;AAAAC;AAAAC;AAAA;;AACA;AACAC;AACA;;AACA;AACAA;AACA;;AAEAf;AAIAgB;AAEA,KAlCA;;AAoCAC;AAEAC;AAAA;AACAF;AACAA;AACAA,sCACA,eADA,EACA,IADA;AAIAA;AAEA,KATA;AAWAG;AAEAnB,sBAFA;AAIAM,eAJA;AAMAR,aANA;AAQAkB,cARA;AAUAI,eAVA;AAYArB,iBAZA;AAcAU,kBAdA;AAgBAY,oBAhBA;AAkBAC,WAlBA;AAoBAC,WApBA;AAqBAC;AArBA","names":["compatTeleported","nextTick","dropdownWidth","loading","suggestions","highlightedIndex","throwError","cb","result","emit","suggestionDisabled","activated","isClear","debouncedGetData","handleSelect","value","index","querySelector","offsetTop","scrollHeight","suggestion","inputRef","onClickOutside","onMounted","expose","popperRef","handleKeyEnter","focus","close","highlight"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popperRef\"\n    v-model:visible=\"suggestionVisible\"\n    :placement=\"placement\"\n    :fallback-placements=\"['bottom-start', 'top-start']\"\n    :popper-class=\"[ns.e('popper'), popperClass]\"\n    :teleported=\"compatTeleported\"\n    :gpu-acceleration=\"false\"\n    pure\n    manual-mode\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n    @before-show=\"onSuggestionShow\"\n  >\n    <div\n      ref=\"listboxRef\"\n      :class=\"[ns.b(), $attrs.class]\"\n      :style=\"styles\"\n      role=\"combobox\"\n      aria-haspopup=\"listbox\"\n      :aria-expanded=\"suggestionVisible\"\n      :aria-owns=\"id\"\n    >\n      <el-input\n        ref=\"inputRef\"\n        v-bind=\"attrs\"\n        :model-value=\"modelValue\"\n        @input=\"handleInput\"\n        @change=\"handleChange\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @clear=\"handleClear\"\n        @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n        @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n        @keydown.enter=\"handleKeyEnter\"\n        @keydown.tab=\"close\"\n      >\n        <template v-if=\"$slots.prepend\" #prepend>\n          <slot name=\"prepend\" />\n        </template>\n        <template v-if=\"$slots.append\" #append>\n          <slot name=\"append\" />\n        </template>\n        <template v-if=\"$slots.prefix\" #prefix>\n          <slot name=\"prefix\" />\n        </template>\n        <template v-if=\"$slots.suffix\" #suffix>\n          <slot name=\"suffix\" />\n        </template>\n      </el-input>\n    </div>\n    <template #content>\n      <div\n        ref=\"regionRef\"\n        :class=\"[ns.b('suggestion'), ns.is('loading', suggestionLoading)]\"\n        :style=\"{ minWidth: dropdownWidth, outline: 'none' }\"\n        role=\"region\"\n      >\n        <el-scrollbar\n          :id=\"id\"\n          tag=\"ul\"\n          :wrap-class=\"ns.be('suggestion', 'wrap')\"\n          :view-class=\"ns.be('suggestion', 'list')\"\n          role=\"listbox\"\n        >\n          <li v-if=\"suggestionLoading\">\n            <el-icon :class=\"ns.is('loading')\"><Loading /></el-icon>\n          </li>\n          <template v-else>\n            <li\n              v-for=\"(item, index) in suggestions\"\n              :id=\"`${id}-item-${index}`\"\n              :key=\"index\"\n              :class=\"{ highlighted: highlightedIndex === index }\"\n              role=\"option\"\n              :aria-selected=\"highlightedIndex === index\"\n              @click=\"handleSelect(item)\"\n            >\n              <slot :item=\"item\">{{ item[valueKey] }}</slot>\n            </li>\n          </template>\n        </el-scrollbar>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  useAttrs as useCompAttrs,\n} from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { debounce } from 'lodash-unified'\nimport { onClickOutside } from '@vueuse/core'\nimport { useAttrs, useNamespace } from '@element-plus/hooks'\nimport { generateId, isArray, throwError } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport ElInput from '@element-plus/components/input'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { useDeprecateAppendToBody } from '@element-plus/components/popper'\nimport ElIcon from '@element-plus/components/icon'\nimport { Loading } from '@element-plus/icons-vue'\nimport { autocompleteEmits, autocompleteProps } from './autocomplete'\nimport type { StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\n\ndefineOptions({\n  name: 'ElAutocomplete',\n  inheritAttrs: false,\n})\n\nconst COMPONENT_NAME = 'ElAutocomplete'\n\nconst props = defineProps(autocompleteProps)\nconst emit = defineEmits(autocompleteEmits)\n\nconst ns = useNamespace('autocomplete')\nconst { compatTeleported } = useDeprecateAppendToBody(\n  COMPONENT_NAME,\n  'popperAppendToBody'\n)\nlet isClear = false\nconst attrs = useAttrs()\nconst compAttrs = useCompAttrs()\nconst suggestions = ref<any[]>([])\nconst highlightedIndex = ref(-1)\nconst dropdownWidth = ref('')\nconst activated = ref(false)\nconst suggestionDisabled = ref(false)\nconst loading = ref(false)\nconst inputRef = ref<InputInstance>()\nconst regionRef = ref<HTMLElement>()\nconst popperRef = ref<TooltipInstance>()\nconst listboxRef = ref<HTMLElement>()\n\nconst id = computed(() => {\n  return ns.b(String(generateId()))\n})\nconst styles = computed(() => compAttrs.style as StyleValue)\nconst suggestionVisible = computed(() => {\n  const isValidData = isArray(suggestions.value) && suggestions.value.length > 0\n  return (isValidData || loading.value) && activated.value\n})\nconst suggestionLoading = computed(() => {\n  return !props.hideLoading && loading.value\n})\n\nconst onSuggestionShow = () => {\n  nextTick(() => {\n    if (suggestionVisible.value) {\n      dropdownWidth.value = `${inputRef.value!.$el.offsetWidth}px`\n    }\n  })\n}\n\nconst getData = (queryString: string) => {\n  if (suggestionDisabled.value) {\n    return\n  }\n  loading.value = true\n  const cb = (suggestionsArg: any[]) => {\n    loading.value = false\n    if (suggestionDisabled.value) {\n      return\n    }\n    if (isArray(suggestionsArg)) {\n      suggestions.value = suggestionsArg\n      highlightedIndex.value = props.highlightFirstItem ? 0 : -1\n    } else {\n      throwError(COMPONENT_NAME, 'autocomplete suggestions must be an array')\n    }\n  }\n  if (isArray(props.fetchSuggestions)) {\n    cb(props.fetchSuggestions)\n  } else {\n    const result = props.fetchSuggestions(queryString, cb)\n    if (isArray(result)) {\n      cb(result)\n    } else if (isPromise(result)) {\n      result.then(cb)\n    }\n  }\n}\nconst debouncedGetData = debounce(getData, props.debounce)\nconst handleInput = (value: string) => {\n  const valuePresented = Boolean(value)\n\n  emit('input', value)\n  emit(UPDATE_MODEL_EVENT, value)\n  suggestionDisabled.value = false\n  activated.value ||= isClear && valuePresented\n\n  if (!props.triggerOnFocus && !value) {\n    suggestionDisabled.value = true\n    suggestions.value = []\n    return\n  }\n  if (isClear && valuePresented) {\n    isClear = false\n  }\n  debouncedGetData(value)\n}\nconst handleChange = (value: string) => {\n  emit('change', value)\n}\nconst handleFocus = (evt: FocusEvent) => {\n  activated.value = true\n  emit('focus', evt)\n  if (props.triggerOnFocus) {\n    debouncedGetData(String(props.modelValue))\n  }\n}\nconst handleBlur = (evt: FocusEvent) => {\n  emit('blur', evt)\n}\nconst handleClear = () => {\n  activated.value = false\n  isClear = true\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('clear')\n}\nconst handleKeyEnter = () => {\n  if (\n    suggestionVisible.value &&\n    highlightedIndex.value >= 0 &&\n    highlightedIndex.value < suggestions.value.length\n  ) {\n    handleSelect(suggestions.value[highlightedIndex.value])\n  } else if (props.selectWhenUnmatched) {\n    emit('select', { value: props.modelValue })\n    nextTick(() => {\n      suggestions.value = []\n      highlightedIndex.value = -1\n    })\n  }\n}\nconst close = () => {\n  activated.value = false\n}\n\nconst focus = () => {\n  inputRef.value?.focus()\n}\n\nconst handleSelect = (item: any) => {\n  emit('input', item[props.valueKey])\n  emit(UPDATE_MODEL_EVENT, item[props.valueKey])\n  emit('select', item)\n  nextTick(() => {\n    suggestions.value = []\n    highlightedIndex.value = -1\n  })\n}\nconst highlight = (index: number) => {\n  if (!suggestionVisible.value || loading.value) {\n    return\n  }\n  if (index < 0) {\n    highlightedIndex.value = -1\n    return\n  }\n  if (index >= suggestions.value.length) {\n    index = suggestions.value.length - 1\n  }\n  const suggestion = regionRef.value!.querySelector(\n    `.${ns.be('suggestion', 'wrap')}`\n  )!\n  const suggestionList = suggestion.querySelectorAll<HTMLElement>(\n    `.${ns.be('suggestion', 'list')} li`\n  )!\n  const highlightItem = suggestionList[index]\n  const scrollTop = suggestion.scrollTop\n  const { offsetTop, scrollHeight } = highlightItem\n\n  if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n    suggestion.scrollTop += scrollHeight\n  }\n  if (offsetTop < scrollTop) {\n    suggestion.scrollTop -= scrollHeight\n  }\n  highlightedIndex.value = index\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${id.value}-item-${highlightedIndex.value}`\n  )\n}\n\nonClickOutside(listboxRef, close)\n\nonMounted(() => {\n  // TODO: use Volar generate dts to fix it.\n  ;(inputRef.value as any).ref!.setAttribute('role', 'textbox')\n  ;(inputRef.value as any).ref!.setAttribute('aria-autocomplete', 'list')\n  ;(inputRef.value as any).ref!.setAttribute('aria-controls', 'id')\n  ;(inputRef.value as any).ref!.setAttribute(\n    'aria-activedescendant',\n    `${id.value}-item-${highlightedIndex.value}`\n  )\n})\n\ndefineExpose({\n  /** @description the index of the currently highlighted item */\n  highlightedIndex,\n  /** @description autocomplete whether activated */\n  activated,\n  /** @description remote search loading status */\n  loading,\n  /** @description el-input component instance */\n  inputRef,\n  /** @description el-tooltip component instance */\n  popperRef,\n  /** @description fetch suggestions result */\n  suggestions,\n  /** @description triggers when a suggestion is clicked */\n  handleSelect,\n  /** @description handle keyboard enter event */\n  handleKeyEnter,\n  /** @description focus the input element */\n  focus,\n  /** @description close suggestion */\n  close,\n  /** @description highlight an item in a suggestion */\n  highlight,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}