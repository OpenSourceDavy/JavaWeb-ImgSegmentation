{"ast":null,"code":"import '../../../constants/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst MAP_KEY_TO_FOCUS_INTENT = {\n  ArrowLeft: \"prev\",\n  ArrowUp: \"prev\",\n  ArrowRight: \"next\",\n  ArrowDown: \"next\",\n  PageUp: \"first\",\n  Home: \"first\",\n  PageDown: \"last\",\n  End: \"last\"\n};\n\nconst getDirectionAwareKey = (key, dir) => {\n  if (dir !== \"rtl\") return key;\n\n  switch (key) {\n    case EVENT_CODE.right:\n      return EVENT_CODE.left;\n\n    case EVENT_CODE.left:\n      return EVENT_CODE.right;\n\n    default:\n      return key;\n  }\n};\n\nconst getFocusIntent = (event, orientation, dir) => {\n  const key = getDirectionAwareKey(event.key, dir);\n  if (orientation === \"vertical\" && [EVENT_CODE.left, EVENT_CODE.right].includes(key)) return void 0;\n  if (orientation === \"horizontal\" && [EVENT_CODE.up, EVENT_CODE.down].includes(key)) return void 0;\n  return MAP_KEY_TO_FOCUS_INTENT[key];\n};\n\nconst reorderArray = (array, atIdx) => {\n  return array.map((_, idx) => array[(idx + atIdx) % array.length]);\n};\n\nconst focusFirst = elements => {\n  const {\n    activeElement: prevActive\n  } = document;\n\n  for (const element of elements) {\n    if (element === prevActive) return;\n    element.focus();\n    if (prevActive !== document.activeElement) return;\n  }\n};\n\nexport { focusFirst, getFocusIntent, reorderArray };","map":{"version":3,"mappings":";;AACA,MAAMA,uBAAuB,GAAG;AAC9BC,WAAS,EAAE,MADmB;AAE9BC,SAAO,EAAE,MAFqB;AAG9BC,YAAU,EAAE,MAHkB;AAI9BC,WAAS,EAAE,MAJmB;AAK9BC,QAAM,EAAE,OALsB;AAM9BC,MAAI,EAAE,OANwB;AAO9BC,UAAQ,EAAE,MAPoB;AAQ9BC,KAAG,EAAE;AARyB,CAAhC;;AAUA,MAAMC,oBAAoB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzC,MAAIA,GAAG,KAAK,KAAZ,EACE,OAAOD,GAAP;;AACF,UAAQA,GAAR;AACE,SAAKE,UAAU,CAACC,KAAhB;AACE,aAAOD,UAAU,CAACE,IAAlB;;AACF,SAAKF,UAAU,CAACE,IAAhB;AACE,aAAOF,UAAU,CAACC,KAAlB;;AACF;AACE,aAAOH,GAAP;AANJ;AAQD,CAXD;;AAYY,MAACK,cAAc,GAAG,CAACC,KAAD,EAAQC,WAAR,EAAqBN,GAArB,KAA6B;AACzD,QAAMD,GAAG,GAAGD,oBAAoB,CAACO,KAAK,CAACN,GAAP,EAAYC,GAAZ,CAAhC;AACA,MAAIM,WAAW,KAAK,UAAhB,IAA8B,CAACL,UAAU,CAACE,IAAZ,EAAkBF,UAAU,CAACC,KAA7B,EAAoCK,QAApC,CAA6CR,GAA7C,CAAlC,EACE,OAAO,KAAK,CAAZ;AACF,MAAIO,WAAW,KAAK,YAAhB,IAAgC,CAACL,UAAU,CAACO,EAAZ,EAAgBP,UAAU,CAACQ,IAA3B,EAAiCF,QAAjC,CAA0CR,GAA1C,CAApC,EACE,OAAO,KAAK,CAAZ;AACF,SAAOV,uBAAuB,CAACU,GAAD,CAA9B;AACF,CAPY;;AAQA,MAACW,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC5C,SAAOD,KAAK,CAACE,GAAN,CAAU,CAACC,CAAD,EAAIC,GAAJ,KAAYJ,KAAK,CAAC,CAACI,GAAG,GAAGH,KAAP,IAAgBD,KAAK,CAACK,MAAvB,CAA3B,CAAP;AACF,CAFY;;AAGA,MAACC,UAAU,GAAIC,QAAD,IAAc;AACtC,QAAM;AAAEC,iBAAa,EAAEC;AAAjB,MAAgCC,QAAtC;;AACA,OAAK,MAAMC,OAAX,IAAsBJ,QAAtB,EAAgC;AAC9B,QAAII,OAAO,KAAKF,UAAhB,EACE;AACFE,WAAO,CAACC,KAAR;AACA,QAAIH,UAAU,KAAKC,QAAQ,CAACF,aAA5B,EACE;AACH;AACH,CATY","names":["MAP_KEY_TO_FOCUS_INTENT","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","PageUp","Home","PageDown","End","getDirectionAwareKey","key","dir","EVENT_CODE","right","left","getFocusIntent","event","orientation","includes","up","down","reorderArray","array","atIdx","map","_","idx","length","focusFirst","elements","activeElement","prevActive","document","element","focus"],"sources":["../../../../../../packages/components/roving-focus-group/src/utils.ts"],"sourcesContent":["import { EVENT_CODE } from '@element-plus/constants'\nimport type { HTMLAttributes } from 'vue'\n\ntype Orientation = HTMLAttributes['aria-orientation']\ntype Direction = 'ltr' | 'rtl'\ntype FocusIntent = 'first' | 'last' | 'prev' | 'next'\n\nconst MAP_KEY_TO_FOCUS_INTENT: Record<string, FocusIntent> = {\n  ArrowLeft: 'prev',\n  ArrowUp: 'prev',\n  ArrowRight: 'next',\n  ArrowDown: 'next',\n  PageUp: 'first',\n  Home: 'first',\n  PageDown: 'last',\n  End: 'last',\n}\n\nconst getDirectionAwareKey = (key: string, dir?: Direction) => {\n  if (dir !== 'rtl') return key\n\n  switch (key) {\n    case EVENT_CODE.right:\n      return EVENT_CODE.left\n    case EVENT_CODE.left:\n      return EVENT_CODE.right\n    default:\n      return key\n  }\n}\n\nexport const getFocusIntent = (\n  event: KeyboardEvent,\n  orientation?: Orientation,\n  dir?: Direction\n) => {\n  const key = getDirectionAwareKey(event.key, dir)\n  if (\n    orientation === 'vertical' &&\n    [EVENT_CODE.left, EVENT_CODE.right].includes(key)\n  )\n    return undefined\n  if (\n    orientation === 'horizontal' &&\n    [EVENT_CODE.up, EVENT_CODE.down].includes(key)\n  )\n    return undefined\n  return MAP_KEY_TO_FOCUS_INTENT[key]\n}\n\nexport const reorderArray = <T>(array: T[], atIdx: number) => {\n  return array.map((_, idx) => array[(idx + atIdx) % array.length])\n}\n\nexport const focusFirst = (elements: HTMLElement[]) => {\n  const { activeElement: prevActive } = document\n\n  for (const element of elements) {\n    if (element === prevActive) return\n    element.focus()\n    if (prevActive !== document.activeElement) return\n  }\n}\n"]},"metadata":{},"sourceType":"module"}