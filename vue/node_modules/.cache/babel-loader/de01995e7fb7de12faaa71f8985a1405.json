{"ast":null,"code":"import { defineComponent, createVNode, renderSlot, h } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { PatchFlags } from '../../../utils/vue/vnode.mjs';\nconst overlayProps = buildProps({\n  mask: {\n    type: Boolean,\n    default: true\n  },\n  customMaskEvent: {\n    type: Boolean,\n    default: false\n  },\n  overlayClass: {\n    type: definePropType([String, Array, Object])\n  },\n  zIndex: {\n    type: definePropType([String, Number])\n  }\n});\nconst overlayEmits = {\n  click: evt => evt instanceof MouseEvent\n};\nvar Overlay = defineComponent({\n  name: \"ElOverlay\",\n  props: overlayProps,\n  emits: overlayEmits,\n\n  setup(props, {\n    slots,\n    emit\n  }) {\n    const ns = useNamespace(\"overlay\");\n\n    const onMaskClick = e => {\n      emit(\"click\", e);\n    };\n\n    const {\n      onClick,\n      onMousedown,\n      onMouseup\n    } = useSameTarget(props.customMaskEvent ? void 0 : onMaskClick);\n    return () => {\n      return props.mask ? createVNode(\"div\", {\n        class: [ns.b(), props.overlayClass],\n        style: {\n          zIndex: props.zIndex\n        },\n        onClick,\n        onMousedown,\n        onMouseup\n      }, [renderSlot(slots, \"default\")], PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS, [\"onClick\", \"onMouseup\", \"onMousedown\"]) : h(\"div\", {\n        class: props.overlayClass,\n        style: {\n          zIndex: props.zIndex,\n          position: \"fixed\",\n          top: \"0px\",\n          right: \"0px\",\n          bottom: \"0px\",\n          left: \"0px\"\n        }\n      }, [renderSlot(slots, \"default\")]);\n    };\n  }\n\n});\nexport { Overlay as default, overlayEmits, overlayProps };","map":{"version":3,"mappings":";;;;;;;AAGY,MAACA,YAAY,GAAGC,UAAU,CAAC;AACrCC,MAAI,EAAE;AACJC,QAAI,EAAEC,OADF;AAEJC,WAAO,EAAE;AAFL,GAD+B;AAKrCC,iBAAe,EAAE;AACfH,QAAI,EAAEC,OADS;AAEfC,WAAO,EAAE;AAFM,GALoB;AASrCE,cAAY,EAAE;AACZJ,QAAI,EAAEK,cAAc,CAAC,CACnBC,MADmB,EAEnBC,KAFmB,EAGnBC,MAHmB,CAAD;AADR,GATuB;AAgBrCC,QAAM,EAAE;AACNT,QAAI,EAAEK,cAAc,CAAC,CAACC,MAAD,EAASI,MAAT,CAAD;AADd;AAhB6B,CAAD,CAA1B;AAoBA,MAACC,YAAY,GAAG;AAC1BC,OAAK,EAAGC,GAAD,IAASA,GAAG,YAAYC;AADL,CAAhB;AAGZ,cAAeC,eAAe,CAAC;AAC7BC,MAAI,EAAE,WADuB;AAE7BC,OAAK,EAAEpB,YAFsB;AAG7BqB,OAAK,EAAEP,YAHsB;;AAI7BQ,OAAK,CAACF,KAAD,EAAQ;AAAEG,SAAF;AAASC;AAAT,GAAR,EAAyB;AAC5B,UAAMC,EAAE,GAAGC,YAAY,CAAC,SAAD,CAAvB;;AACA,UAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBJ,UAAI,CAAC,OAAD,EAAUI,CAAV,CAAJ;AACD,KAFD;;AAGA,UAAM;AAAEC,aAAF;AAAWC,iBAAX;AAAwBC;AAAxB,QAAsCC,aAAa,CAACZ,KAAK,CAACd,eAAN,GAAwB,KAAK,CAA7B,GAAiCqB,WAAlC,CAAzD;AACA,WAAO,MAAM;AACX,aAAOP,KAAK,CAAClB,IAAN,GAAa+B,WAAW,CAAC,KAAD,EAAQ;AACrCC,aAAK,EAAE,CAACT,EAAE,CAACU,CAAH,EAAD,EAASf,KAAK,CAACb,YAAf,CAD8B;AAErC6B,aAAK,EAAE;AACLxB,gBAAM,EAAEQ,KAAK,CAACR;AADT,SAF8B;AAKrCiB,eALqC;AAMrCC,mBANqC;AAOrCC;AAPqC,OAAR,EAQ5B,CAACM,UAAU,CAACd,KAAD,EAAQ,SAAR,CAAX,CAR4B,EAQIe,UAAU,CAACC,KAAX,GAAmBD,UAAU,CAACE,KAA9B,GAAsCF,UAAU,CAACG,KARrD,EAQ4D,CAAC,SAAD,EAAY,WAAZ,EAAyB,aAAzB,CAR5D,CAAxB,GAQ+HC,CAAC,CAAC,KAAD,EAAQ;AAC7IR,aAAK,EAAEd,KAAK,CAACb,YADgI;AAE7I6B,aAAK,EAAE;AACLxB,gBAAM,EAAEQ,KAAK,CAACR,MADT;AAEL+B,kBAAQ,EAAE,OAFL;AAGLC,aAAG,EAAE,KAHA;AAILC,eAAK,EAAE,KAJF;AAKLC,gBAAM,EAAE,KALH;AAMLC,cAAI,EAAE;AAND;AAFsI,OAAR,EAUpI,CAACV,UAAU,CAACd,KAAD,EAAQ,SAAR,CAAX,CAVoI,CARvI;AAmBD,KApBD;AAqBD;;AA/B4B,CAAD,CAA9B","names":["overlayProps","buildProps","mask","type","Boolean","default","customMaskEvent","overlayClass","definePropType","String","Array","Object","zIndex","Number","overlayEmits","click","evt","MouseEvent","defineComponent","name","props","emits","setup","slots","emit","ns","useNamespace","onMaskClick","e","onClick","onMousedown","onMouseup","useSameTarget","createVNode","class","b","style","renderSlot","PatchFlags","STYLE","CLASS","PROPS","h","position","top","right","bottom","left"],"sources":["../../../../../../packages/components/overlay/src/overlay.ts"],"sourcesContent":["import { createVNode, defineComponent, h, renderSlot } from 'vue'\nimport { PatchFlags, buildProps, definePropType } from '@element-plus/utils'\nimport { useNamespace, useSameTarget } from '@element-plus/hooks'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { ZIndexProperty } from 'csstype'\n\nexport const overlayProps = buildProps({\n  mask: {\n    type: Boolean,\n    default: true,\n  },\n  customMaskEvent: {\n    type: Boolean,\n    default: false,\n  },\n  overlayClass: {\n    type: definePropType<string | string[] | Record<string, boolean>>([\n      String,\n      Array,\n      Object,\n    ]),\n  },\n  zIndex: {\n    type: definePropType<ZIndexProperty>([String, Number]),\n  },\n} as const)\nexport type OverlayProps = ExtractPropTypes<typeof overlayProps>\n\nexport const overlayEmits = {\n  click: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\nexport type OverlayEmits = typeof overlayEmits\n\nexport default defineComponent({\n  name: 'ElOverlay',\n\n  props: overlayProps,\n  emits: overlayEmits,\n\n  setup(props, { slots, emit }) {\n    const ns = useNamespace('overlay')\n\n    const onMaskClick = (e: MouseEvent) => {\n      emit('click', e)\n    }\n\n    const { onClick, onMousedown, onMouseup } = useSameTarget(\n      props.customMaskEvent ? undefined : onMaskClick\n    )\n\n    // init here\n    return () => {\n      // when the vnode meets the same structure but with different change trigger\n      // it will not automatically update, thus we simply use h function to manage updating\n      return props.mask\n        ? createVNode(\n            'div',\n            {\n              class: [ns.b(), props.overlayClass],\n              style: {\n                zIndex: props.zIndex,\n              },\n              onClick,\n              onMousedown,\n              onMouseup,\n            },\n            [renderSlot(slots, 'default')],\n            PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS,\n            ['onClick', 'onMouseup', 'onMousedown']\n          )\n        : h(\n            'div',\n            {\n              class: props.overlayClass,\n              style: {\n                zIndex: props.zIndex,\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n              } as CSSProperties,\n            },\n            [renderSlot(slots, 'default')]\n          )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}