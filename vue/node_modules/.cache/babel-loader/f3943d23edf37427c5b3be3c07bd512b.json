{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, onMounted, nextTick, h } from 'vue';\nimport { ElCheckbox } from '../../../checkbox/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport FilterPanel from '../filter-panel.mjs';\nimport useLayoutObserver from '../layout-observer.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvent from './event-helper.mjs';\nimport useStyle from './style.helper.mjs';\nimport useUtils from './utils-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nvar TableHeader = defineComponent({\n  name: \"ElTableHeader\",\n  components: {\n    ElCheckbox\n  },\n  props: {\n    fixed: {\n      type: String,\n      default: \"\"\n    },\n    store: {\n      required: true,\n      type: Object\n    },\n    border: Boolean,\n    defaultSort: {\n      type: Object,\n      default: () => {\n        return {\n          prop: \"\",\n          order: \"\"\n        };\n      }\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const instance = getCurrentInstance();\n    const parent = inject(TABLE_INJECTION_KEY);\n    const ns = useNamespace(\"table\");\n    const filterPanels = ref({});\n    const {\n      onColumnsChange,\n      onScrollableChange\n    } = useLayoutObserver(parent);\n    onMounted(async () => {\n      await nextTick();\n      await nextTick();\n      const {\n        prop,\n        order\n      } = props.defaultSort;\n      parent == null ? void 0 : parent.store.commit(\"sort\", {\n        prop,\n        order,\n        init: true\n      });\n    });\n    const {\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick\n    } = useEvent(props, emit);\n    const {\n      getHeaderRowStyle,\n      getHeaderRowClass,\n      getHeaderCellStyle,\n      getHeaderCellClass\n    } = useStyle(props);\n    const {\n      isGroup,\n      toggleAllSelection,\n      columnRows\n    } = useUtils(props);\n    instance.state = {\n      onColumnsChange,\n      onScrollableChange\n    };\n    instance.filterPanels = filterPanels;\n    return {\n      ns,\n      filterPanels,\n      onColumnsChange,\n      onScrollableChange,\n      columnRows,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      getHeaderCellClass,\n      getHeaderCellStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick,\n      isGroup,\n      toggleAllSelection\n    };\n  },\n\n  render() {\n    const {\n      ns,\n      isGroup,\n      columnRows,\n      getHeaderCellStyle,\n      getHeaderCellClass,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleSortClick,\n      handleMouseOut,\n      store,\n      $parent\n    } = this;\n    let rowSpan = 1;\n    return h(\"thead\", {\n      class: {\n        [ns.is(\"group\")]: isGroup\n      }\n    }, columnRows.map((subColumns, rowIndex) => h(\"tr\", {\n      class: getHeaderRowClass(rowIndex),\n      key: rowIndex,\n      style: getHeaderRowStyle(rowIndex)\n    }, subColumns.map((column, cellIndex) => {\n      if (column.rowSpan > rowSpan) {\n        rowSpan = column.rowSpan;\n      }\n\n      return h(\"th\", {\n        class: getHeaderCellClass(rowIndex, cellIndex, subColumns, column),\n        colspan: column.colSpan,\n        key: `${column.id}-thead`,\n        rowspan: column.rowSpan,\n        style: getHeaderCellStyle(rowIndex, cellIndex, subColumns, column),\n        onClick: $event => handleHeaderClick($event, column),\n        onContextmenu: $event => handleHeaderContextMenu($event, column),\n        onMousedown: $event => handleMouseDown($event, column),\n        onMousemove: $event => handleMouseMove($event, column),\n        onMouseout: handleMouseOut\n      }, [h(\"div\", {\n        class: [\"cell\", column.filteredValue && column.filteredValue.length > 0 ? \"highlight\" : \"\", column.labelClassName]\n      }, [column.renderHeader ? column.renderHeader({\n        column,\n        $index: cellIndex,\n        store,\n        _self: $parent\n      }) : column.label, column.sortable && h(\"span\", {\n        onClick: $event => handleSortClick($event, column),\n        class: \"caret-wrapper\"\n      }, [h(\"i\", {\n        onClick: $event => handleSortClick($event, column, \"ascending\"),\n        class: \"sort-caret ascending\"\n      }), h(\"i\", {\n        onClick: $event => handleSortClick($event, column, \"descending\"),\n        class: \"sort-caret descending\"\n      })]), column.filterable && h(FilterPanel, {\n        store,\n        placement: column.filterPlacement || \"bottom-start\",\n        column,\n        upDataColumn: (key, value) => {\n          column[key] = value;\n        }\n      })])]);\n    }))));\n  }\n\n});\nexport { TableHeader as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","components","ElCheckbox","props","fixed","type","String","default","store","required","Object","border","Boolean","defaultSort","prop","order","setup","emit","instance","getCurrentInstance","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","filterPanels","ref","onColumnsChange","onScrollableChange","useLayoutObserver","onMounted","nextTick","commit","init","handleHeaderClick","handleHeaderContextMenu","handleMouseDown","handleMouseMove","handleMouseOut","handleSortClick","handleFilterClick","useEvent","getHeaderRowStyle","getHeaderRowClass","getHeaderCellStyle","getHeaderCellClass","useStyle","isGroup","toggleAllSelection","columnRows","useUtils","state","render","$parent","rowSpan","h","class","is","map","subColumns","rowIndex","key","style","column","cellIndex","colspan","colSpan","id","rowspan","onClick","$event","onContextmenu","onMousedown","onMousemove","onMouseout","filteredValue","length","labelClassName","renderHeader","$index","_self","label","sortable","filterable","FilterPanel","placement","filterPlacement","upDataColumn","value"],"sources":["../../../../../../../packages/components/table/src/table-header/index.ts"],"sourcesContent":["import {\n  defineComponent,\n  getCurrentInstance,\n  h,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n} from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { useNamespace } from '@element-plus/hooks'\nimport FilterPanel from '../filter-panel.vue'\nimport useLayoutObserver from '../layout-observer'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvent from './event-helper'\nimport useStyle from './style.helper'\nimport useUtils from './utils-helper'\nimport type { ComponentInternalInstance, PropType, Ref } from 'vue'\nimport type { DefaultRow, Sort } from '../table/defaults'\nimport type { Store } from '../store'\nexport interface TableHeader extends ComponentInternalInstance {\n  state: {\n    onColumnsChange\n    onScrollableChange\n  }\n  filterPanels: Ref<unknown>\n}\nexport interface TableHeaderProps<T> {\n  fixed: string\n  store: Store<T>\n  border: boolean\n  defaultSort: Sort\n}\n\nexport default defineComponent({\n  name: 'ElTableHeader',\n  components: {\n    ElCheckbox,\n  },\n  props: {\n    fixed: {\n      type: String,\n      default: '',\n    },\n    store: {\n      required: true,\n      type: Object as PropType<TableHeaderProps<DefaultRow>['store']>,\n    },\n    border: Boolean,\n    defaultSort: {\n      type: Object as PropType<TableHeaderProps<DefaultRow>['defaultSort']>,\n      default: () => {\n        return {\n          prop: '',\n          order: '',\n        }\n      },\n    },\n  },\n  setup(props, { emit }) {\n    const instance = getCurrentInstance() as TableHeader\n    const parent = inject(TABLE_INJECTION_KEY)\n    const ns = useNamespace('table')\n    const filterPanels = ref({})\n    const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent!)\n    onMounted(async () => {\n      // Need double await, because udpateColumns is executed after nextTick for now\n      await nextTick()\n      await nextTick()\n      const { prop, order } = props.defaultSort\n      parent?.store.commit('sort', { prop, order, init: true })\n    })\n    const {\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick,\n    } = useEvent(props as TableHeaderProps<unknown>, emit)\n    const {\n      getHeaderRowStyle,\n      getHeaderRowClass,\n      getHeaderCellStyle,\n      getHeaderCellClass,\n    } = useStyle(props as TableHeaderProps<unknown>)\n    const { isGroup, toggleAllSelection, columnRows } = useUtils(\n      props as TableHeaderProps<unknown>\n    )\n\n    instance.state = {\n      onColumnsChange,\n      onScrollableChange,\n    }\n    instance.filterPanels = filterPanels\n\n    return {\n      ns,\n      filterPanels,\n      onColumnsChange,\n      onScrollableChange,\n      columnRows,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      getHeaderCellClass,\n      getHeaderCellStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick,\n      isGroup,\n      toggleAllSelection,\n    }\n  },\n  render() {\n    const {\n      ns,\n      isGroup,\n      columnRows,\n      getHeaderCellStyle,\n      getHeaderCellClass,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleSortClick,\n      handleMouseOut,\n      store,\n      $parent,\n    } = this\n    let rowSpan = 1\n    return h(\n      'thead',\n      {\n        class: { [ns.is('group')]: isGroup },\n      },\n      columnRows.map((subColumns, rowIndex) =>\n        h(\n          'tr',\n          {\n            class: getHeaderRowClass(rowIndex),\n            key: rowIndex,\n            style: getHeaderRowStyle(rowIndex),\n          },\n          subColumns.map((column, cellIndex) => {\n            if (column.rowSpan > rowSpan) {\n              rowSpan = column.rowSpan\n            }\n            return h(\n              'th',\n              {\n                class: getHeaderCellClass(\n                  rowIndex,\n                  cellIndex,\n                  subColumns,\n                  column\n                ),\n                colspan: column.colSpan,\n                key: `${column.id}-thead`,\n                rowspan: column.rowSpan,\n                style: getHeaderCellStyle(\n                  rowIndex,\n                  cellIndex,\n                  subColumns,\n                  column\n                ),\n                onClick: ($event) => handleHeaderClick($event, column),\n                onContextmenu: ($event) =>\n                  handleHeaderContextMenu($event, column),\n                onMousedown: ($event) => handleMouseDown($event, column),\n                onMousemove: ($event) => handleMouseMove($event, column),\n                onMouseout: handleMouseOut,\n              },\n              [\n                h(\n                  'div',\n                  {\n                    class: [\n                      'cell',\n                      column.filteredValue && column.filteredValue.length > 0\n                        ? 'highlight'\n                        : '',\n                      column.labelClassName,\n                    ],\n                  },\n                  [\n                    column.renderHeader\n                      ? column.renderHeader({\n                          column,\n                          $index: cellIndex,\n                          store,\n                          _self: $parent,\n                        })\n                      : column.label,\n                    column.sortable &&\n                      h(\n                        'span',\n                        {\n                          onClick: ($event) => handleSortClick($event, column),\n                          class: 'caret-wrapper',\n                        },\n                        [\n                          h('i', {\n                            onClick: ($event) =>\n                              handleSortClick($event, column, 'ascending'),\n                            class: 'sort-caret ascending',\n                          }),\n                          h('i', {\n                            onClick: ($event) =>\n                              handleSortClick($event, column, 'descending'),\n                            class: 'sort-caret descending',\n                          }),\n                        ]\n                      ),\n                    column.filterable &&\n                      h(FilterPanel, {\n                        store,\n                        placement: column.filterPlacement || 'bottom-start',\n                        column,\n                        upDataColumn: (key, value) => {\n                          column[key] = value\n                        },\n                      }),\n                  ]\n                ),\n              ]\n            )\n          })\n        )\n      )\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}