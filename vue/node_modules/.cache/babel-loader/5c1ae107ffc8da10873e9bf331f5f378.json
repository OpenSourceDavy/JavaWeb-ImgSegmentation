{"ast":null,"code":"import { isVNode, createVNode, render } from 'vue';\nimport { isClient, isNumber } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { messageConfig } from '../../config-provider/src/config-provider.mjs';\nimport MessageConstructor from './message2.mjs';\nimport { messageTypes } from './message.mjs';\nimport { isObject, isString, isFunction } from '@vue/shared';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst instances = [];\nlet seed = 1;\n\nconst message = function (options = {}, context) {\n  if (!isClient) return {\n    close: () => void 0\n  };\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return {\n      close: () => void 0\n    };\n  }\n\n  if (!isVNode(options) && isObject(options) && options.grouping && !isVNode(options.message) && instances.length) {\n    const tempVm = instances.find(item => {\n      var _a, _b, _c;\n\n      return `${(_b = (_a = item.vm.props) == null ? void 0 : _a.message) != null ? _b : \"\"}` === `${(_c = options.message) != null ? _c : \"\"}`;\n    });\n\n    if (tempVm) {\n      tempVm.vm.component.props.repeatNum += 1;\n      tempVm.vm.component.props.type = (options == null ? void 0 : options.type) || \"info\";\n      return {\n        close: () => vm.component.proxy.visible = false\n      };\n    }\n  }\n\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  }\n\n  let verticalOffset = options.offset || 20;\n  instances.forEach(({\n    vm: vm2\n  }) => {\n    var _a;\n\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + 16;\n  });\n  verticalOffset += 16;\n  const {\n    nextZIndex\n  } = useZIndex();\n  const id = `message_${seed++}`;\n  const userOnClose = options.onClose;\n  const props = {\n    zIndex: nextZIndex(),\n    ...options,\n    offset: verticalOffset,\n    id,\n    onClose: () => {\n      close(id, userOnClose);\n    }\n  };\n  let appendTo = document.body;\n\n  if (isElement(options.appendTo)) {\n    appendTo = options.appendTo;\n  } else if (isString(options.appendTo)) {\n    appendTo = document.querySelector(options.appendTo);\n  }\n\n  if (!isElement(appendTo)) {\n    debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n    appendTo = document.body;\n  }\n\n  const container = document.createElement(\"div\");\n  container.className = `container_${id}`;\n  const messageContent = props.message;\n  const vm = createVNode(MessageConstructor, props, isFunction(messageContent) ? {\n    default: messageContent\n  } : isVNode(messageContent) ? {\n    default: () => messageContent\n  } : null);\n  vm.appContext = context || message._context;\n\n  vm.props.onDestroy = () => {\n    render(null, container);\n  };\n\n  render(vm, container);\n  instances.push({\n    vm\n  });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: () => vm.component.proxy.visible = false\n  };\n};\n\nmessageTypes.forEach(type => {\n  message[type] = (options = {}, appContext) => {\n    if (isString(options) || isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n\n    return message({ ...options,\n      type\n    }, appContext);\n  };\n});\n\nfunction close(id, userOnClose) {\n  const idx = instances.findIndex(({\n    vm: vm2\n  }) => id === vm2.component.props.id);\n  if (idx === -1) return;\n  const {\n    vm\n  } = instances[idx];\n  if (!vm) return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  const removedHeight = vm.el.offsetHeight;\n  instances.splice(idx, 1);\n  const len = instances.length;\n  if (len < 1) return;\n\n  for (let i = idx; i < len; i++) {\n    const pos = Number.parseInt(instances[i].vm.el.style[\"top\"], 10) - removedHeight - 16;\n    instances[i].vm.component.props.offset = pos;\n  }\n}\n\nfunction closeAll() {\n  var _a;\n\n  for (let i = instances.length - 1; i >= 0; i--) {\n    const instance = instances[i].vm.component;\n    (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.close();\n  }\n}\n\nmessage.closeAll = closeAll;\nmessage._context = null;\nexport { close, closeAll, message as default };","map":{"version":3,"mappings":"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","names":["instances","seed","message","options","context","isClient","close","isNumber","messageConfig","max","length","isVNode","isObject","grouping","tempVm","find","item","_a","_b","_c","vm","props","component","repeatNum","type","proxy","visible","isString","verticalOffset","offset","forEach","vm2","el","offsetHeight","nextZIndex","useZIndex","id","userOnClose","onClose","zIndex","appendTo","document","body","isElement","querySelector","debugWarn","container","createElement","className","messageContent","createVNode","MessageConstructor","isFunction","default","appContext","_context","onDestroy","render","push","appendChild","firstElementChild","messageTypes","idx","findIndex","removedHeight","splice","len","i","pos","Number","parseInt","style","closeAll","instance"],"sources":["../../../../../../packages/components/message/src/message-method.ts"],"sourcesContent":["import { createVNode, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  debugWarn,\n  isElement,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  isVNode,\n} from '@element-plus/utils'\nimport { useZIndex } from '@element-plus/hooks'\nimport { messageConfig } from '@element-plus/components/config-provider/src/config-provider'\nimport MessageConstructor from './message.vue'\nimport { messageTypes } from './message'\n\nimport type { AppContext, ComponentPublicInstance, VNode } from 'vue'\nimport type { Message, MessageFn, MessageProps, MessageQueue } from './message'\n\nconst instances: MessageQueue = []\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst message: MessageFn & Partial<Message> & { _context: AppContext | null } =\n  function (options = {}, context?: AppContext | null) {\n    if (!isClient) return { close: () => undefined }\n    if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n      return { close: () => undefined }\n    }\n\n    if (\n      !isVNode(options) &&\n      isObject(options) &&\n      options.grouping &&\n      !isVNode(options.message) &&\n      instances.length\n    ) {\n      const tempVm: any = instances.find(\n        (item) =>\n          `${item.vm.props?.message ?? ''}` ===\n          `${(options as any).message ?? ''}`\n      )\n      if (tempVm) {\n        tempVm.vm.component!.props.repeatNum += 1\n        tempVm.vm.component!.props.type = options?.type || 'info'\n        return {\n          close: () =>\n            ((\n              vm.component!.proxy as ComponentPublicInstance<{\n                visible: boolean\n              }>\n            ).visible = false),\n        }\n      }\n    }\n\n    if (isString(options) || isVNode(options)) {\n      options = { message: options }\n    }\n\n    let verticalOffset = options.offset || 20\n    instances.forEach(({ vm }) => {\n      verticalOffset += (vm.el?.offsetHeight || 0) + 16\n    })\n    verticalOffset += 16\n\n    const { nextZIndex } = useZIndex()\n\n    const id = `message_${seed++}`\n    const userOnClose = options.onClose\n    const props: Partial<MessageProps> = {\n      zIndex: nextZIndex(),\n      ...options,\n      offset: verticalOffset,\n      id,\n      onClose: () => {\n        close(id, userOnClose)\n      },\n    }\n\n    let appendTo: HTMLElement | null = document.body\n    if (isElement(options.appendTo)) {\n      appendTo = options.appendTo\n    } else if (isString(options.appendTo)) {\n      appendTo = document.querySelector(options.appendTo)\n    }\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElMessage',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n\n    const container = document.createElement('div')\n\n    container.className = `container_${id}`\n\n    const messageContent = props.message\n    const vm = createVNode(\n      MessageConstructor,\n      props,\n      isFunction(messageContent)\n        ? { default: messageContent }\n        : isVNode(messageContent)\n        ? { default: () => messageContent }\n        : null\n    )\n\n    vm.appContext = context || message._context\n\n    // clean message element preventing mem leak\n    vm.props!.onDestroy = () => {\n      render(null, container)\n      // since the element is destroy, then the VNode should be collected by GC as well\n      // we do not want cause any mem leak because we have returned vm as a reference to users\n      // so that we manually set it to false.\n    }\n\n    render(vm, container)\n    // instances will remove this item when close function gets called. So we do not need to worry about it.\n    instances.push({ vm })\n    appendTo.appendChild(container.firstElementChild!)\n\n    return {\n      // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n      // for out component, so that all closing steps will not be skipped.\n      close: () =>\n        ((\n          vm.component!.proxy as ComponentPublicInstance<{ visible: boolean }>\n        ).visible = false),\n    }\n  }\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}, appContext?: AppContext | null) => {\n    if (isString(options) || isVNode(options)) {\n      options = {\n        message: options,\n      }\n    }\n    return message(\n      {\n        ...options,\n        type,\n      },\n      appContext\n    )\n  }\n})\n\nexport function close(id: string, userOnClose?: (vm: VNode) => void): void {\n  const idx = instances.findIndex(({ vm }) => id === vm.component!.props.id)\n  if (idx === -1) return\n\n  const { vm } = instances[idx]\n  if (!vm) return\n  userOnClose?.(vm)\n\n  const removedHeight = vm.el!.offsetHeight\n  instances.splice(idx, 1)\n\n  // adjust other instances vertical offset\n  const len = instances.length\n  if (len < 1) return\n  for (let i = idx; i < len; i++) {\n    const pos =\n      Number.parseInt(instances[i].vm.el!.style['top'], 10) - removedHeight - 16\n\n    instances[i].vm.component!.props.offset = pos\n  }\n}\n\nexport function closeAll(): void {\n  for (let i = instances.length - 1; i >= 0; i--) {\n    const instance = instances[i].vm.component\n    ;(instance?.proxy as any)?.close()\n  }\n}\n\nmessage.closeAll = closeAll\nmessage._context = null\n\nexport default message as Message\n"]},"metadata":{},"sourceType":"module"}