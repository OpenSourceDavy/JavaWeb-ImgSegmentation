{"ast":null,"code":"import { inject, computed, ref, getCurrentInstance, watch } from 'vue';\nimport { toTypeString } from '@vue/shared';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst useCheckboxProps = {\n  modelValue: {\n    type: [Boolean, Number, String],\n    default: () => void 0\n  },\n  label: {\n    type: [String, Boolean, Number, Object]\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: void 0\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: void 0\n  },\n  tabindex: [String, Number],\n  size: String\n};\n\nconst useCheckboxGroup = () => {\n  const elForm = inject(formContextKey, {});\n  const elFormItem = inject(formItemContextKey, {});\n  const checkboxGroup = inject(\"CheckboxGroup\", {});\n  const isGroup = computed(() => checkboxGroup && (checkboxGroup == null ? void 0 : checkboxGroup.name) === \"ElCheckboxGroup\");\n  const elFormItemSize = computed(() => {\n    return elFormItem.size;\n  });\n  return {\n    isGroup,\n    checkboxGroup,\n    elForm,\n    elFormItemSize,\n    elFormItem\n  };\n};\n\nconst useModel = props => {\n  const selfModel = ref(false);\n  const {\n    emit\n  } = getCurrentInstance();\n  const {\n    isGroup,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const isLimitExceeded = ref(false);\n  const model = computed({\n    get() {\n      var _a, _b;\n\n      return isGroup.value ? (_a = checkboxGroup.modelValue) == null ? void 0 : _a.value : (_b = props.modelValue) != null ? _b : selfModel.value;\n    },\n\n    set(val) {\n      var _a;\n\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value = checkboxGroup.max !== void 0 && val.length > checkboxGroup.max.value;\n        isLimitExceeded.value === false && ((_a = checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _a.call(checkboxGroup, val));\n      } else {\n        emit(UPDATE_MODEL_EVENT, val);\n        selfModel.value = val;\n      }\n    }\n\n  });\n  return {\n    model,\n    isLimitExceeded\n  };\n};\n\nconst useCheckboxStatus = (props, {\n  model\n}) => {\n  const {\n    isGroup,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const focus = ref(false);\n  const size = useSize(checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize, {\n    prop: true\n  });\n  const isChecked = computed(() => {\n    const value = model.value;\n\n    if (toTypeString(value) === \"[object Boolean]\") {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.includes(props.label);\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  const checkboxSize = useSize(computed(() => {\n    var _a;\n\n    return isGroup.value ? (_a = checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a.value : void 0;\n  }));\n  return {\n    isChecked,\n    focus,\n    size,\n    checkboxSize\n  };\n};\n\nconst useDisabled = (props, {\n  model,\n  isChecked\n}) => {\n  const {\n    elForm,\n    isGroup,\n    checkboxGroup\n  } = useCheckboxGroup();\n  const isLimitDisabled = computed(() => {\n    var _a, _b;\n\n    const max = (_a = checkboxGroup.max) == null ? void 0 : _a.value;\n    const min = (_b = checkboxGroup.min) == null ? void 0 : _b.value;\n    return !!(max || min) && model.value.length >= max && !isChecked.value || model.value.length <= min && isChecked.value;\n  });\n  const isDisabled = computed(() => {\n    var _a, _b;\n\n    const disabled = props.disabled || elForm.disabled;\n    return (_b = isGroup.value ? ((_a = checkboxGroup.disabled) == null ? void 0 : _a.value) || disabled || isLimitDisabled.value : props.disabled || elForm.disabled) != null ? _b : false;\n  });\n  return {\n    isDisabled,\n    isLimitDisabled\n  };\n};\n\nconst setStoreValue = (props, {\n  model\n}) => {\n  function addToStore() {\n    if (Array.isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label);\n    } else {\n      model.value = props.trueLabel || true;\n    }\n  }\n\n  props.checked && addToStore();\n};\n\nconst useEvent = (props, {\n  isLimitExceeded\n}) => {\n  const {\n    elFormItem\n  } = useCheckboxGroup();\n  const {\n    emit\n  } = getCurrentInstance();\n\n  function handleChange(e) {\n    var _a, _b;\n\n    if (isLimitExceeded.value) return;\n    const target = e.target;\n    const value = target.checked ? (_a = props.trueLabel) != null ? _a : true : (_b = props.falseLabel) != null ? _b : false;\n    emit(\"change\", value, e);\n  }\n\n  watch(() => props.modelValue, () => {\n    var _a;\n\n    (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n  });\n  return {\n    handleChange\n  };\n};\n\nconst useCheckbox = props => {\n  const {\n    model,\n    isLimitExceeded\n  } = useModel(props);\n  const {\n    focus,\n    size,\n    isChecked,\n    checkboxSize\n  } = useCheckboxStatus(props, {\n    model\n  });\n  const {\n    isDisabled\n  } = useDisabled(props, {\n    model,\n    isChecked\n  });\n  const {\n    handleChange\n  } = useEvent(props, {\n    isLimitExceeded\n  });\n  setStoreValue(props, {\n    model\n  });\n  return {\n    isChecked,\n    isDisabled,\n    checkboxSize,\n    model,\n    handleChange,\n    focus,\n    size\n  };\n};\n\nexport { useCheckbox, useCheckboxGroup, useCheckboxProps };","map":{"version":3,"mappings":";;;;;;;;;;AAMY,MAACA,gBAAgB,GAAG;AAC9BC,YAAU,EAAE;AACVC,QAAI,EAAE,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,CADI;AAEVC,WAAO,EAAE,MAAM,KAAK;AAFV,GADkB;AAK9BC,OAAK,EAAE;AACLL,QAAI,EAAE,CAACG,MAAD,EAASF,OAAT,EAAkBC,MAAlB,EAA0BI,MAA1B;AADD,GALuB;AAQ9BC,eAAa,EAAEN,OARe;AAS9BO,UAAQ,EAAEP,OAToB;AAU9BQ,SAAO,EAAER,OAVqB;AAW9BS,MAAI,EAAE;AACJV,QAAI,EAAEG,MADF;AAEJC,WAAO,EAAE,KAAK;AAFV,GAXwB;AAe9BO,WAAS,EAAE;AACTX,QAAI,EAAE,CAACG,MAAD,EAASD,MAAT,CADG;AAETE,WAAO,EAAE,KAAK;AAFL,GAfmB;AAmB9BQ,YAAU,EAAE;AACVZ,QAAI,EAAE,CAACG,MAAD,EAASD,MAAT,CADI;AAEVE,WAAO,EAAE,KAAK;AAFJ,GAnBkB;AAuB9BS,UAAQ,EAAE,CAACV,MAAD,EAASD,MAAT,CAvBoB;AAwB9BY,MAAI,EAAEX;AAxBwB,CAApB;;AA0BA,MAACY,gBAAgB,GAAG,MAAM;AACpC,QAAMC,MAAM,GAAGC,MAAM,CAACC,cAAD,EAAiB,EAAjB,CAArB;AACA,QAAMC,UAAU,GAAGF,MAAM,CAACG,kBAAD,EAAqB,EAArB,CAAzB;AACA,QAAMC,aAAa,GAAGJ,MAAM,CAAC,eAAD,EAAkB,EAAlB,CAA5B;AACA,QAAMK,OAAO,GAAGC,QAAQ,CAAC,MAAMF,aAAa,IAAI,CAACA,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACX,IAAhD,MAA0D,iBAAlF,CAAxB;AACA,QAAMc,cAAc,GAAGD,QAAQ,CAAC,MAAM;AACpC,WAAOJ,UAAU,CAACL,IAAlB;AACD,GAF8B,CAA/B;AAGA,SAAO;AACLQ,WADK;AAELD,iBAFK;AAGLL,UAHK;AAILQ,kBAJK;AAKLL;AALK,GAAP;AAOF,CAfY;;AAgBZ,MAAMM,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAMC,SAAS,GAAGC,GAAG,CAAC,KAAD,CAArB;AACA,QAAM;AAAEC;AAAF,MAAWC,kBAAkB,EAAnC;AACA,QAAM;AAAER,WAAF;AAAWD;AAAX,MAA6BN,gBAAgB,EAAnD;AACA,QAAMgB,eAAe,GAAGH,GAAG,CAAC,KAAD,CAA3B;AACA,QAAMI,KAAK,GAAGT,QAAQ,CAAC;AACrBU,OAAG,GAAG;AACJ,UAAIC,EAAJ,EAAQC,EAAR;;AACA,aAAOb,OAAO,CAACc,KAAR,GAAgB,CAACF,EAAE,GAAGb,aAAa,CAACtB,UAApB,KAAmC,IAAnC,GAA0C,KAAK,CAA/C,GAAmDmC,EAAE,CAACE,KAAtE,GAA8E,CAACD,EAAE,GAAGT,KAAK,CAAC3B,UAAZ,KAA2B,IAA3B,GAAkCoC,EAAlC,GAAuCR,SAAS,CAACS,KAAtI;AACD,KAJoB;;AAKrBC,OAAG,CAACC,GAAD,EAAM;AACP,UAAIJ,EAAJ;;AACA,UAAIZ,OAAO,CAACc,KAAR,IAAiBG,KAAK,CAACC,OAAN,CAAcF,GAAd,CAArB,EAAyC;AACvCP,uBAAe,CAACK,KAAhB,GAAwBf,aAAa,CAACoB,GAAd,KAAsB,KAAK,CAA3B,IAAgCH,GAAG,CAACI,MAAJ,GAAarB,aAAa,CAACoB,GAAd,CAAkBL,KAAvF;AACAL,uBAAe,CAACK,KAAhB,KAA0B,KAA1B,KAAoC,CAACF,EAAE,GAAGb,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACsB,WAArD,KAAqE,IAArE,GAA4E,KAAK,CAAjF,GAAqFT,EAAE,CAACU,IAAH,CAAQvB,aAAR,EAAuBiB,GAAvB,CAAzH;AACD,OAHD,MAGO;AACLT,YAAI,CAACgB,kBAAD,EAAqBP,GAArB,CAAJ;AACAX,iBAAS,CAACS,KAAV,GAAkBE,GAAlB;AACD;AACF;;AAdoB,GAAD,CAAtB;AAgBA,SAAO;AACLN,SADK;AAELD;AAFK,GAAP;AAID,CAzBD;;AA0BA,MAAMe,iBAAiB,GAAG,CAACpB,KAAD,EAAQ;AAAEM;AAAF,CAAR,KAAsB;AAC9C,QAAM;AAAEV,WAAF;AAAWD;AAAX,MAA6BN,gBAAgB,EAAnD;AACA,QAAMgC,KAAK,GAAGnB,GAAG,CAAC,KAAD,CAAjB;AACA,QAAMd,IAAI,GAAGkC,OAAO,CAAC3B,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAAC4B,iBAAhD,EAAmE;AAAEC,QAAI,EAAE;AAAR,GAAnE,CAApB;AACA,QAAMC,SAAS,GAAG5B,QAAQ,CAAC,MAAM;AAC/B,UAAMa,KAAK,GAAGJ,KAAK,CAACI,KAApB;;AACA,QAAIgB,YAAY,CAAChB,KAAD,CAAZ,KAAwB,kBAA5B,EAAgD;AAC9C,aAAOA,KAAP;AACD,KAFD,MAEO,IAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AAC/B,aAAOA,KAAK,CAACiB,QAAN,CAAe3B,KAAK,CAACrB,KAArB,CAAP;AACD,KAFM,MAEA,IAAI+B,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAArC,EAAwC;AAC7C,aAAOA,KAAK,KAAKV,KAAK,CAACf,SAAvB;AACD,KAFM,MAEA;AACL,aAAO,CAAC,CAACyB,KAAT;AACD;AACF,GAXyB,CAA1B;AAYA,QAAMkB,YAAY,GAAGN,OAAO,CAACzB,QAAQ,CAAC,MAAM;AAC1C,QAAIW,EAAJ;;AACA,WAAOZ,OAAO,CAACc,KAAR,GAAgB,CAACF,EAAE,GAAGb,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAAC4B,iBAArD,KAA2E,IAA3E,GAAkF,KAAK,CAAvF,GAA2Ff,EAAE,CAACE,KAA9G,GAAsH,KAAK,CAAlI;AACD,GAHoC,CAAT,CAA5B;AAIA,SAAO;AACLe,aADK;AAELJ,SAFK;AAGLjC,QAHK;AAILwC;AAJK,GAAP;AAMD,CA1BD;;AA2BA,MAAMC,WAAW,GAAG,CAAC7B,KAAD,EAAQ;AAC1BM,OAD0B;AAE1BmB;AAF0B,CAAR,KAGd;AACJ,QAAM;AAAEnC,UAAF;AAAUM,WAAV;AAAmBD;AAAnB,MAAqCN,gBAAgB,EAA3D;AACA,QAAMyC,eAAe,GAAGjC,QAAQ,CAAC,MAAM;AACrC,QAAIW,EAAJ,EAAQC,EAAR;;AACA,UAAMM,GAAG,GAAG,CAACP,EAAE,GAAGb,aAAa,CAACoB,GAApB,KAA4B,IAA5B,GAAmC,KAAK,CAAxC,GAA4CP,EAAE,CAACE,KAA3D;AACA,UAAMqB,GAAG,GAAG,CAACtB,EAAE,GAAGd,aAAa,CAACoC,GAApB,KAA4B,IAA5B,GAAmC,KAAK,CAAxC,GAA4CtB,EAAE,CAACC,KAA3D;AACA,WAAO,CAAC,EAAEK,GAAG,IAAIgB,GAAT,CAAD,IAAkBzB,KAAK,CAACI,KAAN,CAAYM,MAAZ,IAAsBD,GAAxC,IAA+C,CAACU,SAAS,CAACf,KAA1D,IAAmEJ,KAAK,CAACI,KAAN,CAAYM,MAAZ,IAAsBe,GAAtB,IAA6BN,SAAS,CAACf,KAAjH;AACD,GAL+B,CAAhC;AAMA,QAAMsB,UAAU,GAAGnC,QAAQ,CAAC,MAAM;AAChC,QAAIW,EAAJ,EAAQC,EAAR;;AACA,UAAM3B,QAAQ,GAAGkB,KAAK,CAAClB,QAAN,IAAkBQ,MAAM,CAACR,QAA1C;AACA,WAAO,CAAC2B,EAAE,GAAGb,OAAO,CAACc,KAAR,GAAgB,CAAC,CAACF,EAAE,GAAGb,aAAa,CAACb,QAApB,KAAiC,IAAjC,GAAwC,KAAK,CAA7C,GAAiD0B,EAAE,CAACE,KAArD,KAA+D5B,QAA/D,IAA2EgD,eAAe,CAACpB,KAA3G,GAAmHV,KAAK,CAAClB,QAAN,IAAkBQ,MAAM,CAACR,QAAlJ,KAA+J,IAA/J,GAAsK2B,EAAtK,GAA2K,KAAlL;AACD,GAJ0B,CAA3B;AAKA,SAAO;AACLuB,cADK;AAELF;AAFK,GAAP;AAID,CApBD;;AAqBA,MAAMG,aAAa,GAAG,CAACjC,KAAD,EAAQ;AAAEM;AAAF,CAAR,KAAsB;AAC1C,WAAS4B,UAAT,GAAsB;AACpB,QAAIrB,KAAK,CAACC,OAAN,CAAcR,KAAK,CAACI,KAApB,KAA8B,CAACJ,KAAK,CAACI,KAAN,CAAYiB,QAAZ,CAAqB3B,KAAK,CAACrB,KAA3B,CAAnC,EAAsE;AACpE2B,WAAK,CAACI,KAAN,CAAYyB,IAAZ,CAAiBnC,KAAK,CAACrB,KAAvB;AACD,KAFD,MAEO;AACL2B,WAAK,CAACI,KAAN,GAAcV,KAAK,CAACf,SAAN,IAAmB,IAAjC;AACD;AACF;;AACDe,OAAK,CAACjB,OAAN,IAAiBmD,UAAU,EAA3B;AACD,CATD;;AAUA,MAAME,QAAQ,GAAG,CAACpC,KAAD,EAAQ;AAAEK;AAAF,CAAR,KAAgC;AAC/C,QAAM;AAAEZ;AAAF,MAAiBJ,gBAAgB,EAAvC;AACA,QAAM;AAAEc;AAAF,MAAWC,kBAAkB,EAAnC;;AACA,WAASiC,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI9B,EAAJ,EAAQC,EAAR;;AACA,QAAIJ,eAAe,CAACK,KAApB,EACE;AACF,UAAM6B,MAAM,GAAGD,CAAC,CAACC,MAAjB;AACA,UAAM7B,KAAK,GAAG6B,MAAM,CAACxD,OAAP,GAAiB,CAACyB,EAAE,GAAGR,KAAK,CAACf,SAAZ,KAA0B,IAA1B,GAAiCuB,EAAjC,GAAsC,IAAvD,GAA8D,CAACC,EAAE,GAAGT,KAAK,CAACd,UAAZ,KAA2B,IAA3B,GAAkCuB,EAAlC,GAAuC,KAAnH;AACAN,QAAI,CAAC,QAAD,EAAWO,KAAX,EAAkB4B,CAAlB,CAAJ;AACD;;AACDE,OAAK,CAAC,MAAMxC,KAAK,CAAC3B,UAAb,EAAyB,MAAM;AAClC,QAAImC,EAAJ;;AACA,KAACA,EAAE,GAAGf,UAAU,CAACgD,QAAjB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8CjC,EAAE,CAACU,IAAH,CAAQzB,UAAR,EAAoB,QAApB,EAA8BiD,KAA9B,CAAqCC,GAAD,IAASC,SAAS,CAACD,GAAD,CAAtD,CAA9C;AACD,GAHI,CAAL;AAIA,SAAO;AACLN;AADK,GAAP;AAGD,CAlBD;;AAmBY,MAACQ,WAAW,GAAI7C,KAAD,IAAW;AACpC,QAAM;AAAEM,SAAF;AAASD;AAAT,MAA6BN,QAAQ,CAACC,KAAD,CAA3C;AACA,QAAM;AAAEqB,SAAF;AAASjC,QAAT;AAAeqC,aAAf;AAA0BG;AAA1B,MAA2CR,iBAAiB,CAACpB,KAAD,EAAQ;AACxEM;AADwE,GAAR,CAAlE;AAGA,QAAM;AAAE0B;AAAF,MAAiBH,WAAW,CAAC7B,KAAD,EAAQ;AAAEM,SAAF;AAASmB;AAAT,GAAR,CAAlC;AACA,QAAM;AAAEY;AAAF,MAAmBD,QAAQ,CAACpC,KAAD,EAAQ;AAAEK;AAAF,GAAR,CAAjC;AACA4B,eAAa,CAACjC,KAAD,EAAQ;AAAEM;AAAF,GAAR,CAAb;AACA,SAAO;AACLmB,aADK;AAELO,cAFK;AAGLJ,gBAHK;AAILtB,SAJK;AAKL+B,gBALK;AAMLhB,SANK;AAOLjC;AAPK,GAAP;AASF,CAjBY","names":["useCheckboxProps","modelValue","type","Boolean","Number","String","default","label","Object","indeterminate","disabled","checked","name","trueLabel","falseLabel","tabindex","size","useCheckboxGroup","elForm","inject","formContextKey","elFormItem","formItemContextKey","checkboxGroup","isGroup","computed","elFormItemSize","useModel","props","selfModel","ref","emit","getCurrentInstance","isLimitExceeded","model","get","_a","_b","value","set","val","Array","isArray","max","length","changeEvent","call","UPDATE_MODEL_EVENT","useCheckboxStatus","focus","useSize","checkboxGroupSize","prop","isChecked","toTypeString","includes","checkboxSize","useDisabled","isLimitDisabled","min","isDisabled","setStoreValue","addToStore","push","useEvent","handleChange","e","target","watch","validate","catch","err","debugWarn","useCheckbox"],"sources":["../../../../../../packages/components/checkbox/src/useCheckbox.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, ref, watch } from 'vue'\nimport { toTypeString } from '@vue/shared'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { useSize } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type { FormContext, FormItemContext } from '@element-plus/tokens'\nimport type { ICheckboxGroupInstance } from './checkbox.type'\n\nexport const useCheckboxProps = {\n  modelValue: {\n    type: [Boolean, Number, String],\n    default: () => undefined,\n  },\n  label: {\n    type: [String, Boolean, Number, Object],\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: undefined,\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  tabindex: [String, Number],\n  size: String,\n}\n\nexport type IUseCheckboxProps = ExtractPropTypes<typeof useCheckboxProps>\n\nexport const useCheckboxGroup = () => {\n  const elForm = inject(formContextKey, {} as FormContext)\n  const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n  const checkboxGroup = inject<ICheckboxGroupInstance>('CheckboxGroup', {})\n  const isGroup = computed(\n    () => checkboxGroup && checkboxGroup?.name === 'ElCheckboxGroup'\n  )\n  const elFormItemSize = computed(() => {\n    return elFormItem.size\n  })\n  return {\n    isGroup,\n    checkboxGroup,\n    elForm,\n    elFormItemSize,\n    elFormItem,\n  }\n}\n\nconst useModel = (props: IUseCheckboxProps) => {\n  const selfModel = ref(false)\n  const { emit } = getCurrentInstance()\n  const { isGroup, checkboxGroup } = useCheckboxGroup()\n  const isLimitExceeded = ref(false)\n  const model = computed({\n    get() {\n      return isGroup.value\n        ? checkboxGroup.modelValue?.value\n        : props.modelValue ?? selfModel.value\n    },\n\n    set(val: unknown) {\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value =\n          checkboxGroup.max !== undefined &&\n          val.length > checkboxGroup.max.value\n        isLimitExceeded.value === false && checkboxGroup?.changeEvent?.(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n        selfModel.value = val as boolean\n      }\n    },\n  })\n\n  return {\n    model,\n    isLimitExceeded,\n  }\n}\n\nconst useCheckboxStatus = (\n  props: IUseCheckboxProps,\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  const { isGroup, checkboxGroup } = useCheckboxGroup()\n  const focus = ref(false)\n  const size = useSize(checkboxGroup?.checkboxGroupSize, { prop: true })\n  const isChecked = computed<boolean>(() => {\n    const value = model.value\n    if (toTypeString(value) === '[object Boolean]') {\n      return value\n    } else if (Array.isArray(value)) {\n      return value.includes(props.label)\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxSize = useSize(\n    computed(() =>\n      isGroup.value ? checkboxGroup?.checkboxGroupSize?.value : undefined\n    )\n  )\n\n  return {\n    isChecked,\n    focus,\n    size,\n    checkboxSize,\n  }\n}\n\nconst useDisabled = (\n  props: IUseCheckboxProps,\n  {\n    model,\n    isChecked,\n  }: Partial<ReturnType<typeof useModel>> &\n    Partial<ReturnType<typeof useCheckboxStatus>>\n) => {\n  const { elForm, isGroup, checkboxGroup } = useCheckboxGroup()\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup.max?.value\n    const min = checkboxGroup.min?.value\n    return (\n      (!!(max || min) && model.value.length >= max && !isChecked.value) ||\n      (model.value.length <= min && isChecked.value)\n    )\n  })\n  const isDisabled = computed(() => {\n    const disabled = props.disabled || elForm.disabled\n    return (\n      (isGroup.value\n        ? checkboxGroup.disabled?.value || disabled || isLimitDisabled.value\n        : props.disabled || elForm.disabled) ?? false\n    )\n  })\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nconst setStoreValue = (\n  props: IUseCheckboxProps,\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  function addToStore() {\n    if (Array.isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label)\n    } else {\n      model.value = props.trueLabel || true\n    }\n  }\n  props.checked && addToStore()\n}\n\nconst useEvent = (\n  props: IUseCheckboxProps,\n  { isLimitExceeded }: Partial<ReturnType<typeof useModel>>\n) => {\n  const { elFormItem } = useCheckboxGroup()\n  const { emit } = getCurrentInstance()\n  function handleChange(e: InputEvent) {\n    if (isLimitExceeded.value) return\n    const target = e.target as HTMLInputElement\n    const value = target.checked\n      ? props.trueLabel ?? true\n      : props.falseLabel ?? false\n\n    emit('change', value, e)\n  }\n\n  watch(\n    () => props.modelValue,\n    () => {\n      elFormItem.validate?.('change').catch((err) => debugWarn(err))\n    }\n  )\n\n  return {\n    handleChange,\n  }\n}\n\nexport const useCheckbox = (props: IUseCheckboxProps) => {\n  const { model, isLimitExceeded } = useModel(props)\n  const { focus, size, isChecked, checkboxSize } = useCheckboxStatus(props, {\n    model,\n  })\n  const { isDisabled } = useDisabled(props, { model, isChecked })\n  const { handleChange } = useEvent(props, { isLimitExceeded })\n\n  setStoreValue(props, { model })\n\n  return {\n    isChecked,\n    isDisabled,\n    checkboxSize,\n    model,\n    handleChange,\n    focus,\n    size,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}