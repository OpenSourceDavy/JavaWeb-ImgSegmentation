{"ast":null,"code":"import { ref, provide } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { removeClass, addClass } from '../../../../utils/dom/style.mjs';\nconst dragEventsKey = Symbol(\"dragEvents\");\n\nfunction useDragNodeHandler({\n  props,\n  ctx,\n  el$,\n  dropIndicator$,\n  store\n}) {\n  const ns = useNamespace(\"tree\");\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null\n  });\n\n  const treeNodeDragStart = ({\n    event,\n    treeNode\n  }) => {\n    if (typeof props.allowDrag === \"function\" && !props.allowDrag(treeNode.node)) {\n      event.preventDefault();\n      return false;\n    }\n\n    event.dataTransfer.effectAllowed = \"move\";\n\n    try {\n      event.dataTransfer.setData(\"text/plain\", \"\");\n    } catch (e) {}\n\n    dragState.value.draggingNode = treeNode;\n    ctx.emit(\"node-drag-start\", treeNode.node, event);\n  };\n\n  const treeNodeDragOver = ({\n    event,\n    treeNode\n  }) => {\n    const dropNode = treeNode;\n    const oldDropNode = dragState.value.dropNode;\n\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, ns.is(\"drop-inner\"));\n    }\n\n    const draggingNode = dragState.value.draggingNode;\n    if (!draggingNode || !dropNode) return;\n    let dropPrev = true;\n    let dropInner = true;\n    let dropNext = true;\n    let userAllowDropInner = true;\n\n    if (typeof props.allowDrop === \"function\") {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, \"prev\");\n      userAllowDropInner = dropInner = props.allowDrop(draggingNode.node, dropNode.node, \"inner\");\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, \"next\");\n    }\n\n    event.dataTransfer.dropEffect = dropInner || dropPrev || dropNext ? \"move\" : \"none\";\n\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit(\"node-drag-leave\", draggingNode.node, oldDropNode.node, event);\n      }\n\n      ctx.emit(\"node-drag-enter\", draggingNode.node, dropNode.node, event);\n    }\n\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode;\n    }\n\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false;\n    }\n\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false;\n    }\n\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false;\n    }\n\n    if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n      dropPrev = false;\n      dropInner = false;\n      dropNext = false;\n    }\n\n    const targetPosition = dropNode.$el.getBoundingClientRect();\n    const treePosition = el$.value.getBoundingClientRect();\n    let dropType;\n    const prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n    const nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n    let indicatorTop = -9999;\n    const distance = event.clientY - targetPosition.top;\n\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = \"before\";\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = \"after\";\n    } else if (dropInner) {\n      dropType = \"inner\";\n    } else {\n      dropType = \"none\";\n    }\n\n    const iconPosition = dropNode.$el.querySelector(`.${ns.be(\"node\", \"expand-icon\")}`).getBoundingClientRect();\n    const dropIndicator = dropIndicator$.value;\n\n    if (dropType === \"before\") {\n      indicatorTop = iconPosition.top - treePosition.top;\n    } else if (dropType === \"after\") {\n      indicatorTop = iconPosition.bottom - treePosition.top;\n    }\n\n    dropIndicator.style.top = `${indicatorTop}px`;\n    dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`;\n\n    if (dropType === \"inner\") {\n      addClass(dropNode.$el, ns.is(\"drop-inner\"));\n    } else {\n      removeClass(dropNode.$el, ns.is(\"drop-inner\"));\n    }\n\n    dragState.value.showDropIndicator = dropType === \"before\" || dropType === \"after\";\n    dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;\n    dragState.value.dropType = dropType;\n    ctx.emit(\"node-drag-over\", draggingNode.node, dropNode.node, event);\n  };\n\n  const treeNodeDragEnd = event => {\n    const {\n      draggingNode,\n      dropType,\n      dropNode\n    } = dragState.value;\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = {\n        data: draggingNode.node.data\n      };\n\n      if (dropType !== \"none\") {\n        draggingNode.node.remove();\n      }\n\n      if (dropType === \"before\") {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"after\") {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"inner\") {\n        dropNode.node.insertChild(draggingNodeCopy);\n      }\n\n      if (dropType !== \"none\") {\n        store.value.registerNode(draggingNodeCopy);\n      }\n\n      removeClass(dropNode.$el, ns.is(\"drop-inner\"));\n      ctx.emit(\"node-drag-end\", draggingNode.node, dropNode.node, dropType, event);\n\n      if (dropType !== \"none\") {\n        ctx.emit(\"node-drop\", draggingNode.node, dropNode.node, dropType, event);\n      }\n    }\n\n    if (draggingNode && !dropNode) {\n      ctx.emit(\"node-drag-end\", draggingNode.node, null, dropType, event);\n    }\n\n    dragState.value.showDropIndicator = false;\n    dragState.value.draggingNode = null;\n    dragState.value.dropNode = null;\n    dragState.value.allowDrop = true;\n  };\n\n  provide(dragEventsKey, {\n    treeNodeDragStart,\n    treeNodeDragOver,\n    treeNodeDragEnd\n  });\n  return {\n    dragState\n  };\n}\n\nexport { dragEventsKey, useDragNodeHandler };","map":{"version":3,"mappings":"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","names":["dragEventsKey","Symbol","useDragNodeHandler","props","ctx","el$","dropIndicator$","store","ns","useNamespace","dragState","ref","showDropIndicator","draggingNode","dropNode","allowDrop","dropType","treeNodeDragStart","event","treeNode","allowDrag","node","preventDefault","dataTransfer","effectAllowed","setData","e","value","emit","treeNodeDragOver","oldDropNode","removeClass","$el","is","dropPrev","dropInner","dropNext","userAllowDropInner","dropEffect","nextSibling","previousSibling","contains","targetPosition","getBoundingClientRect","treePosition","prevPercent","nextPercent","indicatorTop","distance","clientY","top","height","iconPosition","querySelector","be","dropIndicator","bottom","style","left","right","addClass","treeNodeDragEnd","draggingNodeCopy","data","remove","parent","insertBefore","insertAfter","insertChild","registerNode","provide"],"sources":["../../../../../../../packages/components/tree/src/model/useDragNode.ts"],"sourcesContent":["import { provide, ref } from 'vue'\nimport { addClass, removeClass } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport type { InjectionKey } from 'vue'\nimport type Node from './node'\n\ninterface TreeNode {\n  node: Node\n  $el?: HTMLElement\n}\n\ninterface DragOptions {\n  event: DragEvent\n  treeNode: TreeNode\n}\n\nexport interface DragEvents {\n  treeNodeDragStart: (options: DragOptions) => void\n  treeNodeDragOver: (options: DragOptions) => void\n  treeNodeDragEnd: (event: DragEvent) => void\n}\n\nexport const dragEventsKey: InjectionKey<DragEvents> = Symbol('dragEvents')\n\nexport function useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {\n  const ns = useNamespace('tree')\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null,\n  })\n\n  const treeNodeDragStart = ({ event, treeNode }: DragOptions) => {\n    if (\n      typeof props.allowDrag === 'function' &&\n      !props.allowDrag(treeNode.node)\n    ) {\n      event.preventDefault()\n      return false\n    }\n    event.dataTransfer.effectAllowed = 'move'\n\n    // wrap in try catch to address IE's error when first param is 'text/plain'\n    try {\n      // setData is required for draggable to work in FireFox\n      // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n      event.dataTransfer.setData('text/plain', '')\n    } catch {}\n    dragState.value.draggingNode = treeNode\n    ctx.emit('node-drag-start', treeNode.node, event)\n  }\n\n  const treeNodeDragOver = ({ event, treeNode }: DragOptions) => {\n    const dropNode = treeNode\n    const oldDropNode = dragState.value.dropNode\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, ns.is('drop-inner'))\n    }\n    const draggingNode = dragState.value.draggingNode\n    if (!draggingNode || !dropNode) return\n\n    let dropPrev = true\n    let dropInner = true\n    let dropNext = true\n    let userAllowDropInner = true\n    if (typeof props.allowDrop === 'function') {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, 'prev')\n      userAllowDropInner = dropInner = props.allowDrop(\n        draggingNode.node,\n        dropNode.node,\n        'inner'\n      )\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, 'next')\n    }\n    event.dataTransfer.dropEffect =\n      dropInner || dropPrev || dropNext ? 'move' : 'none'\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit('node-drag-leave', draggingNode.node, oldDropNode.node, event)\n      }\n      ctx.emit('node-drag-enter', draggingNode.node, dropNode.node, event)\n    }\n\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode\n    }\n\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false\n    }\n    if (\n      draggingNode.node === dropNode.node ||\n      draggingNode.node.contains(dropNode.node)\n    ) {\n      dropPrev = false\n      dropInner = false\n      dropNext = false\n    }\n\n    const targetPosition = dropNode.$el.getBoundingClientRect()\n    const treePosition = el$.value.getBoundingClientRect()\n\n    let dropType\n    const prevPercent = dropPrev ? (dropInner ? 0.25 : dropNext ? 0.45 : 1) : -1\n    const nextPercent = dropNext ? (dropInner ? 0.75 : dropPrev ? 0.55 : 0) : 1\n\n    let indicatorTop = -9999\n    const distance = event.clientY - targetPosition.top\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = 'before'\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = 'after'\n    } else if (dropInner) {\n      dropType = 'inner'\n    } else {\n      dropType = 'none'\n    }\n\n    const iconPosition = dropNode.$el\n      .querySelector(`.${ns.be('node', 'expand-icon')}`)\n      .getBoundingClientRect()\n    const dropIndicator = dropIndicator$.value\n    if (dropType === 'before') {\n      indicatorTop = iconPosition.top - treePosition.top\n    } else if (dropType === 'after') {\n      indicatorTop = iconPosition.bottom - treePosition.top\n    }\n    dropIndicator.style.top = `${indicatorTop}px`\n    dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`\n\n    if (dropType === 'inner') {\n      addClass(dropNode.$el, ns.is('drop-inner'))\n    } else {\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n    }\n\n    dragState.value.showDropIndicator =\n      dropType === 'before' || dropType === 'after'\n    dragState.value.allowDrop =\n      dragState.value.showDropIndicator || userAllowDropInner\n    dragState.value.dropType = dropType\n    ctx.emit('node-drag-over', draggingNode.node, dropNode.node, event)\n  }\n\n  const treeNodeDragEnd = (event: DragEvent) => {\n    const { draggingNode, dropType, dropNode } = dragState.value\n    event.preventDefault()\n    event.dataTransfer.dropEffect = 'move'\n\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = { data: draggingNode.node.data }\n      if (dropType !== 'none') {\n        draggingNode.node.remove()\n      }\n      if (dropType === 'before') {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'after') {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'inner') {\n        dropNode.node.insertChild(draggingNodeCopy)\n      }\n      if (dropType !== 'none') {\n        store.value.registerNode(draggingNodeCopy)\n      }\n\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n\n      ctx.emit(\n        'node-drag-end',\n        draggingNode.node,\n        dropNode.node,\n        dropType,\n        event\n      )\n      if (dropType !== 'none') {\n        ctx.emit('node-drop', draggingNode.node, dropNode.node, dropType, event)\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit('node-drag-end', draggingNode.node, null, dropType, event)\n    }\n\n    dragState.value.showDropIndicator = false\n    dragState.value.draggingNode = null\n    dragState.value.dropNode = null\n    dragState.value.allowDrop = true\n  }\n\n  provide(dragEventsKey, {\n    treeNodeDragStart,\n    treeNodeDragOver,\n    treeNodeDragEnd,\n  })\n\n  return {\n    dragState,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}