{"ast":null,"code":"import { ref, shallowRef, watch, computed, nextTick } from 'vue';\nimport { TreeOptionsEnum, NODE_CLICK, CURRENT_CHANGE, NODE_EXPAND, NODE_COLLAPSE } from '../virtual-tree.mjs';\nimport { useCheck } from './useCheck.mjs';\nimport { useFilter } from './useFilter.mjs';\n\nfunction useTree(props, emit) {\n  const expandedKeySet = ref(new Set(props.defaultExpandedKeys));\n  const currentKey = ref();\n  const tree = shallowRef();\n  watch(() => props.currentNodeKey, key => {\n    currentKey.value = key;\n  }, {\n    immediate: true\n  });\n  watch(() => props.data, data => {\n    setData(data);\n  }, {\n    immediate: true\n  });\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  } = useCheck(props, tree);\n  const {\n    doFilter,\n    hiddenNodeKeySet,\n    isForceHiddenExpandIcon\n  } = useFilter(props, tree);\n  const valueKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.value) || TreeOptionsEnum.KEY;\n  });\n  const childrenKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.children) || TreeOptionsEnum.CHILDREN;\n  });\n  const disabledKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.disabled) || TreeOptionsEnum.DISABLED;\n  });\n  const labelKey = computed(() => {\n    var _a;\n\n    return ((_a = props.props) == null ? void 0 : _a.label) || TreeOptionsEnum.LABEL;\n  });\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const flattenNodes = [];\n    const nodes = tree.value && tree.value.treeNodes || [];\n\n    function traverse() {\n      const stack = [];\n\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i]);\n      }\n\n      while (stack.length) {\n        const node = stack.pop();\n        if (!node) continue;\n\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node);\n        }\n\n        if (expandedKeys.has(node.key)) {\n          const children = node.children;\n\n          if (children) {\n            const length = children.length;\n\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i]);\n            }\n          }\n        }\n      }\n    }\n\n    traverse();\n    return flattenNodes;\n  });\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0;\n  });\n\n  function createTree(data) {\n    const treeNodeMap = /* @__PURE__ */new Map();\n    const levelTreeNodeMap = /* @__PURE__ */new Map();\n    let maxLevel = 1;\n\n    function traverse(nodes, level = 1, parent = void 0) {\n      var _a;\n\n      const siblings = [];\n\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode);\n        const node = {\n          level,\n          key: value,\n          data: rawNode\n        };\n        node.label = getLabel(rawNode);\n        node.parent = parent;\n        const children = getChildren(rawNode);\n        node.disabled = getDisabled(rawNode);\n        node.isLeaf = !children || children.length === 0;\n\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node);\n        }\n\n        siblings.push(node);\n        treeNodeMap.set(value, node);\n\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, []);\n        }\n\n        (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);\n      }\n\n      if (level > maxLevel) {\n        maxLevel = level;\n      }\n\n      return siblings;\n    }\n\n    const treeNodes = traverse(data);\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes\n    };\n  }\n\n  function filter(query) {\n    const keys = doFilter(query);\n\n    if (keys) {\n      expandedKeySet.value = keys;\n    }\n  }\n\n  function getChildren(node) {\n    return node[childrenKey.value];\n  }\n\n  function getKey(node) {\n    if (!node) {\n      return \"\";\n    }\n\n    return node[valueKey.value];\n  }\n\n  function getDisabled(node) {\n    return node[disabledKey.value];\n  }\n\n  function getLabel(node) {\n    return node[labelKey.value];\n  }\n\n  function toggleExpand(node) {\n    const expandedKeys = expandedKeySet.value;\n\n    if (expandedKeys.has(node.key)) {\n      collapse(node);\n    } else {\n      expand(node);\n    }\n  }\n\n  function handleNodeClick(node, e) {\n    emit(NODE_CLICK, node.data, node, e);\n    handleCurrentChange(node);\n\n    if (props.expandOnClickNode) {\n      toggleExpand(node);\n    }\n\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true);\n    }\n  }\n\n  function handleCurrentChange(node) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key;\n      emit(CURRENT_CHANGE, node.data, node);\n    }\n  }\n\n  function handleNodeCheck(node, checked) {\n    toggleCheckbox(node, checked);\n  }\n\n  function expand(node) {\n    const keySet = expandedKeySet.value;\n\n    if ((tree == null ? void 0 : tree.value) && props.accordion) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      keySet.forEach(key => {\n        const node2 = treeNodeMap.get(key);\n\n        if (node2 && node2.level === node2.level) {\n          keySet.delete(key);\n        }\n      });\n    }\n\n    keySet.add(node.key);\n    emit(NODE_EXPAND, node.data, node);\n  }\n\n  function collapse(node) {\n    expandedKeySet.value.delete(node.key);\n    emit(NODE_COLLAPSE, node.data, node);\n  }\n\n  function isExpanded(node) {\n    return expandedKeySet.value.has(node.key);\n  }\n\n  function isDisabled(node) {\n    return !!node.disabled;\n  }\n\n  function isCurrent(node) {\n    const current = currentKey.value;\n    return !!current && current === node.key;\n  }\n\n  function getCurrentNode() {\n    var _a, _b;\n\n    if (!currentKey.value) return void 0;\n    return (_b = (_a = tree == null ? void 0 : tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;\n  }\n\n  function getCurrentKey() {\n    return currentKey.value;\n  }\n\n  function setCurrentKey(key) {\n    currentKey.value = key;\n  }\n\n  function setData(data) {\n    nextTick(() => tree.value = createTree(data));\n  }\n\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData\n  };\n}\n\nexport { useTree };","map":{"version":3,"mappings":"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","names":["useTree","props","emit","expandedKeySet","ref","Set","defaultExpandedKeys","currentKey","tree","shallowRef","watch","currentNodeKey","key","value","immediate","data","setData","isIndeterminate","isChecked","toggleCheckbox","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","useCheck","doFilter","hiddenNodeKeySet","isForceHiddenExpandIcon","useFilter","valueKey","computed","_a","TreeOptionsEnum","KEY","childrenKey","children","CHILDREN","disabledKey","disabled","DISABLED","labelKey","label","LABEL","flattenTree","expandedKeys","hiddenKeys","flattenNodes","nodes","treeNodes","traverse","stack","i","length","push","node","pop","has","isNotEmpty","createTree","treeNodeMap","Map","levelTreeNodeMap","maxLevel","level","parent","siblings","rawNode","getKey","getLabel","getChildren","getDisabled","isLeaf","set","get","filter","query","keys","toggleExpand","collapse","expand","handleNodeClick","e","NODE_CLICK","handleCurrentChange","expandOnClickNode","showCheckbox","checkOnClickNode","isCurrent","CURRENT_CHANGE","handleNodeCheck","checked","keySet","accordion","forEach","node2","delete","add","NODE_EXPAND","NODE_COLLAPSE","isExpanded","isDisabled","current","getCurrentNode","_b","getCurrentKey","setCurrentKey","nextTick"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useTree.ts"],"sourcesContent":["import { computed, nextTick, ref, shallowRef, watch } from 'vue'\nimport {\n  CURRENT_CHANGE,\n  NODE_CLICK,\n  NODE_COLLAPSE,\n  NODE_EXPAND,\n  TreeOptionsEnum,\n} from '../virtual-tree'\nimport { useCheck } from './useCheck'\nimport { useFilter } from './useFilter'\nimport type {\n  Tree,\n  TreeData,\n  TreeKey,\n  TreeNode,\n  TreeNodeData,\n  TreeProps,\n} from '../types'\n\nexport function useTree(props: TreeProps, emit) {\n  const expandedKeySet = ref<Set<TreeKey>>(new Set(props.defaultExpandedKeys))\n  const currentKey = ref<TreeKey | undefined>()\n  const tree = shallowRef<Tree | undefined>()\n\n  watch(\n    () => props.currentNodeKey,\n    (key) => {\n      currentKey.value = key\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.data,\n    (data: TreeData) => {\n      setData(data)\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n  } = useCheck(props, tree)\n\n  const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(\n    props,\n    tree\n  )\n\n  const valueKey = computed(() => {\n    return props.props?.value || TreeOptionsEnum.KEY\n  })\n  const childrenKey = computed(() => {\n    return props.props?.children || TreeOptionsEnum.CHILDREN\n  })\n  const disabledKey = computed(() => {\n    return props.props?.disabled || TreeOptionsEnum.DISABLED\n  })\n  const labelKey = computed(() => {\n    return props.props?.label || TreeOptionsEnum.LABEL\n  })\n\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value\n    const hiddenKeys = hiddenNodeKeySet.value\n    const flattenNodes: TreeNode[] = []\n    const nodes = (tree.value && tree.value.treeNodes) || []\n    function traverse() {\n      const stack: TreeNode[] = []\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i])\n      }\n      while (stack.length) {\n        const node = stack.pop()\n        if (!node) continue\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node)\n        }\n        // Only \"visible\" nodes will be rendered\n        if (expandedKeys.has(node.key)) {\n          const children = node.children\n          if (children) {\n            const length = children.length\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i])\n            }\n          }\n        }\n      }\n    }\n    traverse()\n    return flattenNodes\n  })\n\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0\n  })\n\n  function createTree(data: TreeData): Tree {\n    const treeNodeMap: Map<TreeKey, TreeNode> = new Map()\n    const levelTreeNodeMap: Map<number, TreeNode[]> = new Map()\n    let maxLevel = 1\n    function traverse(\n      nodes: TreeData,\n      level = 1,\n      parent: TreeNode | undefined = undefined\n    ) {\n      const siblings: TreeNode[] = []\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode)\n        const node: TreeNode = {\n          level,\n          key: value,\n          data: rawNode,\n        }\n        node.label = getLabel(rawNode)\n        node.parent = parent\n        const children = getChildren(rawNode)\n        node.disabled = getDisabled(rawNode)\n        node.isLeaf = !children || children.length === 0\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node)\n        }\n        siblings.push(node)\n        treeNodeMap.set(value, node)\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, [])\n        }\n        levelTreeNodeMap.get(level)?.push(node)\n      }\n      if (level > maxLevel) {\n        maxLevel = level\n      }\n      return siblings\n    }\n    const treeNodes: TreeNode[] = traverse(data)\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes,\n    }\n  }\n\n  function filter(query: string) {\n    const keys = doFilter(query)\n    if (keys) {\n      expandedKeySet.value = keys\n    }\n  }\n\n  function getChildren(node: TreeNodeData): TreeNodeData[] {\n    return node[childrenKey.value]\n  }\n\n  function getKey(node: TreeNodeData): TreeKey {\n    if (!node) {\n      return ''\n    }\n    return node[valueKey.value]\n  }\n\n  function getDisabled(node: TreeNodeData): boolean {\n    return node[disabledKey.value]\n  }\n\n  function getLabel(node: TreeNodeData): string {\n    return node[labelKey.value]\n  }\n\n  function toggleExpand(node: TreeNode) {\n    const expandedKeys = expandedKeySet.value\n    if (expandedKeys.has(node.key)) {\n      collapse(node)\n    } else {\n      expand(node)\n    }\n  }\n\n  function handleNodeClick(node: TreeNode, e: MouseEvent) {\n    emit(NODE_CLICK, node.data, node, e)\n    handleCurrentChange(node)\n    if (props.expandOnClickNode) {\n      toggleExpand(node)\n    }\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true)\n    }\n  }\n\n  function handleCurrentChange(node: TreeNode) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key\n      emit(CURRENT_CHANGE, node.data, node)\n    }\n  }\n\n  function handleNodeCheck(node: TreeNode, checked: boolean) {\n    toggleCheckbox(node, checked)\n  }\n\n  function expand(node: TreeNode) {\n    const keySet = expandedKeySet.value\n    if (tree?.value && props.accordion) {\n      // whether only one node among the same level can be expanded at one time\n      const { treeNodeMap } = tree.value\n      keySet.forEach((key) => {\n        const node = treeNodeMap.get(key)\n        if (node && node.level === node.level) {\n          keySet.delete(key)\n        }\n      })\n    }\n    keySet.add(node.key)\n    emit(NODE_EXPAND, node.data, node)\n  }\n\n  function collapse(node: TreeNode) {\n    expandedKeySet.value.delete(node.key)\n    emit(NODE_COLLAPSE, node.data, node)\n  }\n\n  function isExpanded(node: TreeNode): boolean {\n    return expandedKeySet.value.has(node.key)\n  }\n\n  function isDisabled(node: TreeNode): boolean {\n    return !!node.disabled\n  }\n\n  function isCurrent(node: TreeNode): boolean {\n    const current = currentKey.value\n    return !!current && current === node.key\n  }\n\n  function getCurrentNode(): TreeNodeData | undefined {\n    if (!currentKey.value) return undefined\n    return tree?.value?.treeNodeMap.get(currentKey.value)?.data\n  }\n\n  function getCurrentKey(): TreeKey | undefined {\n    return currentKey.value\n  }\n\n  function setCurrentKey(key: TreeKey): void {\n    currentKey.value = key\n  }\n\n  function setData(data: TreeData) {\n    nextTick(() => (tree.value = createTree(data)))\n  }\n\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    // expose\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}