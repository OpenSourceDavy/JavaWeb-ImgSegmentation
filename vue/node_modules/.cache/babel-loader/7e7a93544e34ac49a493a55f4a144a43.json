{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, onMounted, watch, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport '../../../../hooks/index.mjs';\nimport { getTimeLists } from './useTimePicker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../../directives/repeat-click/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  directives: {\n    repeatClick: RepeatClick\n  },\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown\n  },\n  props: {\n    role: {\n      type: String,\n      required: true\n    },\n    spinnerDate: {\n      type: Object,\n      required: true\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: \"\"\n    },\n    disabledHours: {\n      type: Function\n    },\n    disabledMinutes: {\n      type: Function\n    },\n    disabledSeconds: {\n      type: Function\n    }\n  },\n  emits: [\"change\", \"select-range\", \"set-option\"],\n\n  setup(props, ctx) {\n    const ns = useNamespace(\"time\");\n    let isScrolling = false;\n    const debouncedResetScroll = debounce(type => {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    const currentScrollbar = ref(null);\n    const listHoursRef = ref(null);\n    const listMinutesRef = ref(null);\n    const listSecondsRef = ref(null);\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    const spinnerItems = computed(() => {\n      const arr = [\"hours\", \"minutes\", \"seconds\"];\n      return props.showSeconds ? arr : arr.slice(0, 2);\n    });\n    const hours = computed(() => {\n      return props.spinnerDate.hour();\n    });\n    const minutes = computed(() => {\n      return props.spinnerDate.minute();\n    });\n    const seconds = computed(() => {\n      return props.spinnerDate.second();\n    });\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds\n    }));\n    const hoursList = computed(() => {\n      return getHoursList(props.role);\n    });\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role);\n    });\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role);\n    });\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList\n    }));\n    const arrowHourList = computed(() => {\n      const hour = hours.value;\n      return [hour > 0 ? hour - 1 : void 0, hour, hour < 23 ? hour + 1 : void 0];\n    });\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value;\n      return [minute > 0 ? minute - 1 : void 0, minute, minute < 59 ? minute + 1 : void 0];\n    });\n    const arrowSecondList = computed(() => {\n      const second = seconds.value;\n      return [second > 0 ? second - 1 : void 0, second, second < 59 ? second + 1 : void 0];\n    });\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList\n    }));\n\n    const getAmPmFlag = hour => {\n      const shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      const isCapital = props.amPmMode === \"A\";\n      let content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n\n    const emitSelectRange = type => {\n      if (type === \"hours\") {\n        ctx.emit(\"select-range\", 0, 2);\n      } else if (type === \"minutes\") {\n        ctx.emit(\"select-range\", 3, 5);\n      } else if (type === \"seconds\") {\n        ctx.emit(\"select-range\", 6, 8);\n      }\n\n      currentScrollbar.value = type;\n    };\n\n    const adjustCurrentSpinner = type => {\n      adjustSpinner(type, timePartsMap.value[type].value);\n    };\n\n    const adjustSpinners = () => {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n\n    const getScrollbarElement = el => el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return;\n      const el = listRefsMap[type];\n\n      if (el && el.$el) {\n        getScrollbarElement(el.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n\n    const typeItemHeight = type => {\n      const el = listRefsMap[type];\n      return el.$el.querySelector(\"li\").offsetHeight;\n    };\n\n    const onIncreaseClick = () => {\n      scrollDown(1);\n    };\n\n    const onDecreaseClick = () => {\n      scrollDown(-1);\n    };\n\n    const scrollDown = step => {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n\n      const label = currentScrollbar.value;\n      let now = timePartsMap.value[label].value;\n      const total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      now = (now + step + total) % total;\n      modifyDateField(label, now);\n      adjustSpinner(label, now);\n      nextTick(() => emitSelectRange(currentScrollbar.value));\n    };\n\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value;\n      const isDisabled = list[value];\n      if (isDisabled) return;\n\n      switch (type) {\n        case \"hours\":\n          ctx.emit(\"change\", props.spinnerDate.hour(value).minute(minutes.value).second(seconds.value));\n          break;\n\n        case \"minutes\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(value).second(seconds.value));\n          break;\n\n        case \"seconds\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(minutes.value).second(value));\n          break;\n      }\n    };\n\n    const handleClick = (type, {\n      value,\n      disabled\n    }) => {\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n\n    const handleScroll = type => {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      const value = Math.min(Math.round((getScrollbarElement(listRefsMap[type].$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n\n    const scrollBarHeight = type => {\n      return listRefsMap[type].$el.offsetHeight;\n    };\n\n    const bindScrollEvent = () => {\n      const bindFunction = type => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          getScrollbarElement(listRefsMap[type].$el).onscroll = () => {\n            handleScroll(type);\n          };\n        }\n      };\n\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar;\n    };\n\n    ctx.emit(\"set-option\", [`${props.role}_scrollDown`, scrollDown]);\n    ctx.emit(\"set-option\", [`${props.role}_emitSelectRange`, emitSelectRange]);\n    const {\n      getHoursList,\n      getMinutesList,\n      getSecondsList\n    } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);\n    watch(() => props.spinnerDate, () => {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return {\n      ns,\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onMouseenter\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(\"spinner\"), {\n      \"has-seconds\": _ctx.showSeconds\n    }])\n  }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createBlock(_component_el_scrollbar, {\n      key: item,\n      ref_for: true,\n      ref: scollbar => _ctx.setRef(scollbar, item),\n      class: normalizeClass(_ctx.ns.be(\"spinner\", \"wrapper\")),\n      \"wrap-style\": \"max-height: inherit;\",\n      \"view-class\": _ctx.ns.be(\"spinner\", \"list\"),\n      noresize: \"\",\n      tag: \"ul\",\n      onMouseenter: $event => _ctx.emitSelectRange(item),\n      onMousemove: $event => _ctx.adjustCurrentSpinner(item)\n    }, {\n      default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.listMap[item].value, (disabled, key) => {\n        return openBlock(), createElementBlock(\"li\", {\n          key,\n          class: normalizeClass([_ctx.ns.be(\"spinner\", \"item\"), _ctx.ns.is(\"active\", key === _ctx.timePartsMap[item].value), _ctx.ns.is(\"disabled\", disabled)]),\n          onClick: $event => _ctx.handleClick(item, {\n            value: key,\n            disabled\n          })\n        }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(key)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n          key: 1\n        }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 2112))], 10, _hoisted_1);\n      }), 128))]),\n      _: 2\n    }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n  }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: item,\n      class: normalizeClass([_ctx.ns.be(\"spinner\", \"wrapper\"), _ctx.ns.is(\"arrow\")]),\n      onMouseenter: $event => _ctx.emitSelectRange(item)\n    }, [withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: normalizeClass([\"arrow-up\", _ctx.ns.be(\"spinner\", \"arrow\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_up)]),\n      _: 1\n    }, 8, [\"class\"])), [[_directive_repeat_click, _ctx.onDecreaseClick]]), withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: normalizeClass([\"arrow-down\", _ctx.ns.be(\"spinner\", \"arrow\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    }, 8, [\"class\"])), [[_directive_repeat_click, _ctx.onIncreaseClick]]), createElementVNode(\"ul\", {\n      class: normalizeClass(_ctx.ns.be(\"spinner\", \"list\"))\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.arrowListMap[item].value, (time, key) => {\n      return openBlock(), createElementBlock(\"li\", {\n        key,\n        class: normalizeClass([_ctx.ns.be(\"spinner\", \"item\"), _ctx.ns.is(\"active\", time === _ctx.timePartsMap[item].value), _ctx.ns.is(\"disabled\", _ctx.listMap[item].value[time])])\n      }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(time)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 2112))], 2112)) : createCommentVNode(\"v-if\", true)], 2);\n    }), 128))], 2)], 42, _hoisted_2);\n  }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n}\n\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue\"]]);\n\nexport { TimeSpinner as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","directives","repeatClick","components","ElScrollbar","ElIcon","ArrowUp","ArrowDown","props","role","type","required","spinnerDate","showSeconds","default","arrowControl","amPmMode","disabledHours","disabledMinutes","disabledSeconds","emits","setup","ctx","useNamespace","isScrolling","debounce","adjustCurrentSpinner","ref","listRefsMap","hours","minutes","seconds","computed","arr","hour","minute","second","getMinutesList","value","getSecondsList","shouldShowAmPm","content","toUpperCase","currentScrollbar","adjustSpinner","timePartsMap","adjustSpinners","el","querySelector","namespace","$el","getScrollbarElement","scrollTop","Math","max","typeItemHeight","offsetHeight","onIncreaseClick","scrollDown","onDecreaseClick","step","emitSelectRange","label","total","now","modifyDateField","nextTick","listMap","isDisabled","list","emit","handleClick","disabled","debouncedResetScroll","scrollBarHeight","bindScrollEvent","onscroll","handleScroll","bindFunction","onMounted","scrollbar","getHoursList","getTimeLists","watch","ns","setRef","spinnerItems","hoursList","minutesList","arrowHourList","arrowMinuteList","arrowSecondList","getAmPmFlag","listHoursRef","listMinutesRef","listSecondsRef","secondsList","arrowListMap","_createElementBlock","class","_ctx","b","key","item","_createBlock","ref_for","scollbar","_normalizeClass","be","noresize","tag","onMouseenter","$event","onMousemove","_Fragment","_renderList","is","onClick","openBlock","slice","_toDisplayString","_openBlock","_createVNode","_createElementVNode","time"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scollbar) => setRef(scollbar, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in listMap[item].value\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartsMap[item].value),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecreaseClick\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncreaseClick\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowListMap[item].value\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartsMap[item].value),\n              ns.is('disabled', listMap[item].value[time]),\n            ]\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, nextTick, onMounted, ref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { RepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { getTimeLists } from './useTimePicker'\n\nimport type { PropType, Ref } from 'vue'\nimport type { Dayjs } from 'dayjs'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  directives: {\n    repeatClick: RepeatClick,\n  },\n\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n  },\n\n  props: {\n    role: {\n      type: String,\n      required: true,\n    },\n    spinnerDate: {\n      type: Object as PropType<Dayjs>,\n      required: true,\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true,\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: '', // 'a': am/pm; 'A': AM/PM\n    },\n    disabledHours: {\n      type: Function,\n    },\n    disabledMinutes: {\n      type: Function,\n    },\n    disabledSeconds: {\n      type: Function,\n    },\n  },\n\n  emits: ['change', 'select-range', 'set-option'],\n\n  setup(props, ctx) {\n    const ns = useNamespace('time')\n    // data\n    let isScrolling = false\n    const debouncedResetScroll = debounce((type) => {\n      isScrolling = false\n      adjustCurrentSpinner(type)\n    }, 200)\n    const currentScrollbar = ref(null)\n    const listHoursRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listMinutesRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listSecondsRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef,\n    }\n\n    // computed\n    const spinnerItems = computed(() => {\n      const arr = ['hours', 'minutes', 'seconds']\n      return props.showSeconds ? arr : arr.slice(0, 2)\n    })\n    const hours = computed(() => {\n      return props.spinnerDate.hour()\n    })\n    const minutes = computed(() => {\n      return props.spinnerDate.minute()\n    })\n    const seconds = computed(() => {\n      return props.spinnerDate.second()\n    })\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds,\n    }))\n    const hoursList = computed(() => {\n      return getHoursList(props.role)\n    })\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role)\n    })\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role)\n    })\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList,\n    }))\n    const arrowHourList = computed(() => {\n      const hour = hours.value\n      return [\n        hour > 0 ? hour - 1 : undefined,\n        hour,\n        hour < 23 ? hour + 1 : undefined,\n      ]\n    })\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value\n      return [\n        minute > 0 ? minute - 1 : undefined,\n        minute,\n        minute < 59 ? minute + 1 : undefined,\n      ]\n    })\n    const arrowSecondList = computed(() => {\n      const second = seconds.value\n      return [\n        second > 0 ? second - 1 : undefined,\n        second,\n        second < 59 ? second + 1 : undefined,\n      ]\n    })\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList,\n    }))\n    const getAmPmFlag = (hour) => {\n      const shouldShowAmPm = !!props.amPmMode\n      if (!shouldShowAmPm) return ''\n      const isCapital = props.amPmMode === 'A'\n      // todo locale\n      let content = hour < 12 ? ' am' : ' pm'\n      if (isCapital) content = content.toUpperCase()\n      return content\n    }\n\n    const emitSelectRange = (type) => {\n      if (type === 'hours') {\n        ctx.emit('select-range', 0, 2)\n      } else if (type === 'minutes') {\n        ctx.emit('select-range', 3, 5)\n      } else if (type === 'seconds') {\n        ctx.emit('select-range', 6, 8)\n      }\n      currentScrollbar.value = type\n    }\n\n    const adjustCurrentSpinner = (type) => {\n      adjustSpinner(type, timePartsMap.value[type].value)\n    }\n\n    // NOTE: used by datetime / date-range panel\n    //       renamed from adjustScrollTop\n    //       should try to refactory it\n    const adjustSpinners = () => {\n      adjustCurrentSpinner('hours')\n      adjustCurrentSpinner('minutes')\n      adjustCurrentSpinner('seconds')\n    }\n\n    const getScrollbarElement = (el: HTMLElement) =>\n      el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return\n      const el = listRefsMap[type]\n      if (el && el.$el) {\n        getScrollbarElement(el.$el).scrollTop = Math.max(\n          0,\n          value * typeItemHeight(type)\n        )\n      }\n    }\n\n    const typeItemHeight = (type) => {\n      const el = listRefsMap[type]\n      return el.$el.querySelector('li').offsetHeight\n    }\n\n    const onIncreaseClick = () => {\n      scrollDown(1)\n    }\n\n    const onDecreaseClick = () => {\n      scrollDown(-1)\n    }\n\n    const scrollDown = (step) => {\n      if (!currentScrollbar.value) {\n        emitSelectRange('hours')\n      }\n\n      const label = currentScrollbar.value\n      let now = timePartsMap.value[label].value\n      const total = currentScrollbar.value === 'hours' ? 24 : 60\n      now = (now + step + total) % total\n\n      modifyDateField(label, now)\n      adjustSpinner(label, now)\n      nextTick(() => emitSelectRange(currentScrollbar.value))\n    }\n\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value\n      const isDisabled = list[value]\n      if (isDisabled) return\n      switch (type) {\n        case 'hours':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(value)\n              .minute(minutes.value)\n              .second(seconds.value)\n          )\n          break\n        case 'minutes':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(value)\n              .second(seconds.value)\n          )\n          break\n        case 'seconds':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(minutes.value)\n              .second(value)\n          )\n          break\n      }\n    }\n\n    const handleClick = (type, { value, disabled }) => {\n      if (!disabled) {\n        modifyDateField(type, value)\n        emitSelectRange(type)\n        adjustSpinner(type, value)\n      }\n    }\n\n    const handleScroll = (type) => {\n      isScrolling = true\n      debouncedResetScroll(type)\n      const value = Math.min(\n        Math.round(\n          (getScrollbarElement(listRefsMap[type].$el).scrollTop -\n            (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n            3) /\n            typeItemHeight(type)\n        ),\n        type === 'hours' ? 23 : 59\n      )\n      modifyDateField(type, value)\n    }\n\n    const scrollBarHeight = (type) => {\n      return listRefsMap[type].$el.offsetHeight\n    }\n\n    const bindScrollEvent = () => {\n      const bindFunction = (type) => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          getScrollbarElement(listRefsMap[type].$el).onscroll = () => {\n            // TODO: scroll is emitted when set scrollTop programatically\n            // should find better solutions in the future!\n            handleScroll(type)\n          }\n        }\n      }\n      bindFunction('hours')\n      bindFunction('minutes')\n      bindFunction('seconds')\n    }\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent()\n        adjustSpinners()\n        // set selection on the first hour part\n        if (props.role === 'start') emitSelectRange('hours')\n      })\n    })\n\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar\n    }\n\n    ctx.emit('set-option', [`${props.role}_scrollDown`, scrollDown])\n    ctx.emit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\n    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n      props.disabledHours,\n      props.disabledMinutes,\n      props.disabledSeconds\n    )\n\n    watch(\n      () => props.spinnerDate,\n      () => {\n        if (isScrolling) return\n        adjustSpinners()\n      }\n    )\n\n    return {\n      ns,\n\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}