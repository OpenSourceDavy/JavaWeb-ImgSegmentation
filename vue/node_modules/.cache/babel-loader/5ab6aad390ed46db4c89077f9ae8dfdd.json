{"ast":null,"code":"let history = [];\n\nfunction Point(x, y, type) {\n  this.x = x;\n  this.y = y;\n  this.type = type; // 左击 1  右击 3\n}\n\nfunction windowToCanvas(e, mycanvas) {\n  // 返回元素的大小以及位置\n  var rect = mycanvas.getBoundingClientRect(); // rect 的宽度会加上 canvas 的 border 会影响精度\n\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width), e.offsetY - rect.top * (mycanvas.height / rect.height), e.which);\n}\n\nfunction showLastHistory(ctx, history) {\n  ctx.putImageData(history[history.length - 1].data, 0, 0);\n}\n\nfunction addHistoy(history, ctx, mycanvas) {\n  console.log(\"存历史\");\n  console.log(history);\n  history.push({\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\n  });\n}\n\nexport default {\n  name: \"Canvas\",\n\n  data() {\n    return {\n      ctx: null,\n      tool: '',\n      tempPos: [],\n      posArray: [],\n      tools: [{\n        value: \"1\",\n        label: \"矩形\"\n      }, {\n        value: \"2\",\n        label: \"圆形\"\n      }, {\n        value: \"3\",\n        label: \"直线\"\n      }, {\n        value: \"4\",\n        label: \"任意多边形\"\n      }, {\n        value: \"5\",\n        label: \"点\"\n      }]\n    };\n  },\n\n  mounted() {\n    //this.init();\n    let mycanvas = this.$refs.cont;\n    this.ctx = mycanvas.getContext('2d');\n    let img = new Image();\n    img.src = \"http://localhost:9090/files/e50447f9b08a42ce9682ed9420c3d38c\";\n    mycanvas.width = window.screen.width * 0.5;\n    mycanvas.height = window.screen.height * 0.75;\n    this.tool = '1';\n    this.drawer();\n  },\n\n  methods: {\n    handleEvent(e) {\n      //console.log(e)\n      this.drawer();\n    },\n\n    changeTool() {\n      this.drawer();\n    },\n\n    init() {\n      this.ctx = this.$refs.cont.getContext('2d');\n    },\n\n    // 绘制矩形\n    drawerRect(ctx, left, top, w, h) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '0.5'; // 画笔粗细\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(left, top, w, h);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [left, top, w, h]\n      };\n    },\n\n    // 绘制圆\n    drawerCircle(ctx, x, y, r) {\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.lineWidth = '0.5'; // 画笔粗细\n\n      ctx.beginPath(); // 开始路径\n\n      ctx.arc(x, y, r, 0, Math.PI * 2, true); // 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\n\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, r]\n      };\n    },\n\n    // 绘制直线\n    drawerLine(ctx, x, y, z, n) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.lineWidth = '0.5'; // 画笔粗细\n\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(z, n);\n      ctx.stroke();\n      ctx.restore();\n      return {\n        data: [x, y, z, n]\n      };\n    },\n\n    // 绘制点\n    drawerPoint(ctx, x, y) {\n      ctx.save();\n      ctx.fillStyle = '#f00000';\n      ctx.strokeStyle = '#f00000'; // 画笔颜色\n\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n      this.posArray.push({\n        data: [x, y]\n      });\n    },\n\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\n    drawer() {\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      let that = this;\n      console.log(this.tool);\n\n      if (this.tool === '1') {\n        //画矩形\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let w = Math.abs(point.x - mousedown.x);\n            let h = Math.abs(point.y - mousedown.y);\n            let left = point.x > mousedown.x ? mousedown.x : point.x;\n            let top = point.y > mousedown.y ? mousedown.y : point.y;\n            let pos = that.drawerRect(ctx, left, top, w, h);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '2') {\n        // 画圆\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let rx = (point.x - mousedown.x) / 2;\n            let ry = (point.y - mousedown.y) / 2;\n            let r = Math.sqrt(rx * rx + ry * ry);\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '3') {\n        //画直线\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n        mycanvas.onclick = null;\n\n        mycanvas.onmousedown = function (e) {\n          that.tempPos = [];\n          e.preventDefault();\n          let mousedown = windowToCanvas(e, mycanvas);\n          console.log(\"鼠标点击\");\n          console.log(mousedown);\n\n          mycanvas.onmousemove = function (e) {\n            e.preventDefault();\n            showLastHistory(ctx, history); // 每次绘制先清除上一次\n\n            let point = windowToCanvas(e, mycanvas);\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y);\n            that.tempPos.push(pos);\n          };\n\n          mycanvas.onmouseup = function (e) {\n            let mouseup = windowToCanvas(e, mycanvas);\n            console.log(\"鼠标松开\");\n            console.log(mouseup);\n            e.preventDefault(); //addHistoy(history, ctx, mycanvas) // 保存上一次数据\n\n            mycanvas.onmousemove = null;\n            that.posArray.push(that.tempPos[that.tempPos.length - 1]);\n          };\n        };\n\n        addHistoy(history, ctx, mycanvas); // 添加一张默认的数据\n      } else if (this.tool === '4') {//画多边形\n      } else if (this.tool === '5') {\n        //画点\n        mycanvas.onmousedown = null;\n        mycanvas.onmousemove = null;\n        mycanvas.onmouseup = null;\n\n        mycanvas.onclick = function (event) {\n          let rect = mycanvas.getBoundingClientRect();\n          let CanvasPos = {\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\n          };\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y);\n        };\n      }\n    },\n\n    // 重置\n    resetMap() {\n      // 标注的信息都放在这个数组中\n      this.posArray = [];\n      history = [history[0]];\n      let mycanvas = this.$refs.cont;\n      let ctx = mycanvas.getContext('2d');\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height);\n      addHistoy(history, ctx, mycanvas);\n    },\n\n    // 取消上一步操作\n    cancel() {\n      if (history.length > 1) {\n        console.log(\"取消上一步\");\n        console.log(history);\n        this.posArray.pop();\n        history.pop();\n        let mycanvas = this.$refs.cont;\n        let ctx = mycanvas.getContext('2d');\n        showLastHistory(ctx, history);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["history","Point","x","y","type","windowToCanvas","e","mycanvas","rect","getBoundingClientRect","offsetX","left","width","offsetY","top","height","which","showLastHistory","ctx","putImageData","length","data","addHistoy","console","log","push","getImageData","name","tool","tempPos","posArray","tools","value","label","mounted","$refs","cont","getContext","img","Image","src","window","screen","drawer","methods","handleEvent","changeTool","init","drawerRect","w","h","strokeStyle","lineWidth","save","beginPath","stroke","restore","drawerCircle","r","arc","Math","PI","drawerLine","z","n","fillStyle","moveTo","lineTo","drawerPoint","closePath","fill","that","onclick","onmousedown","preventDefault","mousedown","onmousemove","point","abs","pos","onmouseup","rx","ry","sqrt","mouseup","event","CanvasPos","clientX","clientY","resetMap","clearRect","cancel","pop"],"sourceRoot":"","sources":["G:\\springboot+vue\\crm_vue\\vue\\src\\views\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!--canvas居中：display设置为block-->\r\n    <canvas ref=\"cont\" style=\"border: 2px solid #aaaaaa;display: block;\"\r\n      @click=\"handleEvent\"\r\n    >\r\n    </canvas>\r\n  </div>\r\n  <div style=\"margin: 10px 0px;display: block\">\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"cancel\">撤销</el-button>\r\n    <el-button type=\"primary\" style=\"margin-left: 5px;text-align:right;\" @click=\"resetMap\">清空</el-button>\r\n    <span style=\"margin-left: 5px\">选择绘制图案：</span>\r\n    <el-select v-model=\"tool\" clearable @change=\"changeTool\"\r\n               size=\"small\">\r\n      <el-option\r\n          v-for=\"item in tools\"\r\n          :key=\"item.value\"\r\n          :label=\"item.label\"\r\n          :value=\"item.value\">\r\n      </el-option>\r\n    </el-select>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nlet history = []\r\nfunction Point (x, y, type) {\r\n  this.x = x\r\n  this.y = y\r\n  this.type = type // 左击 1  右击 3\r\n}\r\nfunction windowToCanvas (e, mycanvas) {\r\n  // 返回元素的大小以及位置\r\n  var rect = mycanvas.getBoundingClientRect()\r\n  // rect 的宽度会加上 canvas 的 border 会影响精度\r\n  return new Point(e.offsetX - rect.left * (mycanvas.width / rect.width),\r\n      e.offsetY - rect.top * (mycanvas.height / rect.height), e.which)\r\n}\r\nfunction showLastHistory (ctx, history) {\r\n  ctx.putImageData(history[history.length -1].data, 0, 0)\r\n}\r\nfunction addHistoy (history, ctx, mycanvas) {\r\n  console.log(\"存历史\")\r\n  console.log(history)\r\n  history.push({\r\n    data: ctx.getImageData(0, 0, mycanvas.width, mycanvas.height)\r\n  })\r\n}\r\nexport default {\r\n  name: \"Canvas\",\r\n  data(){\r\n    return{\r\n      ctx:null,\r\n      tool:'',\r\n      tempPos:[],\r\n      posArray:[],\r\n      tools:[\r\n        {value:\"1\", label:\"矩形\"},\r\n        {value:\"2\", label:\"圆形\"},\r\n        {value:\"3\", label:\"直线\"},\r\n        {value:\"4\", label:\"任意多边形\"},\r\n        {value:\"5\", label:\"点\"},\r\n      ],\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //this.init();\r\n    let mycanvas = this.$refs.cont\r\n    this.ctx = mycanvas.getContext('2d');\r\n    let img = new Image();\r\n    img.src = \"http://localhost:9090/files/e50447f9b08a42ce9682ed9420c3d38c\";\r\n    mycanvas.width = (window.screen.width)*0.5\r\n    mycanvas.height = (window.screen.height)*0.75\r\n    this.tool = '1';\r\n    this.drawer();\r\n  },\r\n\r\n  methods:{\r\n\r\n    handleEvent(e){\r\n      //console.log(e)\r\n      this.drawer();\r\n    },\r\n    changeTool(){\r\n      this.drawer();\r\n    },\r\n\r\n    init(){\r\n      this.ctx = this.$refs.cont.getContext('2d');\r\n    },\r\n\r\n    // 绘制矩形\r\n    drawerRect (ctx, left, top, w, h) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '0.5' // 画笔粗细\r\n      ctx.save()\r\n      ctx.beginPath()\r\n      ctx.rect(left, top, w, h)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [left, top, w, h]\r\n      }\r\n    },\r\n    // 绘制圆\r\n    drawerCircle (ctx, x, y, r) {\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.lineWidth = '0.5' // 画笔粗细\r\n      ctx.beginPath()// 开始路径\r\n      ctx.arc(x, y, r, 0, Math.PI * 2, true)// 参数依次为圆心坐标x,y，半径，开始结束角，绘制方向顺时针\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, r]\r\n      }\r\n    },\r\n    // 绘制直线\r\n    drawerLine (ctx, x, y, z, n) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.lineWidth = '0.5' // 画笔粗细\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.moveTo(x, y)\r\n      ctx.lineTo(z, n)\r\n      ctx.stroke()\r\n      ctx.restore()\r\n      return {\r\n        data: [x, y, z, n]\r\n      }\r\n    },\r\n    // 绘制点\r\n    drawerPoint (ctx, x, y) {\r\n      ctx.save()\r\n      ctx.fillStyle = '#f00000'\r\n      ctx.strokeStyle = '#f00000'// 画笔颜色\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2, true)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n      ctx.restore()\r\n      this.posArray.push({data: [x, y]})\r\n    },\r\n\r\n    // 绘制的方法及事件，根据当前选择的工具进行不同的方法绘制图形\r\n    drawer () {\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      let that = this\r\n      console.log(this.tool)\r\n      if (this.tool === '1') {\r\n        //画矩形\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let w = Math.abs(point.x - mousedown.x)\r\n            let h = Math.abs(point.y - mousedown.y)\r\n            let left = point.x > mousedown.x ? mousedown.x : point.x\r\n            let top = point.y > mousedown.y ? mousedown.y : point.y\r\n            let pos = that.drawerRect(ctx, left, top, w, h)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '2') {\r\n        // 画圆\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let rx = (point.x - mousedown.x) / 2\r\n            let ry = (point.y - mousedown.y) / 2\r\n            let r = Math.sqrt(rx * rx + ry * ry)\r\n            let pos = that.drawerCircle(ctx, rx + mousedown.x, ry + mousedown.y, r)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '3') {\r\n        //画直线\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = null\r\n        mycanvas.onmousedown = function (e) {\r\n          that.tempPos = []\r\n          e.preventDefault()\r\n          let mousedown = windowToCanvas(e, mycanvas)\r\n          console.log(\"鼠标点击\")\r\n          console.log(mousedown)\r\n          mycanvas.onmousemove = function (e) {\r\n            e.preventDefault()\r\n            showLastHistory(ctx, history) // 每次绘制先清除上一次\r\n            let point = windowToCanvas(e, mycanvas)\r\n            let pos = that.drawerLine(ctx, mousedown.x, mousedown.y, point.x, point.y)\r\n            that.tempPos.push(pos)\r\n          }\r\n          mycanvas.onmouseup = function (e) {\r\n            let mouseup = windowToCanvas(e, mycanvas)\r\n            console.log(\"鼠标松开\")\r\n            console.log(mouseup)\r\n            e.preventDefault()\r\n            //addHistoy(history, ctx, mycanvas) // 保存上一次数据\r\n            mycanvas.onmousemove = null\r\n            that.posArray.push(that.tempPos[that.tempPos.length - 1])\r\n          }\r\n        }\r\n        addHistoy(history, ctx, mycanvas) // 添加一张默认的数据\r\n      } else if (this.tool === '4') {\r\n        //画多边形\r\n\r\n      } else if (this.tool === '5') {\r\n        //画点\r\n        mycanvas.onmousedown = null\r\n        mycanvas.onmousemove = null\r\n        mycanvas.onmouseup = null\r\n        mycanvas.onclick = function (event) {\r\n          let rect = mycanvas.getBoundingClientRect()\r\n          let CanvasPos = {\r\n            x: event.clientX - rect.left * (mycanvas.width / rect.width),\r\n            y: event.clientY - rect.top * (mycanvas.height / rect.height)\r\n          }\r\n          that.drawerPoint(ctx, CanvasPos.x, CanvasPos.y)\r\n        }\r\n      }\r\n    },\r\n\r\n    // 重置\r\n    resetMap () {\r\n      // 标注的信息都放在这个数组中\r\n      this.posArray = []\r\n      history = [history[0]]\r\n      let mycanvas = this.$refs.cont\r\n      let ctx = mycanvas.getContext('2d')\r\n      ctx.clearRect(0, 0, mycanvas.width, mycanvas.height)\r\n      addHistoy(history, ctx, mycanvas)\r\n    },\r\n    // 取消上一步操作\r\n    cancel () {\r\n      if (history.length > 1) {\r\n        console.log(\"取消上一步\")\r\n        console.log(history)\r\n        this.posArray.pop()\r\n        history.pop()\r\n        let mycanvas = this.$refs.cont\r\n        let ctx = mycanvas.getContext('2d')\r\n        showLastHistory(ctx, history)\r\n      }\r\n    },\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}