{"ast":null,"code":"import { h } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowRight, Loading } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport { getProp } from '../../../utils/objects.mjs';\nconst defaultClassNames = {\n  selection: \"table-column--selection\",\n  expand: \"table__expand-column\"\n};\nconst cellStarts = {\n  default: {\n    order: \"\"\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  }\n};\n\nconst getDefaultClassName = type => {\n  return defaultClassNames[type] || \"\";\n};\n\nconst cellForced = {\n  selection: {\n    renderHeader({\n      store\n    }) {\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0;\n      }\n\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,\n        \"onUpdate:modelValue\": store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value\n      });\n    },\n\n    renderCell({\n      row,\n      column,\n      store,\n      $index\n    }) {\n      return h(ElCheckbox, {\n        disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,\n        size: store.states.tableSize.value,\n        onChange: () => {\n          store.commit(\"rowSelectedChanged\", row);\n        },\n        onClick: event => event.stopPropagation(),\n        modelValue: store.isSelected(row)\n      });\n    },\n\n    sortable: false,\n    resizable: false\n  },\n  index: {\n    renderHeader({\n      column\n    }) {\n      return column.label || \"#\";\n    },\n\n    renderCell({\n      column,\n      $index\n    }) {\n      let i = $index + 1;\n      const index = column.index;\n\n      if (typeof index === \"number\") {\n        i = $index + index;\n      } else if (typeof index === \"function\") {\n        i = index($index);\n      }\n\n      return h(\"div\", {}, [i]);\n    },\n\n    sortable: false\n  },\n  expand: {\n    renderHeader({\n      column\n    }) {\n      return column.label || \"\";\n    },\n\n    renderCell({\n      row,\n      store,\n      expanded\n    }) {\n      const {\n        ns\n      } = store;\n      const classes = [ns.e(\"expand-icon\")];\n\n      if (expanded) {\n        classes.push(ns.em(\"expand-icon\", \"expanded\"));\n      }\n\n      const callback = function (e) {\n        e.stopPropagation();\n        store.toggleRowExpansion(row);\n      };\n\n      return h(\"div\", {\n        class: classes,\n        onClick: callback\n      }, {\n        default: () => {\n          return [h(ElIcon, null, {\n            default: () => {\n              return [h(ArrowRight)];\n            }\n          })];\n        }\n      });\n    },\n\n    sortable: false,\n    resizable: false\n  }\n};\n\nfunction defaultRenderCell({\n  row,\n  column,\n  $index\n}) {\n  var _a;\n\n  const property = column.property;\n  const value = property && getProp(row, property).value;\n\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index);\n  }\n\n  return ((_a = value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) || \"\";\n}\n\nfunction treeCellPrefix({\n  row,\n  treeNode,\n  store\n}, createPlacehoder = false) {\n  const {\n    ns\n  } = store;\n\n  if (!treeNode) {\n    if (createPlacehoder) {\n      return [h(\"span\", {\n        class: ns.e(\"placeholder\")\n      })];\n    }\n\n    return null;\n  }\n\n  const ele = [];\n\n  const callback = function (e) {\n    e.stopPropagation();\n    store.loadOrToggle(row);\n  };\n\n  if (treeNode.indent) {\n    ele.push(h(\"span\", {\n      class: ns.e(\"indent\"),\n      style: {\n        \"padding-left\": `${treeNode.indent}px`\n      }\n    }));\n  }\n\n  if (typeof treeNode.expanded === \"boolean\" && !treeNode.noLazyChildren) {\n    const expandClasses = [ns.e(\"expand-icon\"), treeNode.expanded ? ns.em(\"expand-icon\", \"expanded\") : \"\"];\n    let icon = ArrowRight;\n\n    if (treeNode.loading) {\n      icon = Loading;\n    }\n\n    ele.push(h(\"div\", {\n      class: expandClasses,\n      onClick: callback\n    }, {\n      default: () => {\n        return [h(ElIcon, {\n          class: {\n            [ns.is(\"loading\")]: treeNode.loading\n          }\n        }, {\n          default: () => [h(icon)]\n        })];\n      }\n    }));\n  } else {\n    ele.push(h(\"span\", {\n      class: ns.e(\"placeholder\")\n    }));\n  }\n\n  return ele;\n}\n\nexport { cellForced, cellStarts, defaultRenderCell, getDefaultClassName, treeCellPrefix };","map":{"version":3,"mappings":"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","names":["defaultClassNames","selection","expand","cellStarts","default","order","width","minWidth","realWidth","index","getDefaultClassName","type","cellForced","renderHeader","store","isDisabled","states","data","value","length","h","ElCheckbox","disabled","size","tableSize","indeterminate","isAllSelected","toggleAllSelection","modelValue","renderCell","row","column","$index","selectable","call","onChange","commit","onClick","event","stopPropagation","isSelected","sortable","resizable","label","i","expanded","ns","classes","e","push","em","callback","toggleRowExpansion","class","ElIcon","ArrowRight","defaultRenderCell","_a","property","getProp","formatter","toString","treeCellPrefix","treeNode","createPlacehoder","ele","loadOrToggle","indent","style","noLazyChildren","expandClasses","icon","loading","Loading","is"],"sources":["../../../../../../packages/components/table/src/config.ts"],"sourcesContent":["import { h } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowRight, Loading } from '@element-plus/icons-vue'\nimport { getProp } from '@element-plus/utils'\n\nimport type { VNode } from 'vue'\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { Store } from './store'\nimport type { TreeNode } from './table/defaults'\n\nconst defaultClassNames = {\n  selection: 'table-column--selection',\n  expand: 'table__expand-column',\n}\n\nexport const cellStarts = {\n  default: {\n    order: '',\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n}\n\nexport const getDefaultClassName = (type) => {\n  return defaultClassNames[type] || ''\n}\n\n// 这些选项不应该被覆盖\nexport const cellForced = {\n  selection: {\n    renderHeader<T>({ store }: { store: Store<T> }) {\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0\n      }\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate:\n          store.states.selection.value.length > 0 &&\n          !store.states.isAllSelected.value,\n        'onUpdate:modelValue': store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value,\n      })\n    },\n    renderCell<T>({\n      row,\n      column,\n      store,\n      $index,\n    }: {\n      row: T\n      column: TableColumnCtx<T>\n      store: Store<T>\n      $index: string\n    }) {\n      return h(ElCheckbox, {\n        disabled: column.selectable\n          ? !column.selectable.call(null, row, $index)\n          : false,\n        size: store.states.tableSize.value,\n        onChange: () => {\n          store.commit('rowSelectedChanged', row)\n        },\n        onClick: (event: Event) => event.stopPropagation(),\n        modelValue: store.isSelected(row),\n      })\n    },\n    sortable: false,\n    resizable: false,\n  },\n  index: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || '#'\n    },\n    renderCell<T>({\n      column,\n      $index,\n    }: {\n      column: TableColumnCtx<T>\n      $index: number\n    }) {\n      let i = $index + 1\n      const index = column.index\n\n      if (typeof index === 'number') {\n        i = $index + index\n      } else if (typeof index === 'function') {\n        i = index($index)\n      }\n      return h('div', {}, [i])\n    },\n    sortable: false,\n  },\n  expand: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || ''\n    },\n    renderCell<T>({\n      row,\n      store,\n      expanded,\n    }: {\n      row: T\n      store: Store<T>\n      expanded: boolean\n    }) {\n      const { ns } = store\n      const classes = [ns.e('expand-icon')]\n      if (expanded) {\n        classes.push(ns.em('expand-icon', 'expanded'))\n      }\n      const callback = function (e: Event) {\n        e.stopPropagation()\n        store.toggleRowExpansion(row)\n      }\n      return h(\n        'div',\n        {\n          class: classes,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(ElIcon, null, {\n                default: () => {\n                  return [h(ArrowRight)]\n                },\n              }),\n            ]\n          },\n        }\n      )\n    },\n    sortable: false,\n    resizable: false,\n  },\n}\n\nexport function defaultRenderCell<T>({\n  row,\n  column,\n  $index,\n}: {\n  row: T\n  column: TableColumnCtx<T>\n  $index: number\n}) {\n  const property = column.property\n  const value = property && getProp(row, property).value\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index)\n  }\n  return value?.toString?.() || ''\n}\n\nexport function treeCellPrefix<T>(\n  {\n    row,\n    treeNode,\n    store,\n  }: {\n    row: T\n    treeNode: TreeNode\n    store: Store<T>\n  },\n  createPlacehoder = false\n) {\n  const { ns } = store\n  if (!treeNode) {\n    if (createPlacehoder) {\n      return [\n        h('span', {\n          class: ns.e('placeholder'),\n        }),\n      ]\n    }\n    return null\n  }\n  const ele: VNode[] = []\n  const callback = function (e) {\n    e.stopPropagation()\n    store.loadOrToggle(row)\n  }\n  if (treeNode.indent) {\n    ele.push(\n      h('span', {\n        class: ns.e('indent'),\n        style: { 'padding-left': `${treeNode.indent}px` },\n      })\n    )\n  }\n  if (typeof treeNode.expanded === 'boolean' && !treeNode.noLazyChildren) {\n    const expandClasses = [\n      ns.e('expand-icon'),\n      treeNode.expanded ? ns.em('expand-icon', 'expanded') : '',\n    ]\n    let icon = ArrowRight\n    if (treeNode.loading) {\n      icon = Loading\n    }\n\n    ele.push(\n      h(\n        'div',\n        {\n          class: expandClasses,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(\n                ElIcon,\n                { class: { [ns.is('loading')]: treeNode.loading } },\n                {\n                  default: () => [h(icon)],\n                }\n              ),\n            ]\n          },\n        }\n      )\n    )\n  } else {\n    ele.push(\n      h('span', {\n        class: ns.e('placeholder'),\n      })\n    )\n  }\n  return ele\n}\n"]},"metadata":{},"sourceType":"module"}