{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, toDisplayString, createCommentVNode, Fragment, renderList, createVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport ElDatePickerCell from './basic-cell-render.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\n\nconst _sfc_main = defineComponent({\n  components: {\n    ElDatePickerCell\n  },\n  props: {\n    date: {\n      type: Object\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    parsedValue: {\n      type: [Object, Array]\n    },\n    selectionMode: {\n      type: String,\n      default: \"day\"\n    },\n    showWeekNumber: {\n      type: Boolean,\n      default: false\n    },\n    disabledDate: {\n      type: Function\n    },\n    cellClassName: {\n      type: Function\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false\n      })\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const lastRow = ref(null);\n    const lastColumn = ref(null);\n    const tableRows = ref([[], [], [], [], [], []]);\n    const firstDayOfWeek = props.date.$locale().weekStart || 7;\n    const WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map(_ => _.toLowerCase());\n    const offsetDay = computed(() => {\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n    });\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf(\"month\");\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n    });\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n    });\n    const rows = computed(() => {\n      var _a;\n\n      const startOfMonth = props.date.startOf(\"month\");\n      const startOfMonthDay = startOfMonth.day() || 7;\n      const dateCountOfMonth = startOfMonth.daysInMonth();\n      const dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n      const offset = offsetDay.value;\n      const rows_ = tableRows.value;\n      let count = 1;\n      const selectedDate = props.selectionMode === \"dates\" ? castArray(props.parsedValue) : [];\n      const calNow = dayjs().locale(lang.value).startOf(\"day\");\n\n      for (let i = 0; i < 6; i++) {\n        const row = rows_[i];\n\n        if (props.showWeekNumber) {\n          if (!row[0]) {\n            row[0] = {\n              type: \"week\",\n              text: startDate.value.add(i * 7 + 1, \"day\").week()\n            };\n          }\n        }\n\n        for (let j = 0; j < 7; j++) {\n          let cell = row[props.showWeekNumber ? j + 1 : j];\n\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n\n          const index = i * 7 + j;\n          const calTime = startDate.value.add(index - offset, \"day\");\n          cell.dayjs = calTime;\n          cell.date = calTime.toDate();\n          cell.timestamp = calTime.valueOf();\n          cell.type = \"normal\";\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"day\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"day\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"day\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"day\");\n\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"day\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"day\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"day\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"day\");\n          }\n\n          const isToday = calTime.isSame(calNow, \"day\");\n\n          if (isToday) {\n            cell.type = \"today\";\n          }\n\n          if (i >= 0 && i <= 1) {\n            const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n\n            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j % 7) + 1 + i * 7;\n              cell.type = \"prev-month\";\n            }\n          } else {\n            if (count <= dateCountOfMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = count++ - dateCountOfMonth;\n              cell.type = \"next-month\";\n            }\n          }\n\n          const cellDate = calTime.toDate();\n          cell.selected = selectedDate.find(_ => _.valueOf() === calTime.valueOf());\n          cell.isSelected = !!cell.selected;\n          cell.isCurrent = isCurrent(cell);\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          cell.customClass = props.cellClassName && props.cellClassName(cellDate);\n          row[props.showWeekNumber ? j + 1 : j] = cell;\n        }\n\n        if (props.selectionMode === \"week\") {\n          const start = props.showWeekNumber ? 1 : 0;\n          const end = props.showWeekNumber ? 7 : 6;\n          const isActive = isWeekActive(row[start + 1]);\n          row[start].inRange = isActive;\n          row[start].start = isActive;\n          row[end].inRange = isActive;\n          row[end].end = isActive;\n        }\n      }\n\n      return rows_;\n    });\n\n    const isCurrent = cell => {\n      return props.selectionMode === \"day\" && (cell.type === \"normal\" || cell.type === \"today\") && cellMatchesDate(cell, props.parsedValue);\n    };\n\n    const cellMatchesDate = (cell, date) => {\n      if (!date) return false;\n      return dayjs(date).locale(lang.value).isSame(props.date.date(Number(cell.text)), \"day\");\n    };\n\n    const getCellClasses = cell => {\n      const classes = [];\n\n      if ((cell.type === \"normal\" || cell.type === \"today\") && !cell.disabled) {\n        classes.push(\"available\");\n\n        if (cell.type === \"today\") {\n          classes.push(\"today\");\n        }\n      } else {\n        classes.push(cell.type);\n      }\n\n      if (isCurrent(cell)) {\n        classes.push(\"current\");\n      }\n\n      if (cell.inRange && (cell.type === \"normal\" || cell.type === \"today\" || props.selectionMode === \"week\")) {\n        classes.push(\"in-range\");\n\n        if (cell.start) {\n          classes.push(\"start-date\");\n        }\n\n        if (cell.end) {\n          classes.push(\"end-date\");\n        }\n      }\n\n      if (cell.disabled) {\n        classes.push(\"disabled\");\n      }\n\n      if (cell.selected) {\n        classes.push(\"selected\");\n      }\n\n      if (cell.customClass) {\n        classes.push(cell.customClass);\n      }\n\n      return classes.join(\" \");\n    };\n\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;\n      return startDate.value.add(offsetFromStart, \"day\");\n    };\n\n    const handleMouseMove = event => {\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n\n      if (target.tagName === \"SPAN\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: getDateOfCell(row, column)\n        });\n      }\n    };\n\n    const handleClick = event => {\n      let target = event.target;\n\n      while (target) {\n        if (target.tagName === \"TD\") {\n          break;\n        }\n\n        target = target.parentNode;\n      }\n\n      if (!target || target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex - 1;\n      const column = target.cellIndex;\n      const cell = rows.value[row][column];\n      if (cell.disabled || cell.type === \"week\") return;\n      const newDate = getDateOfCell(row, column);\n\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n\n          ctx.emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"day\") {\n        ctx.emit(\"pick\", newDate);\n      } else if (props.selectionMode === \"week\") {\n        const weekNumber = newDate.week();\n        const value = `${newDate.year()}w${weekNumber}`;\n        ctx.emit(\"pick\", {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf(\"week\")\n        });\n      } else if (props.selectionMode === \"dates\") {\n        const newValue = cell.selected ? castArray(props.parsedValue).filter(_ => _.valueOf() !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\n        ctx.emit(\"pick\", newValue);\n      }\n    };\n\n    const isWeekActive = cell => {\n      if (props.selectionMode !== \"week\") return false;\n      let newDate = props.date.startOf(\"day\");\n\n      if (cell.type === \"prev-month\") {\n        newDate = newDate.subtract(1, \"month\");\n      }\n\n      if (cell.type === \"next-month\") {\n        newDate = newDate.add(1, \"month\");\n      }\n\n      newDate = newDate.date(Number.parseInt(cell.text, 10));\n\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n        const weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n        return weekDate.isSame(newDate, \"day\");\n      }\n\n      return false;\n    };\n\n    return {\n      handleMouseMove,\n      t,\n      rows,\n      isWeekActive,\n      getCellClasses,\n      WEEKS,\n      handleClick\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_date_picker_cell = resolveComponent(\"el-date-picker-cell\");\n\n  return openBlock(), createElementBlock(\"table\", {\n    cellspacing: \"0\",\n    cellpadding: \"0\",\n    class: normalizeClass([\"el-date-table\", {\n      \"is-week-mode\": _ctx.selectionMode === \"week\"\n    }]),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args)),\n    onMousemove: _cache[1] || (_cache[1] = (...args) => _ctx.handleMouseMove && _ctx.handleMouseMove(...args))\n  }, [createElementVNode(\"tbody\", null, [createElementVNode(\"tr\", null, [_ctx.showWeekNumber ? (openBlock(), createElementBlock(\"th\", _hoisted_1, toDisplayString(_ctx.t(\"el.datepicker.week\")), 1)) : createCommentVNode(\"v-if\", true), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.WEEKS, (week, key) => {\n    return openBlock(), createElementBlock(\"th\", {\n      key\n    }, toDisplayString(_ctx.t(\"el.datepicker.weeks.\" + week)), 1);\n  }), 128))]), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, key) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key,\n      class: normalizeClass([\"el-date-table__row\", {\n        current: _ctx.isWeekActive(row[1])\n      }])\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key: key_,\n        class: normalizeClass(_ctx.getCellClasses(cell))\n      }, [createVNode(_component_el_date_picker_cell, {\n        cell\n      }, null, 8, [\"cell\"])], 2);\n    }), 128))], 2);\n  }), 128))])], 34);\n}\n\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue\"]]);\n\nexport { DateTable as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","ElDatePickerCell","props","date","type","minDate","maxDate","parsedValue","Object","Array","selectionMode","default","showWeekNumber","disabledDate","cellClassName","rangeState","endDate","selecting","emits","setup","ctx","t","lang","useLocale","ref","tableRows","firstDayOfWeek","$locale","weekStart","WEEKS_CONSTANT","locale","localeData","weekdaysShort","map","_","toLowerCase","computed","startDayOfMonth","startOf","subtract","day","concat","slice","dateCountOfMonth","dateCountOfLastMonth","offset","offsetDay","rows_","castArray","i","row","text","j","cell","column","inRange","start","end","index","calTime","timestamp","calEndDate","_a","isToday","numberOfDaysFromPreviousMonth","count","isCurrent","disabled","customClass","isActive","cellMatchesDate","classes","tagName","target","rowIndex","lastRow","lastColumn","handleClick","newDate","weekNumber","year","week","value","isWeekActive","Number","dayOffset","handleMouseMove","rows","getCellClasses","WEEKS","_openBlock","cellspacing","cellpadding","class","onClick","_cache","onMousemove","_createElementVNode","_ctx","_createCommentVNode","_renderList","key","current","_createVNode"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-date-table.vue"],"sourcesContent":["<template>\n  <table\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n    class=\"el-date-table\"\n    :class=\"{ 'is-week-mode': selectionMode === 'week' }\"\n    @click=\"handleClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody>\n      <tr>\n        <th v-if=\"showWeekNumber\">{{ t('el.datepicker.week') }}</th>\n        <th v-for=\"(week, key) in WEEKS\" :key=\"key\">\n          {{ t('el.datepicker.weeks.' + week) }}\n        </th>\n      </tr>\n      <tr\n        v-for=\"(row, key) in rows\"\n        :key=\"key\"\n        class=\"el-date-table__row\"\n        :class=\"{ current: isWeekActive(row[1]) }\"\n      >\n        <td\n          v-for=\"(cell, key_) in row\"\n          :key=\"key_\"\n          :class=\"getCellClasses(cell)\"\n        >\n          <el-date-picker-cell :cell=\"cell\" />\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { castArray } from '@element-plus/utils'\nimport ElDatePickerCell from './basic-cell-render'\nimport type { PropType } from 'vue'\n\nimport type { Dayjs } from 'dayjs'\nimport type { DateCell } from '../date-picker.type'\n\nexport default defineComponent({\n  components: {\n    ElDatePickerCell,\n  },\n  props: {\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: [Object, Array] as PropType<Dayjs | Dayjs[]>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'day',\n    },\n    showWeekNumber: {\n      type: Boolean,\n      default: false,\n    },\n    disabledDate: {\n      type: Function,\n    },\n    cellClassName: {\n      type: Function,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n  emits: ['changerange', 'pick', 'select'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    // data\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const tableRows = ref<DateCell[][]>([[], [], [], [], [], []])\n\n    // todo better way to get Day.js locale object\n    const firstDayOfWeek = (props.date as any).$locale().weekStart || 7\n    const WEEKS_CONSTANT = props.date\n      .locale('en')\n      .localeData()\n      .weekdaysShort()\n      .map((_) => _.toLowerCase())\n\n    const offsetDay = computed(() => {\n      // Sunday 7(0), cal the left and right offset days, 3217654, such as Monday is -1, the is to adjust the position of the first two rows of dates\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek\n    })\n\n    const startDate = computed(() => {\n      const startDayOfMonth = props.date.startOf('month')\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, 'day')\n    })\n\n    const WEEKS = computed(() => {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(\n        firstDayOfWeek,\n        firstDayOfWeek + 7\n      )\n    })\n\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const startOfMonth = props.date.startOf('month')\n      const startOfMonthDay = startOfMonth.day() || 7 // day of first day\n      const dateCountOfMonth = startOfMonth.daysInMonth()\n      const dateCountOfLastMonth = startOfMonth\n        .subtract(1, 'month')\n        .daysInMonth()\n\n      const offset = offsetDay.value\n      const rows_ = tableRows.value\n      let count = 1\n\n      const selectedDate: Dayjs[] =\n        props.selectionMode === 'dates' ? castArray(props.parsedValue) : []\n\n      const calNow = dayjs().locale(lang.value).startOf('day')\n\n      for (let i = 0; i < 6; i++) {\n        const row = rows_[i]\n\n        if (props.showWeekNumber) {\n          if (!row[0]) {\n            row[0] = {\n              type: 'week',\n              text: startDate.value.add(i * 7 + 1, 'day').week(),\n            }\n          }\n        }\n\n        for (let j = 0; j < 7; j++) {\n          let cell = row[props.showWeekNumber ? j + 1 : j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n          const index = i * 7 + j\n          const calTime = startDate.value.add(index - offset, 'day')\n          cell.dayjs = calTime\n          cell.date = calTime.toDate()\n          cell.timestamp = calTime.valueOf()\n          cell.type = 'normal'\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'day') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'day')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'day') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'day'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'day')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'day')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'day')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'day')\n          }\n\n          const isToday = calTime.isSame(calNow, 'day')\n\n          if (isToday) {\n            cell.type = 'today'\n          }\n\n          if (i >= 0 && i <= 1) {\n            const numberOfDaysFromPreviousMonth =\n              startOfMonthDay + offset < 0\n                ? 7 + startOfMonthDay + offset\n                : startOfMonthDay + offset\n\n            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {\n              cell.text = count++\n            } else {\n              cell.text =\n                dateCountOfLastMonth -\n                (numberOfDaysFromPreviousMonth - (j % 7)) +\n                1 +\n                i * 7\n              cell.type = 'prev-month'\n            }\n          } else {\n            if (count <= dateCountOfMonth) {\n              cell.text = count++\n            } else {\n              cell.text = count++ - dateCountOfMonth\n              cell.type = 'next-month'\n            }\n          }\n\n          const cellDate = calTime.toDate()\n          cell.selected = selectedDate.find(\n            (_) => _.valueOf() === calTime.valueOf()\n          )\n          cell.isSelected = !!cell.selected\n          cell.isCurrent = isCurrent(cell)\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          cell.customClass =\n            props.cellClassName && props.cellClassName(cellDate)\n          row[props.showWeekNumber ? j + 1 : j] = cell\n        }\n\n        if (props.selectionMode === 'week') {\n          const start = props.showWeekNumber ? 1 : 0\n          const end = props.showWeekNumber ? 7 : 6\n          const isActive = isWeekActive(row[start + 1])\n          row[start].inRange = isActive\n          row[start].start = isActive\n          row[end].inRange = isActive\n          row[end].end = isActive\n        }\n      }\n      return rows_\n    })\n\n    const isCurrent = (cell): boolean => {\n      return (\n        props.selectionMode === 'day' &&\n        (cell.type === 'normal' || cell.type === 'today') &&\n        cellMatchesDate(cell, props.parsedValue)\n      )\n    }\n\n    const cellMatchesDate = (cell, date) => {\n      if (!date) return false\n      return dayjs(date)\n        .locale(lang.value)\n        .isSame(props.date.date(Number(cell.text)), 'day')\n    }\n\n    const getCellClasses = (cell) => {\n      const classes: string[] = []\n      if ((cell.type === 'normal' || cell.type === 'today') && !cell.disabled) {\n        classes.push('available')\n        if (cell.type === 'today') {\n          classes.push('today')\n        }\n      } else {\n        classes.push(cell.type)\n      }\n\n      if (isCurrent(cell)) {\n        classes.push('current')\n      }\n\n      if (\n        cell.inRange &&\n        (cell.type === 'normal' ||\n          cell.type === 'today' ||\n          props.selectionMode === 'week')\n      ) {\n        classes.push('in-range')\n\n        if (cell.start) {\n          classes.push('start-date')\n        }\n\n        if (cell.end) {\n          classes.push('end-date')\n        }\n      }\n\n      if (cell.disabled) {\n        classes.push('disabled')\n      }\n\n      if (cell.selected) {\n        classes.push('selected')\n      }\n\n      if (cell.customClass) {\n        classes.push(cell.customClass)\n      }\n\n      return classes.join(' ')\n    }\n\n    const getDateOfCell = (row, column) => {\n      const offsetFromStart =\n        row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value\n      return startDate.value.add(offsetFromStart, 'day')\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'SPAN') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex - 1\n      const column = target.cellIndex\n\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: getDateOfCell(row, column),\n        })\n      }\n    }\n\n    const handleClick = (event) => {\n      let target = event.target\n\n      while (target) {\n        if (target.tagName === 'TD') {\n          break\n        }\n        target = target.parentNode\n      }\n\n      if (!target || target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex - 1\n      const column = target.cellIndex\n      const cell = rows.value[row][column]\n\n      if (cell.disabled || cell.type === 'week') return\n\n      const newDate = getDateOfCell(row, column)\n\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else if (props.selectionMode === 'day') {\n        ctx.emit('pick', newDate)\n      } else if (props.selectionMode === 'week') {\n        const weekNumber = newDate.week()\n        const value = `${newDate.year()}w${weekNumber}`\n        ctx.emit('pick', {\n          year: newDate.year(),\n          week: weekNumber,\n          value,\n          date: newDate.startOf('week'),\n        })\n      } else if (props.selectionMode === 'dates') {\n        const newValue = cell.selected\n          ? castArray(props.parsedValue).filter(\n              (_) => _.valueOf() !== newDate.valueOf()\n            )\n          : castArray(props.parsedValue).concat([newDate])\n        ctx.emit('pick', newValue)\n      }\n    }\n\n    const isWeekActive = (cell) => {\n      if (props.selectionMode !== 'week') return false\n      let newDate = props.date.startOf('day')\n\n      if (cell.type === 'prev-month') {\n        newDate = newDate.subtract(1, 'month')\n      }\n\n      if (cell.type === 'next-month') {\n        newDate = newDate.add(1, 'month')\n      }\n\n      newDate = newDate.date(Number.parseInt(cell.text, 10))\n\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        const dayOffset =\n          ((props.parsedValue.day() - firstDayOfWeek + 7) % 7) - 1\n        const weekDate = props.parsedValue.subtract(dayOffset, 'day')\n        return weekDate.isSame(newDate, 'day')\n      }\n      return false\n    }\n\n    return {\n      handleMouseMove,\n      t,\n      rows,\n      isWeekActive,\n      getCellClasses,\n      WEEKS,\n      handleClick,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}