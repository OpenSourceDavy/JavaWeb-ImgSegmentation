{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { isClient } from '@vueuse/core';\nimport '../types.mjs';\nimport '../strings.mjs';\nimport { entriesOf, keysOf } from '../objects.mjs';\nimport { camelize, isObject } from '@vue/shared';\n\nconst classNameToArray = (cls = \"\") => cls.split(\" \").filter(item => !!item.trim());\n\nconst hasClass = (el, cls) => {\n  if (!el || !cls) return false;\n  if (cls.includes(\" \")) throw new Error(\"className should not contain space.\");\n  return el.classList.contains(cls);\n};\n\nconst addClass = (el, cls) => {\n  if (!el || !cls.trim()) return;\n  el.classList.add(...classNameToArray(cls));\n};\n\nconst removeClass = (el, cls) => {\n  if (!el || !cls.trim()) return;\n  el.classList.remove(...classNameToArray(cls));\n};\n\nconst getStyle = (element, styleName) => {\n  var _a;\n\n  if (!isClient || !element || !styleName) return \"\";\n  let key = camelize(styleName);\n  if (key === \"float\") key = \"cssFloat\";\n\n  try {\n    const style = element.style[styleName];\n    if (style) return style;\n    const computed = (_a = document.defaultView) == null ? void 0 : _a.getComputedStyle(element, \"\");\n    return computed ? computed[styleName] : \"\";\n  } catch (e) {\n    return element.style[styleName];\n  }\n};\n\nconst setStyle = (element, styleName, value) => {\n  if (!element || !styleName) return;\n\n  if (isObject(styleName)) {\n    entriesOf(styleName).forEach(([prop, value2]) => setStyle(element, prop, value2));\n  } else {\n    const key = camelize(styleName);\n    element.style[key] = value;\n  }\n};\n\nconst removeStyle = (element, style) => {\n  if (!element || !style) return;\n\n  if (isObject(style)) {\n    keysOf(style).forEach(prop => removeStyle(element, prop));\n  } else {\n    setStyle(element, style, \"\");\n  }\n};\n\nexport { addClass, classNameToArray, getStyle, hasClass, removeClass, removeStyle, setStyle };","map":{"version":3,"mappings":"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","names":["classNameToArray","cls","split","filter","item","trim","hasClass","el","includes","Error","classList","contains","addClass","add","removeClass","remove","getStyle","element","styleName","_a","isClient","key","camelize","style","computed","document","defaultView","getComputedStyle","e","setStyle","value","isObject","entriesOf","forEach","prop","value2","removeStyle","keysOf"],"sources":["../../../../../packages/utils/dom/style.ts"],"sourcesContent":["import { isClient } from '@vueuse/core'\nimport { isObject } from '../types'\nimport { camelize } from '../strings'\nimport { entriesOf, keysOf } from '../objects'\nimport type { CSSProperties } from 'vue'\n\nexport const classNameToArray = (cls = '') =>\n  cls.split(' ').filter((item) => !!item.trim())\n\nexport const hasClass = (el: Element, cls: string): boolean => {\n  if (!el || !cls) return false\n  if (cls.includes(' ')) throw new Error('className should not contain space.')\n  return el.classList.contains(cls)\n}\n\nexport const addClass = (el: Element, cls: string) => {\n  if (!el || !cls.trim()) return\n  el.classList.add(...classNameToArray(cls))\n}\n\nexport const removeClass = (el: Element, cls: string) => {\n  if (!el || !cls.trim()) return\n  el.classList.remove(...classNameToArray(cls))\n}\n\nexport const getStyle = (\n  element: HTMLElement,\n  styleName: keyof CSSProperties\n): string => {\n  if (!isClient || !element || !styleName) return ''\n\n  let key = camelize(styleName)\n  if (key === 'float') key = 'cssFloat'\n  try {\n    const style = element.style[styleName]\n    if (style) return style\n    const computed = document.defaultView?.getComputedStyle(element, '')\n    return computed ? computed[styleName] : ''\n  } catch {\n    return element.style[styleName]\n  }\n}\n\nexport const setStyle = (\n  element: HTMLElement,\n  styleName: CSSProperties | keyof CSSProperties,\n  value?: string | number\n) => {\n  if (!element || !styleName) return\n\n  if (isObject(styleName)) {\n    entriesOf(styleName).forEach(([prop, value]) =>\n      setStyle(element, prop, value)\n    )\n  } else {\n    const key = camelize(styleName)\n    element.style[key] = value\n  }\n}\n\nexport const removeStyle = (\n  element: HTMLElement,\n  style: CSSProperties | keyof CSSProperties\n) => {\n  if (!element || !style) return\n\n  if (isObject(style)) {\n    keysOf(style).forEach((prop) => removeStyle(element, prop))\n  } else {\n    setStyle(element, style, '')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}