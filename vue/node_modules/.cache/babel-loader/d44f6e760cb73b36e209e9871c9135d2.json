{"ast":null,"code":"import { nextTick } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport { throttle } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport { getOffsetTopDistance } from '../../../utils/dom/position.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { getScrollContainer } from '../../../utils/dom/scroll.mjs';\nconst SCOPE = \"ElInfiniteScroll\";\nconst CHECK_INTERVAL = 50;\nconst DEFAULT_DELAY = 200;\nconst DEFAULT_DISTANCE = 0;\nconst attributes = {\n  delay: {\n    type: Number,\n    default: DEFAULT_DELAY\n  },\n  distance: {\n    type: Number,\n    default: DEFAULT_DISTANCE\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  immediate: {\n    type: Boolean,\n    default: true\n  }\n};\n\nconst getScrollOptions = (el, instance) => {\n  return Object.entries(attributes).reduce((acm, [name, option]) => {\n    var _a, _b;\n\n    const {\n      type,\n      default: defaultValue\n    } = option;\n    const attrVal = el.getAttribute(`infinite-scroll-${name}`);\n    let value = (_b = (_a = instance[attrVal]) != null ? _a : attrVal) != null ? _b : defaultValue;\n    value = value === \"false\" ? false : value;\n    value = type(value);\n    acm[name] = Number.isNaN(value) ? defaultValue : value;\n    return acm;\n  }, {});\n};\n\nconst destroyObserver = el => {\n  const {\n    observer\n  } = el[SCOPE];\n\n  if (observer) {\n    observer.disconnect();\n    delete el[SCOPE].observer;\n  }\n};\n\nconst handleScroll = (el, cb) => {\n  const {\n    container,\n    containerEl,\n    instance,\n    observer,\n    lastScrollTop\n  } = el[SCOPE];\n  const {\n    disabled,\n    distance\n  } = getScrollOptions(el, instance);\n  const {\n    clientHeight,\n    scrollHeight,\n    scrollTop\n  } = containerEl;\n  const delta = scrollTop - lastScrollTop;\n  el[SCOPE].lastScrollTop = scrollTop;\n  if (observer || disabled || delta < 0) return;\n  let shouldTrigger = false;\n\n  if (container === el) {\n    shouldTrigger = scrollHeight - (clientHeight + scrollTop) <= distance;\n  } else {\n    const {\n      clientTop,\n      scrollHeight: height\n    } = el;\n    const offsetTop = getOffsetTopDistance(el, containerEl);\n    shouldTrigger = scrollTop + clientHeight >= offsetTop + clientTop + height - distance;\n  }\n\n  if (shouldTrigger) {\n    cb.call(instance);\n  }\n};\n\nfunction checkFull(el, cb) {\n  const {\n    containerEl,\n    instance\n  } = el[SCOPE];\n  const {\n    disabled\n  } = getScrollOptions(el, instance);\n  if (disabled || containerEl.clientHeight === 0) return;\n\n  if (containerEl.scrollHeight <= containerEl.clientHeight) {\n    cb.call(instance);\n  } else {\n    destroyObserver(el);\n  }\n}\n\nconst InfiniteScroll = {\n  async mounted(el, binding) {\n    const {\n      instance,\n      value: cb\n    } = binding;\n\n    if (!isFunction(cb)) {\n      throwError(SCOPE, \"'v-infinite-scroll' binding value must be a function\");\n    }\n\n    await nextTick();\n    const {\n      delay,\n      immediate\n    } = getScrollOptions(el, instance);\n    const container = getScrollContainer(el, true);\n    const containerEl = container === window ? document.documentElement : container;\n    const onScroll = throttle(handleScroll.bind(null, el, cb), delay);\n    if (!container) return;\n    el[SCOPE] = {\n      instance,\n      container,\n      containerEl,\n      delay,\n      cb,\n      onScroll,\n      lastScrollTop: containerEl.scrollTop\n    };\n\n    if (immediate) {\n      const observer = new MutationObserver(throttle(checkFull.bind(null, el, cb), CHECK_INTERVAL));\n      el[SCOPE].observer = observer;\n      observer.observe(el, {\n        childList: true,\n        subtree: true\n      });\n      checkFull(el, cb);\n    }\n\n    container.addEventListener(\"scroll\", onScroll);\n  },\n\n  unmounted(el) {\n    const {\n      container,\n      onScroll\n    } = el[SCOPE];\n    container == null ? void 0 : container.removeEventListener(\"scroll\", onScroll);\n    destroyObserver(el);\n  },\n\n  async updated(el) {\n    if (!el[SCOPE]) {\n      await nextTick();\n    }\n\n    const {\n      containerEl,\n      cb,\n      observer\n    } = el[SCOPE];\n\n    if (containerEl.clientHeight && observer) {\n      checkFull(el, cb);\n    }\n  }\n\n};\nexport { CHECK_INTERVAL, DEFAULT_DELAY, DEFAULT_DISTANCE, SCOPE, InfiniteScroll as default };","map":{"version":3,"mappings":"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","names":["SCOPE","CHECK_INTERVAL","DEFAULT_DELAY","DEFAULT_DISTANCE","attributes","delay","type","Number","default","distance","disabled","Boolean","immediate","getScrollOptions","el","instance","Object","entries","reduce","acm","name","option","_a","_b","defaultValue","attrVal","getAttribute","value","isNaN","destroyObserver","observer","disconnect","handleScroll","cb","container","containerEl","lastScrollTop","clientHeight","scrollHeight","scrollTop","delta","shouldTrigger","clientTop","height","offsetTop","getOffsetTopDistance","call","checkFull","InfiniteScroll","mounted","binding","isFunction","throwError","nextTick","getScrollContainer","window","document","documentElement","onScroll","throttle","bind","MutationObserver","observe","childList","subtree","addEventListener","unmounted","removeEventListener","updated"],"sources":["../../../../../../packages/components/infinite-scroll/src/index.ts"],"sourcesContent":["import { nextTick } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport { throttle } from 'lodash-unified'\nimport {\n  getOffsetTopDistance,\n  getScrollContainer,\n  throwError,\n} from '@element-plus/utils'\n\nimport type { ComponentPublicInstance, ObjectDirective } from 'vue'\n\nexport const SCOPE = 'ElInfiniteScroll'\nexport const CHECK_INTERVAL = 50\nexport const DEFAULT_DELAY = 200\nexport const DEFAULT_DISTANCE = 0\n\nconst attributes = {\n  delay: {\n    type: Number,\n    default: DEFAULT_DELAY,\n  },\n  distance: {\n    type: Number,\n    default: DEFAULT_DISTANCE,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  immediate: {\n    type: Boolean,\n    default: true,\n  },\n}\n\ntype Attrs = typeof attributes\ntype ScrollOptions = { [K in keyof Attrs]: Attrs[K]['default'] }\ntype InfiniteScrollCallback = () => void\ntype InfiniteScrollEl = HTMLElement & {\n  [SCOPE]: {\n    container: HTMLElement | Window\n    containerEl: HTMLElement\n    instance: ComponentPublicInstance\n    delay: number // export for test\n    lastScrollTop: number\n    cb: InfiniteScrollCallback\n    onScroll: () => void\n    observer?: MutationObserver\n  }\n}\n\nconst getScrollOptions = (\n  el: HTMLElement,\n  instance: ComponentPublicInstance\n): ScrollOptions => {\n  return Object.entries(attributes).reduce((acm, [name, option]) => {\n    const { type, default: defaultValue } = option\n    const attrVal = el.getAttribute(`infinite-scroll-${name}`)\n    let value = instance[attrVal] ?? attrVal ?? defaultValue\n    value = value === 'false' ? false : value\n    value = type(value)\n    acm[name] = Number.isNaN(value) ? defaultValue : value\n    return acm\n  }, {} as ScrollOptions)\n}\n\nconst destroyObserver = (el: InfiniteScrollEl) => {\n  const { observer } = el[SCOPE]\n\n  if (observer) {\n    observer.disconnect()\n    delete el[SCOPE].observer\n  }\n}\n\nconst handleScroll = (el: InfiniteScrollEl, cb: InfiniteScrollCallback) => {\n  const { container, containerEl, instance, observer, lastScrollTop } =\n    el[SCOPE]\n  const { disabled, distance } = getScrollOptions(el, instance)\n  const { clientHeight, scrollHeight, scrollTop } = containerEl\n  const delta = scrollTop - lastScrollTop\n\n  el[SCOPE].lastScrollTop = scrollTop\n\n  // trigger only if full check has done and not disabled and scroll down\n  if (observer || disabled || delta < 0) return\n\n  let shouldTrigger = false\n\n  if (container === el) {\n    shouldTrigger = scrollHeight - (clientHeight + scrollTop) <= distance\n  } else {\n    // get the scrollHeight since el might be visible overflow\n    const { clientTop, scrollHeight: height } = el\n    const offsetTop = getOffsetTopDistance(el, containerEl)\n    shouldTrigger =\n      scrollTop + clientHeight >= offsetTop + clientTop + height - distance\n  }\n\n  if (shouldTrigger) {\n    cb.call(instance)\n  }\n}\n\nfunction checkFull(el: InfiniteScrollEl, cb: InfiniteScrollCallback) {\n  const { containerEl, instance } = el[SCOPE]\n  const { disabled } = getScrollOptions(el, instance)\n\n  if (disabled || containerEl.clientHeight === 0) return\n\n  if (containerEl.scrollHeight <= containerEl.clientHeight) {\n    cb.call(instance)\n  } else {\n    destroyObserver(el)\n  }\n}\n\nconst InfiniteScroll: ObjectDirective<\n  InfiniteScrollEl,\n  InfiniteScrollCallback\n> = {\n  async mounted(el, binding) {\n    const { instance, value: cb } = binding\n\n    if (!isFunction(cb)) {\n      throwError(SCOPE, \"'v-infinite-scroll' binding value must be a function\")\n    }\n\n    // ensure parentNode mounted\n    await nextTick()\n\n    const { delay, immediate } = getScrollOptions(el, instance)\n    const container = getScrollContainer(el, true)\n    const containerEl =\n      container === window\n        ? document.documentElement\n        : (container as HTMLElement)\n    const onScroll = throttle(handleScroll.bind(null, el, cb), delay)\n\n    if (!container) return\n\n    el[SCOPE] = {\n      instance,\n      container,\n      containerEl,\n      delay,\n      cb,\n      onScroll,\n      lastScrollTop: containerEl.scrollTop,\n    }\n\n    if (immediate) {\n      const observer = new MutationObserver(\n        throttle(checkFull.bind(null, el, cb), CHECK_INTERVAL)\n      )\n      el[SCOPE].observer = observer\n      observer.observe(el, { childList: true, subtree: true })\n      checkFull(el, cb)\n    }\n\n    container.addEventListener('scroll', onScroll)\n  },\n  unmounted(el) {\n    const { container, onScroll } = el[SCOPE]\n\n    container?.removeEventListener('scroll', onScroll)\n    destroyObserver(el)\n  },\n  async updated(el) {\n    if (!el[SCOPE]) {\n      await nextTick()\n    }\n    const { containerEl, cb, observer } = el[SCOPE]\n    if (containerEl.clientHeight && observer) {\n      checkFull(el, cb)\n    }\n  },\n}\n\nexport default InfiniteScroll\n"]},"metadata":{},"sourceType":"module"}