{"ast":null,"code":"import { defineComponent, h } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { hColgroup } from '../h-helper.mjs';\nimport useStyle from './style-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nvar TableFooter = defineComponent({\n  name: \"ElTableFooter\",\n  props: {\n    fixed: {\n      type: String,\n      default: \"\"\n    },\n    store: {\n      required: true,\n      type: Object\n    },\n    summaryMethod: Function,\n    sumText: String,\n    border: Boolean,\n    defaultSort: {\n      type: Object,\n      default: () => {\n        return {\n          prop: \"\",\n          order: \"\"\n        };\n      }\n    }\n  },\n\n  setup(props) {\n    const {\n      getCellClasses,\n      getCellStyles,\n      columns\n    } = useStyle(props);\n    const ns = useNamespace(\"table\");\n    return {\n      ns,\n      getCellClasses,\n      getCellStyles,\n      columns\n    };\n  },\n\n  render() {\n    const {\n      columns,\n      getCellStyles,\n      getCellClasses,\n      summaryMethod,\n      sumText,\n      ns\n    } = this;\n    const data = this.store.states.data.value;\n    let sums = [];\n\n    if (summaryMethod) {\n      sums = summaryMethod({\n        columns,\n        data\n      });\n    } else {\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = sumText;\n          return;\n        }\n\n        const values = data.map(item => Number(item[column.property]));\n        const precisions = [];\n        let notNumber = true;\n        values.forEach(value => {\n          if (!Number.isNaN(+value)) {\n            notNumber = false;\n            const decimal = `${value}`.split(\".\")[1];\n            precisions.push(decimal ? decimal.length : 0);\n          }\n        });\n        const precision = Math.max.apply(null, precisions);\n\n        if (!notNumber) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr);\n\n            if (!Number.isNaN(+value)) {\n              return Number.parseFloat((prev + curr).toFixed(Math.min(precision, 20)));\n            } else {\n              return prev;\n            }\n          }, 0);\n        } else {\n          sums[index] = \"\";\n        }\n      });\n    }\n\n    return h(\"table\", {\n      class: ns.e(\"footer\"),\n      cellspacing: \"0\",\n      cellpadding: \"0\",\n      border: \"0\"\n    }, [hColgroup({\n      columns\n    }), h(\"tbody\", [h(\"tr\", {}, [...columns.map((column, cellIndex) => h(\"td\", {\n      key: cellIndex,\n      colspan: column.colSpan,\n      rowspan: column.rowSpan,\n      class: getCellClasses(columns, cellIndex),\n      style: getCellStyles(column, cellIndex)\n    }, [h(\"div\", {\n      class: [\"cell\", column.labelClassName]\n    }, [sums[cellIndex]])]))])])]);\n  }\n\n});\nexport { TableFooter as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","props","fixed","type","String","default","store","required","Object","summaryMethod","Function","sumText","border","Boolean","defaultSort","prop","order","setup","getCellClasses","getCellStyles","columns","useStyle","ns","useNamespace","render","data","states","value","sums","forEach","column","index","values","map","item","Number","property","precisions","notNumber","isNaN","decimal","split","push","length","precision","Math","max","apply","reduce","prev","curr","parseFloat","toFixed","min","h","class","e","cellspacing","cellpadding","hColgroup","cellIndex","key","colspan","colSpan","rowspan","rowSpan","style","labelClassName"],"sources":["../../../../../../../packages/components/table/src/table-footer/index.ts"],"sourcesContent":["import { defineComponent, h } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { hColgroup } from '../h-helper'\nimport useStyle from './style-helper'\nimport type { Store } from '../store'\n\nimport type { PropType } from 'vue'\nimport type { DefaultRow, Sort, SummaryMethod } from '../table/defaults'\nexport interface TableFooter<T> {\n  fixed: string\n  store: Store<T>\n  summaryMethod: SummaryMethod<T>\n  sumText: string\n  border: boolean\n  defaultSort: Sort\n}\n\nexport default defineComponent({\n  name: 'ElTableFooter',\n\n  props: {\n    fixed: {\n      type: String,\n      default: '',\n    },\n    store: {\n      required: true,\n      type: Object as PropType<TableFooter<DefaultRow>['store']>,\n    },\n    summaryMethod: Function as PropType<\n      TableFooter<DefaultRow>['summaryMethod']\n    >,\n    sumText: String,\n    border: Boolean,\n    defaultSort: {\n      type: Object as PropType<TableFooter<DefaultRow>['defaultSort']>,\n      default: () => {\n        return {\n          prop: '',\n          order: '',\n        }\n      },\n    },\n  },\n  setup(props) {\n    const { getCellClasses, getCellStyles, columns } = useStyle(\n      props as TableFooter<DefaultRow>\n    )\n    const ns = useNamespace('table')\n    return {\n      ns,\n      getCellClasses,\n      getCellStyles,\n      columns,\n    }\n  },\n  render() {\n    const {\n      columns,\n      getCellStyles,\n      getCellClasses,\n      summaryMethod,\n      sumText,\n      ns,\n    } = this\n    const data = this.store.states.data.value\n    let sums = []\n    if (summaryMethod) {\n      sums = summaryMethod({\n        columns,\n        data,\n      })\n    } else {\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = sumText\n          return\n        }\n        const values = data.map((item) => Number(item[column.property]))\n        const precisions = []\n        let notNumber = true\n        values.forEach((value) => {\n          if (!Number.isNaN(+value)) {\n            notNumber = false\n            const decimal = `${value}`.split('.')[1]\n            precisions.push(decimal ? decimal.length : 0)\n          }\n        })\n        const precision = Math.max.apply(null, precisions)\n        if (!notNumber) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr)\n            if (!Number.isNaN(+value)) {\n              return Number.parseFloat(\n                (prev + curr).toFixed(Math.min(precision, 20))\n              )\n            } else {\n              return prev\n            }\n          }, 0)\n        } else {\n          sums[index] = ''\n        }\n      })\n    }\n    return h(\n      'table',\n      {\n        class: ns.e('footer'),\n        cellspacing: '0',\n        cellpadding: '0',\n        border: '0',\n      },\n      [\n        hColgroup({\n          columns,\n        }),\n        h('tbody', [\n          h('tr', {}, [\n            ...columns.map((column, cellIndex) =>\n              h(\n                'td',\n                {\n                  key: cellIndex,\n                  colspan: column.colSpan,\n                  rowspan: column.rowSpan,\n                  class: getCellClasses(columns, cellIndex),\n                  style: getCellStyles(column, cellIndex),\n                },\n                [\n                  h(\n                    'div',\n                    {\n                      class: ['cell', column.labelClassName],\n                    },\n                    [sums[cellIndex]]\n                  ),\n                ]\n              )\n            ),\n          ]),\n        ]),\n      ]\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}