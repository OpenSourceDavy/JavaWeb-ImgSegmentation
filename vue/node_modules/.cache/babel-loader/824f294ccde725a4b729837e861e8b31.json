{"ast":null,"code":"import { defineComponent, ref, computed, openBlock, createElementBlock, createElementVNode, Fragment, renderList, normalizeClass, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../time-picker/index.mjs';\nimport '../../../../utils/index.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../../time-picker/src/common/date-utils.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nimport { hasClass } from '../../../../utils/dom/style.mjs';\n\nconst datesInMonth = (year, month, lang) => {\n  const firstDay = dayjs().locale(lang).startOf(\"month\").month(month).year(year);\n  const numOfDays = firstDay.daysInMonth();\n  return rangeArr(numOfDays).map(n => firstDay.add(n, \"day\").toDate());\n};\n\nconst _sfc_main = defineComponent({\n  props: {\n    disabledDate: {\n      type: Function\n    },\n    selectionMode: {\n      type: String,\n      default: \"month\"\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    date: {\n      type: Object\n    },\n    parsedValue: {\n      type: Object\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false\n      })\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const months = ref(props.date.locale(\"en\").localeData().monthsShort().map(_ => _.toLowerCase()));\n    const tableRows = ref([[], [], []]);\n    const lastRow = ref(null);\n    const lastColumn = ref(null);\n    const rows = computed(() => {\n      var _a;\n\n      const rows2 = tableRows.value;\n      const now = dayjs().locale(lang.value).startOf(\"month\");\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows2[i];\n\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j];\n\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n\n          cell.type = \"normal\";\n          const index = i * 4 + j;\n          const calTime = props.date.startOf(\"year\").month(index);\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"month\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"month\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"month\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"month\");\n\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"month\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"month\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"month\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"month\");\n          }\n\n          const isToday = now.isSame(calTime);\n\n          if (isToday) {\n            cell.type = \"today\";\n          }\n\n          cell.text = index;\n          const cellDate = calTime.toDate();\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          row[j] = cell;\n        }\n      }\n\n      return rows2;\n    });\n\n    const getCellStyle = cell => {\n      const style = {};\n      const year = props.date.year();\n      const today = new Date();\n      const month = cell.text;\n      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;\n      style.current = castArray(props.parsedValue).findIndex(date => date.year() === year && date.month() === month) >= 0;\n      style.today = today.getFullYear() === year && today.getMonth() === month;\n\n      if (cell.inRange) {\n        style[\"in-range\"] = true;\n\n        if (cell.start) {\n          style[\"start-date\"] = true;\n        }\n\n        if (cell.end) {\n          style[\"end-date\"] = true;\n        }\n      }\n\n      return style;\n    };\n\n    const handleMouseMove = event => {\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n\n      if (target.tagName === \"A\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: props.date.startOf(\"year\").month(row * 4 + column)\n        });\n      }\n    };\n\n    const handleMonthTableClick = event => {\n      let target = event.target;\n\n      if (target.tagName === \"A\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      if (hasClass(target, \"disabled\")) return;\n      const column = target.cellIndex;\n      const row = target.parentNode.rowIndex;\n      const month = row * 4 + column;\n      const newDate = props.date.startOf(\"year\").month(month);\n\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n\n          ctx.emit(\"select\", false);\n        }\n      } else {\n        ctx.emit(\"pick\", month);\n      }\n    };\n\n    return {\n      handleMouseMove,\n      handleMonthTableClick,\n      rows,\n      getCellStyle,\n      t,\n      months\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  class: \"cell\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    class: \"el-month-table\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleMonthTableClick && _ctx.handleMonthTableClick(...args)),\n    onMousemove: _cache[1] || (_cache[1] = (...args) => _ctx.handleMouseMove && _ctx.handleMouseMove(...args))\n  }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, key) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key: key_,\n        class: normalizeClass(_ctx.getCellStyle(cell))\n      }, [createElementVNode(\"div\", null, [createElementVNode(\"a\", _hoisted_1, toDisplayString(_ctx.t(\"el.datepicker.months.\" + _ctx.months[cell.text])), 1)])], 2);\n    }), 128))]);\n  }), 128))])], 32);\n}\n\nvar MonthTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue\"]]);\n\nexport { MonthTable as default };","map":{"version":3,"mappings":"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","names":["datesInMonth","year","month","lang","firstDay","locale","startOf","daysInMonth","rangeArr","map","n","toDate","_sfc_main","defineComponent","props","disabledDate","type","selectionMode","default","minDate","maxDate","date","parsedValue","rangeState","endDate","selecting","emits","setup","ctx","t","useLocale","months","ref","localeData","monthsShort","_","computed","dayjs","i","rows2","j","cell","row","column","inRange","start","end","index","calTime","calEndDate","_a","isToday","cellDate","disabled","today","Date","style","every","current","castArray","findIndex","tagName","target","rowIndex","lastRow","lastColumn","handleMonthTableClick","handleMouseMove","rows","getCellStyle","_cache","_openBlock","class","onClick","onMousemove","_renderList","_createElementBlock","key","_createElementVNode"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-month-table.vue"],"sourcesContent":["<template>\n  <table\n    class=\"el-month-table\"\n    @click=\"handleMonthTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody>\n      <tr v-for=\"(row, key) in rows\" :key=\"key\">\n        <td v-for=\"(cell, key_) in row\" :key=\"key_\" :class=\"getCellStyle(cell)\">\n          <div>\n            <a class=\"cell\">{{\n              t('el.datepicker.months.' + months[cell.text])\n            }}</a>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { castArray, hasClass } from '@element-plus/utils'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst datesInMonth = (year: number, month: number, lang: string) => {\n  const firstDay = dayjs().locale(lang).startOf('month').month(month).year(year)\n  const numOfDays = firstDay.daysInMonth()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nexport default defineComponent({\n  props: {\n    disabledDate: {\n      type: Function as PropType<(_: Date) => void>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'month',\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: Object as PropType<Dayjs>,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n\n  emits: ['changerange', 'pick', 'select'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const months = ref(\n      props.date\n        .locale('en')\n        .localeData()\n        .monthsShort()\n        .map((_) => _.toLowerCase())\n    )\n    const tableRows = ref([[], [], []])\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const rows = tableRows.value\n      const now = dayjs().locale(lang.value).startOf('month')\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows[i]\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n\n          cell.type = 'normal'\n\n          const index = i * 4 + j\n          const calTime = props.date.startOf('year').month(index)\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'month')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'month'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'month')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'month')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'month')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'month')\n          }\n\n          const isToday = now.isSame(calTime)\n\n          if (isToday) {\n            cell.type = 'today'\n          }\n          cell.text = index\n          const cellDate = calTime.toDate()\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          row[j] = cell\n        }\n      }\n      return rows\n    })\n    const getCellStyle = (cell) => {\n      const style = {} as any\n      const year = props.date.year()\n      const today = new Date()\n      const month = cell.text\n\n      style.disabled = props.disabledDate\n        ? datesInMonth(year, month, lang.value).every(props.disabledDate)\n        : false\n      style.current =\n        castArray(props.parsedValue).findIndex(\n          (date) => date.year() === year && date.month() === month\n        ) >= 0\n      style.today = today.getFullYear() === year && today.getMonth() === month\n\n      if (cell.inRange) {\n        style['in-range'] = true\n\n        if (cell.start) {\n          style['start-date'] = true\n        }\n\n        if (cell.end) {\n          style['end-date'] = true\n        }\n      }\n      return style\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex\n      const column = target.cellIndex\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: props.date.startOf('year').month(row * 4 + column),\n        })\n      }\n    }\n    const handleMonthTableClick = (event) => {\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n      if (hasClass(target, 'disabled')) return\n      const column = target.cellIndex\n      const row = target.parentNode.rowIndex\n      const month = row * 4 + column\n      const newDate = props.date.startOf('year').month(month)\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else {\n        ctx.emit('pick', month)\n      }\n    }\n\n    return {\n      handleMouseMove,\n      handleMonthTableClick,\n      rows,\n      getCellStyle,\n      t,\n      months,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}