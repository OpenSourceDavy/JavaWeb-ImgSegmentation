{"ast":null,"code":"import { isString } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { useSizeProp } from '../../../hooks/use-common-props/index.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nconst inputProps = buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType([String, Number, Object]),\n    default: \"\"\n  },\n  type: {\n    type: String,\n    default: \"text\"\n  },\n  resize: {\n    type: String,\n    values: [\"none\", \"both\", \"horizontal\", \"vertical\"]\n  },\n  autosize: {\n    type: definePropType([Boolean, Object]),\n    default: false\n  },\n  autocomplete: {\n    type: String,\n    default: \"off\"\n  },\n  placeholder: {\n    type: String\n  },\n  form: {\n    type: String,\n    default: \"\"\n  },\n  readonly: {\n    type: Boolean,\n    default: false\n  },\n  clearable: {\n    type: Boolean,\n    default: false\n  },\n  showPassword: {\n    type: Boolean,\n    default: false\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false\n  },\n  suffixIcon: {\n    type: iconPropType,\n    default: \"\"\n  },\n  prefixIcon: {\n    type: iconPropType,\n    default: \"\"\n  },\n  label: {\n    type: String\n  },\n  tabindex: {\n    type: [Number, String]\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  },\n  inputStyle: {\n    type: definePropType([Object, Array, String]),\n    default: () => mutable({})\n  }\n});\nconst inputEmits = {\n  [UPDATE_MODEL_EVENT]: value => isString(value),\n  input: value => isString(value),\n  change: value => isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: evt => evt instanceof MouseEvent,\n  mouseenter: evt => evt instanceof MouseEvent,\n  keydown: evt => evt instanceof Event,\n  compositionstart: evt => evt instanceof CompositionEvent,\n  compositionupdate: evt => evt instanceof CompositionEvent,\n  compositionend: evt => evt instanceof CompositionEvent\n};\nexport { inputEmits, inputProps };","map":{"version":3,"mappings":"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","names":["inputProps","buildProps","size","useSizeProp","disabled","Boolean","modelValue","type","definePropType","String","Number","Object","default","resize","values","autosize","autocomplete","placeholder","form","readonly","clearable","showPassword","showWordLimit","suffixIcon","iconPropType","prefixIcon","label","tabindex","validateEvent","inputStyle","Array","mutable","inputEmits","UPDATE_MODEL_EVENT","value","isString","input","change","focus","evt","FocusEvent","blur","clear","mouseleave","MouseEvent","mouseenter","keydown","Event","compositionstart","CompositionEvent","compositionupdate","compositionend"],"sources":["../../../../../../packages/components/input/src/input.ts"],"sourcesContent":["import { isString } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  iconPropType,\n  mutable,\n} from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useSizeProp } from '@element-plus/hooks'\nimport type Input from './input.vue'\nimport type { ExtractPropTypes, StyleValue } from 'vue'\n\nexport type InputAutoSize = { minRows?: number; maxRows?: number } | boolean\n\nexport const inputProps = buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType<string | number | null | undefined>([\n      String,\n      Number,\n      Object,\n    ]),\n    default: '',\n  },\n  type: {\n    type: String,\n    default: 'text',\n  },\n  resize: {\n    type: String,\n    values: ['none', 'both', 'horizontal', 'vertical'],\n  },\n  autosize: {\n    type: definePropType<InputAutoSize>([Boolean, Object]),\n    default: false,\n  },\n  autocomplete: {\n    type: String,\n    default: 'off',\n  },\n  placeholder: {\n    type: String,\n  },\n  form: {\n    type: String,\n    default: '',\n  },\n  readonly: {\n    type: Boolean,\n    default: false,\n  },\n  clearable: {\n    type: Boolean,\n    default: false,\n  },\n  showPassword: {\n    type: Boolean,\n    default: false,\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false,\n  },\n  suffixIcon: {\n    type: iconPropType,\n    default: '',\n  },\n  prefixIcon: {\n    type: iconPropType,\n    default: '',\n  },\n  label: {\n    type: String,\n  },\n  tabindex: {\n    type: [Number, String],\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  inputStyle: {\n    type: definePropType<StyleValue>([Object, Array, String]),\n    default: () => mutable({} as const),\n  },\n} as const)\nexport type InputProps = ExtractPropTypes<typeof inputProps>\n\nexport const inputEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: (evt: MouseEvent) => evt instanceof MouseEvent,\n  mouseenter: (evt: MouseEvent) => evt instanceof MouseEvent,\n  // NOTE: when autofill by browser, the keydown event is instanceof Event, not KeyboardEvent\n  // relative bug report https://github.com/element-plus/element-plus/issues/6665\n  keydown: (evt: KeyboardEvent | Event) => evt instanceof Event,\n  compositionstart: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionupdate: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionend: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n}\nexport type InputEmits = typeof inputEmits\n\nexport type InputInstance = InstanceType<typeof Input>\n"]},"metadata":{},"sourceType":"module"}