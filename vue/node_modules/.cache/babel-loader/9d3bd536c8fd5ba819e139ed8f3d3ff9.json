{"ast":null,"code":"import { inject, computed } from 'vue';\nimport '../../../utils/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\n\nfunction useMenu(instance, currentIndex) {\n  const rootMenu = inject(\"rootMenu\");\n  if (!rootMenu) throwError(\"useMenu\", \"can not inject root menu\");\n  const indexPath = computed(() => {\n    let parent = instance.parent;\n    const path = [currentIndex.value];\n\n    while (parent.type.name !== \"ElMenu\") {\n      if (parent.props.index) {\n        path.unshift(parent.props.index);\n      }\n\n      parent = parent.parent;\n    }\n\n    return path;\n  });\n  const parentMenu = computed(() => {\n    let parent = instance.parent;\n\n    while (parent && ![\"ElMenu\", \"ElSubMenu\"].includes(parent.type.name)) {\n      parent = parent.parent;\n    }\n\n    return parent;\n  });\n  const paddingStyle = computed(() => {\n    let parent = instance.parent;\n    if (rootMenu.props.mode !== \"vertical\") return {};\n    let padding = 20;\n\n    if (rootMenu.props.collapse) {\n      padding = 20;\n    } else {\n      while (parent && parent.type.name !== \"ElMenu\") {\n        if (parent.type.name === \"ElSubMenu\") {\n          padding += 20;\n        }\n\n        parent = parent.parent;\n      }\n    }\n\n    return {\n      paddingLeft: `${padding}px`\n    };\n  });\n  return {\n    parentMenu,\n    paddingStyle,\n    indexPath\n  };\n}\n\nexport { useMenu as default };","map":{"version":3,"mappings":";;;;AAEe,SAASA,OAAT,CAAiBC,QAAjB,EAA2BC,YAA3B,EAAyC;AACtD,QAAMC,QAAQ,GAAGC,MAAM,CAAC,UAAD,CAAvB;AACA,MAAI,CAACD,QAAL,EACEE,UAAU,CAAC,SAAD,EAAY,0BAAZ,CAAV;AACF,QAAMC,SAAS,GAAGC,QAAQ,CAAC,MAAM;AAC/B,QAAIC,MAAM,GAAGP,QAAQ,CAACO,MAAtB;AACA,UAAMC,IAAI,GAAG,CAACP,YAAY,CAACQ,KAAd,CAAb;;AACA,WAAOF,MAAM,CAACG,IAAP,CAAYC,IAAZ,KAAqB,QAA5B,EAAsC;AACpC,UAAIJ,MAAM,CAACK,KAAP,CAAaC,KAAjB,EAAwB;AACtBL,YAAI,CAACM,OAAL,CAAaP,MAAM,CAACK,KAAP,CAAaC,KAA1B;AACD;;AACDN,YAAM,GAAGA,MAAM,CAACA,MAAhB;AACD;;AACD,WAAOC,IAAP;AACD,GAVyB,CAA1B;AAWA,QAAMO,UAAU,GAAGT,QAAQ,CAAC,MAAM;AAChC,QAAIC,MAAM,GAAGP,QAAQ,CAACO,MAAtB;;AACA,WAAOA,MAAM,IAAI,CAAC,CAAC,QAAD,EAAW,WAAX,EAAwBS,QAAxB,CAAiCT,MAAM,CAACG,IAAP,CAAYC,IAA7C,CAAlB,EAAsE;AACpEJ,YAAM,GAAGA,MAAM,CAACA,MAAhB;AACD;;AACD,WAAOA,MAAP;AACD,GAN0B,CAA3B;AAOA,QAAMU,YAAY,GAAGX,QAAQ,CAAC,MAAM;AAClC,QAAIC,MAAM,GAAGP,QAAQ,CAACO,MAAtB;AACA,QAAIL,QAAQ,CAACU,KAAT,CAAeM,IAAf,KAAwB,UAA5B,EACE,OAAO,EAAP;AACF,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAIjB,QAAQ,CAACU,KAAT,CAAeQ,QAAnB,EAA6B;AAC3BD,aAAO,GAAG,EAAV;AACD,KAFD,MAEO;AACL,aAAOZ,MAAM,IAAIA,MAAM,CAACG,IAAP,CAAYC,IAAZ,KAAqB,QAAtC,EAAgD;AAC9C,YAAIJ,MAAM,CAACG,IAAP,CAAYC,IAAZ,KAAqB,WAAzB,EAAsC;AACpCQ,iBAAO,IAAI,EAAX;AACD;;AACDZ,cAAM,GAAGA,MAAM,CAACA,MAAhB;AACD;AACF;;AACD,WAAO;AAAEc,iBAAW,EAAG,GAAEF,OAAQ;AAA1B,KAAP;AACD,GAhB4B,CAA7B;AAiBA,SAAO;AACLJ,cADK;AAELE,gBAFK;AAGLZ;AAHK,GAAP;AAKF","names":["useMenu","instance","currentIndex","rootMenu","inject","throwError","indexPath","computed","parent","path","value","type","name","props","index","unshift","parentMenu","includes","paddingStyle","mode","padding","collapse","paddingLeft"],"sources":["../../../../../../packages/components/menu/src/use-menu.ts"],"sourcesContent":["import { computed, inject } from 'vue'\nimport { throwError } from '@element-plus/utils'\n\nimport type { CSSProperties, ComponentInternalInstance, Ref } from 'vue'\nimport type { MenuProvider } from './types'\n\nexport default function useMenu(\n  instance: ComponentInternalInstance,\n  currentIndex: Ref<string>\n) {\n  const rootMenu = inject<MenuProvider>('rootMenu')\n  if (!rootMenu) throwError('useMenu', 'can not inject root menu')\n\n  const indexPath = computed(() => {\n    let parent = instance.parent!\n    const path = [currentIndex.value]\n    while (parent.type.name !== 'ElMenu') {\n      if (parent.props.index) {\n        path.unshift(parent.props.index as string)\n      }\n      parent = parent.parent!\n    }\n    return path\n  })\n\n  const parentMenu = computed(() => {\n    let parent = instance.parent\n    while (parent && !['ElMenu', 'ElSubMenu'].includes(parent.type.name!)) {\n      parent = parent.parent\n    }\n    return parent!\n  })\n  const paddingStyle = computed<CSSProperties>(() => {\n    let parent = instance.parent\n    if (rootMenu.props.mode !== 'vertical') return {}\n\n    let padding = 20\n\n    if (rootMenu.props.collapse) {\n      padding = 20\n    } else {\n      while (parent && parent.type.name !== 'ElMenu') {\n        if (parent.type.name === 'ElSubMenu') {\n          padding += 20\n        }\n        parent = parent.parent\n      }\n    }\n    return { paddingLeft: `${padding}px` }\n  })\n\n  return {\n    parentMenu,\n    paddingStyle,\n    indexPath,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}