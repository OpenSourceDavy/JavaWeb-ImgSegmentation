{"ast":null,"code":"import { defineComponent, nextTick, computed, provide, toRefs, watch, h, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroup } from './useCheckbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCheckboxGroup\",\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => []\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: void 0\n    },\n    max: {\n      type: Number,\n      default: void 0\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    fill: {\n      type: String,\n      default: void 0\n    },\n    textColor: {\n      type: String,\n      default: void 0\n    },\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      elFormItem\n    } = useCheckboxGroup();\n    const checkboxGroupSize = useSize();\n    const ns = useNamespace(\"checkbox\");\n\n    const changeEvent = value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => {\n        emit(\"change\", value);\n      });\n    };\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n\n      set(val) {\n        changeEvent(val);\n      }\n\n    });\n    provide(\"CheckboxGroup\", {\n      name: \"ElCheckboxGroup\",\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent\n    });\n    watch(() => props.modelValue, () => {\n      var _a;\n\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n    });\n    return () => {\n      return h(props.tag, {\n        class: ns.b(\"group\"),\n        role: \"group\",\n        \"aria-label\": \"checkbox-group\"\n      }, [renderSlot(slots, \"default\")]);\n    };\n  }\n\n});\n\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue\"]]);\n\nexport { CheckboxGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;AAmBA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,mBADuB;AAG7BC,OAAO;AACLC,cAAY;AACVC,UAAM,OADI;AAEVC,eAAS,MAAM;AAFL,KADP;AAKLC,YAAU,SALL;AAMLC,OAAK;AACHH,UAAM,QADH;AAEHC,aAAS;AAFN,KANA;AAULG,OAAK;AACHJ,UAAM,QADH;AAEHC,aAAS;AAFN,KAVA;AAcLI,QAAM;AACJL,UAAM,QADF;AAEJM,eAAW;AAFP,KAdD;AAkBLC,QAAM;AACJP,UAAM,QADF;AAEJC,aAAS;AAFL,KAlBD;AAsBLO,aAAW;AACTR,UAAM,QADG;AAETC,aAAS;AAFA,KAtBN;AA0BLQ,OAAK;AACHT,UAAM,QADH;AAEHC,aAAS;AAFN;AA1BA,GAHsB;AAmC7BS,SAAO,CAACC,kBAAD,EAAqB,QAArB,CAnCsB;;AAqC7BC,OAAM,QAAO;AAAEC,QAAF;AAAQC;AAAR,GAAP,EAAwB;AACtB;AAAEC;AAAF,QAAiBC,gBAAiB,EAAlC;AACN,UAAMC,oBAAoBC,OAAQ,EAAlC;AACM,eAAKC,aAAa,UAAb,CAAL;;AAEA,wBAAeC,KAAD,IAAW;AAC7BP,WAAKF,kBAAL,EAAyBS,KAAzB;AACAC,eAAS,MAAM;AACbR,aAAK,QAAL,EAAeO,KAAf;AACD,OAFD;AAGF,KALM;;AAON,UAAMrB,aAAauB,QAAS;AAC1BC,SAAM;AACJ,eAAOzB,KAAM,WAAb;AACF,OAH0B;;AAI1B0B,UAAIC,GAAJ,EAAS;AACPC,oBAAYD,GAAZ;AACF;;AAN0B,MAA5B;AASAE,YAAQ,eAAR,EAAyB;AACvB9B,UAAM,mBADiB;AAEvBE,gBAFuB;AAEvB,SACG6B,OAAO9B,KAAP,CAHoB;AAIvBmB,uBAJuB;AAKvBS;AALuB,KAAzB;AASEG,gBAAM/B,KAAM,WAAZ,EACA,MAAM;AACO;;AAEf;AACA,KALE;AAMO;AAGH,eAAOA,KAAK,CAAOW,GAAnB,EAAmB;AACnBqB,aAAM,eADa;AAEnBC,YAAc,SAFK;AAEL,sBAEG;AAJE,OAAnB,EAMN,8BANM;AAOR,KAVW;AAWZ;;AApF8B,EAA/B","names":["_sfc_main","defineComponent","name","props","modelValue","type","default","disabled","min","max","size","validator","fill","textColor","tag","emits","UPDATE_MODEL_EVENT","setup","emit","slots","elFormItem","useCheckboxGroup","checkboxGroupSize","useSize","useNamespace","value","nextTick","computed","get","set","val","changeEvent","provide","toRefs","watch","class","role"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  h,\n  nextTick,\n  provide,\n  renderSlot,\n  toRefs,\n  watch,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn, isValidComponentSize } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { useCheckboxGroup } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElCheckboxGroup',\n\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [],\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: undefined,\n    },\n    textColor: {\n      type: String,\n      default: undefined,\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, { emit, slots }) {\n    const { elFormItem } = useCheckboxGroup()\n    const checkboxGroupSize = useSize()\n    const ns = useNamespace('checkbox')\n\n    const changeEvent = (value) => {\n      emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'ElCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n    )\n    return () => {\n      return h(\n        props.tag,\n        {\n          class: ns.b('group'),\n          role: 'group',\n          'aria-label': 'checkbox-group',\n        },\n        [renderSlot(slots, 'default')]\n      )\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}